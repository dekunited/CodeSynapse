example_id,start_language,target_language,source_code,reference_code,translated_code,inference_time,bleu_1,bleu_2,bleu_4,keyword_match,codebleu
2048,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int min ( int x , int y ) { return ( x < y ) ? x : y ; } int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) printf ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } float hour_angle = 0.5 * ( h * 60 + m ) ; float minute_angle = 6 * m ; float angle = abs ( hour_angle - minute_angle ) ; angle = min ( 360 - angle , angle ) ; return angle ; } int main ( ) { cout << calcAngle ( 9 , 60 ) << endl ; cout << calcAngle ( 3 , 30 ) << endl ; return 0 ; }","import java . io . * ; class GFG { static int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) System . out . println ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ; int minute_angle = ( int ) ( 6 * m ) ; int angle = Math . abs ( hour_angle - minute_angle ) ; angle = Math . min ( 360 - angle , angle ) ; return angle ; } public static void main ( String [ ] args ) { System . out . println ( calcAngle ( 9 , 60 ) + "" ▁ degree "" ) ; System . out . println ( calcAngle ( 3 , 30 ) + "" ▁ degree "" ) ; } }","class Solution { public static int min(int x, int y) { return (x < y) ? x : y; } public static double calcAngle(double h, double m) { if (h < 0 && m > 60 || h > 12 && m < 60) { System.out.println(""Wrong input""); } else if (h == 12) { h = 0; } else if (m == 60) { m = 0; h += 1; if (h > 12) { h -= 12; } } double hour_angle = 0.5 * (h * 60 + m); double minute_angle = 6 * m; double angle = Math.abs(hour_angle - minute_angle); angle = Math.min(360 - angle, angle); return angle; } public static void main(String[] args) { System.out.println(calcAngle(9, 60)); System.out.println(calcAngle(3, 30)); } }",8.302624940872192,0.7455429973324447,0.661172719010079,0.5248301183831455,0.9411764705882353,0.6497340240446725
13186,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; long long moduloMultiplication ( long long a , long long b , long long mod ) { a %= mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; } return res ; } int main ( ) { long long a = 426 ; long long b = 964 ; long long m = 235 ; cout << moduloMultiplication ( a , b , m ) ; return 0 ; }","class GFG { static long moduloMultiplication ( long a , long b , long mod ) { long res = 0 ; a %= mod ; while ( b > 0 ) { if ( ( b & 1 ) > 0 ) { res = ( res + a ) % mod ; } a = ( 2 * a ) % mod ; } return res ; } public static void main ( String [ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L ; System . out . print ( moduloMultiplication ( a , b , m ) ) ; } }","Here is the translation of the given code from C++ to Java without any comments in the translated code: import java.math.*; public class ModuloMultiplication { public static long long moduloMultiplication(long long a, long long b, long long mod) { long long res = 0; while (b != 0) { if ((b & 1) == 1) { res = (res + a) % mod; } a = (2 * a) % mod; b >>= 1; } return res; } public static void main(String[] args) { long long a = 426L; long long b = 964L; long long m = 235L; System.out.println(moduloMultiplication(a, b, m)); } }",6.539883136749268,0.6959459459459459,0.6527552027067905,0.5448958297370068,1.0,0.6814270808159046
2200,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ maximum ▁ element ▁ is ▁ "" << findMaximum ( arr , 0 , n - 1 ) ; return 0 ; }","class Main { static int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( "" The ▁ maximum ▁ element ▁ is ▁ "" + findMaximum ( arr , 0 , n - 1 ) ) ; } }","#include <java.io.*> import java.util.*; class Main { public static int findMax(int[] arr, int low, int high) { if (low == high) { return arr[low]; } else if ((high == low + 1) && (arr[low] >= arr[high])) { return arr[low]; } else if ((high == low + 1) && (arr[low] < arr[high])) { return arr[high]; } int mid = (low + high) / 2; if (arr[mid] > arr[mid + 1]) { return arr[mid]; } else if (arr[mid] > arr[mid - 1]) { return findMax(arr, low, mid - 1); } else { return findMax(arr, mid + 1, high); } } public static void main(String[] args) { int arr[] = {1, 3, 50, 10, 9, 7, 6}; int n = arr.length; System.out.println(""The maximum element is: "" + findMax(arr, 0, n - 1)); } }",5.440921068191528,0.8497416730612602,0.7855314242477649,0.6920830816829726,1.0,0.7844581571780808
9260,C++,Java,#include <bits/stdc++.h> NEW_LINE using namespace std ; #define PI  3.14159265 NEW_LINE float length_rope ( float r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } int main ( ) { float r = 7 ; cout << ceil ( length_rope ( r ) ) << endl ; return 0 ; },import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } },import java.lang.*; public class Program { public static void main(String[] args) { float radius = 7.0f; System.out.println(Math.ceil((2 * Math.PI * radius) + 6 * radius)); } },1.6024909019470215,0.4364453089480475,0.357799430023169,0.2597676570087797,0.9090909090909091,0.4545646326334185
13513,C++,Java,"#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int phi ( unsigned int n ) { unsigned int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } int main ( ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) cout << "" phi ( "" << n << "" ) ▁ = ▁ "" << phi ( n ) << endl ; return 0 ; }","import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int phi ( int n ) { int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) System . out . println ( "" phi ( "" + n + "" ) ▁ = ▁ "" + phi ( n ) ) ; } }","import java.io.*; class Main { public static int gcd(int a, int b){ if (a==0) return b; return gcd(b%a,a);} public static int phi(int n){ int result=1; for(int i=2;i<n;i++){if(gcd(i,n)==1)result++;}return result;}public static void main(String[] args) {int n=1;for(;n<=10;n++){System.out.println(""phi(""+n+"")▁ = ▁""+phi(n));}return 0;}",2.965467929840088,0.7276708780952474,0.6486969245468193,0.5364755855382459,1.0,0.6755329098767722
2000,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } int main ( ) { cout << pow ( 5 , 3 ) ; return 0 ; }","import java . io . * ; class GFG { static int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Main { static int pow(int a, int b) { if (b == 0) { return 1; } int answer = a; int increment = a; for (int i = 1; i < b; i++) { for (int j = 1; j < a; j++) { answer += increment; } increment = answer; } return answer; } public static void main(String[] args) { System.out.println(pow(5, 3)); } }",4.599697828292847,0.8095846869444117,0.7732521579221777,0.6918817528004624,1.0,0.7843172269603236
1682,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << equilibrium ( arr , arr_size ) ; return 0 ; }","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( equi . equilibrium ( arr , arr_size ) ) ; } }","import java.io.*; class Equilibrium { int equilibrium( int arr[], int n ) { int i=0, j = 0, leftSum=0, rightsum=0; while ( i < n ) { leftSum = 0; rightsum = 0; for( j = 0; j < i; j++){ leftSum += arr[j]; } for( j = i + 1; j < n; j++){ rightsum += arr[j]; } if( leftSum == rightsum ) { return i; } i++; } return -1; } public static void main (String[] args) throws IOException { int arr[] = new int[]{-7, 1, 5, 2, -4, 3, 0}; int arr_size = 7; int equilibrium_index = equilibrium(arr, arr_size); System.out.println(""Equilibrium Index : ""+equilibrium_index); } }",7.256269216537476,0.7861271676300579,0.6927504693592196,0.5487813202589145,0.9523809523809523,0.6698612098955258
13511,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m , a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } int main ( ) { int a = 3 , m = 11 ; cout << "" Modular ▁ multiplicative ▁ inverse ▁ is ▁ "" << modInverse ( a , m ) ; return 0 ; }","class GFG { static int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( "" Modular ▁ multiplicative ▁ "" + "" inverse ▁ is ▁ "" + modInverse ( a , m ) ) ; } }","public class Main { int modInverse(int a, int m) { int m0 = m; int y = 0, x = 1; while (a > 1) { int q = a / m; int t = m; m = a % m; a = t; t = y; y = x - q * y; x = t; } if (x < 0) x += m0; return x; } public static void main(String[] args) { int a = 3, m = 11; System.out.println(""Modular multiplicative inverse is "" + modInverse(a, m)); } }",4.338993787765503,0.8341134657526893,0.7994109624055964,0.7570101397199989,1.0,0.8299070978039991
1994,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define bool  int NEW_LINE bool isLucky ( int n ) { static int counter = 2 ; int next_position = n ; if ( counter > n ) return 1 ; if ( n % counter == 0 ) return 0 ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } int main ( ) { int x = 5 ; if ( isLucky ( x ) ) cout << x << "" ▁ is ▁ a ▁ lucky ▁ no . "" ; else cout << x << "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ; }","import java . io . * ; class GFG { public static int counter = 2 ; static boolean isLucky ( int n ) { int next_position = n ; if ( counter > n ) return true ; if ( n % counter == 0 ) return false ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } public static void main ( String [ ] args ) { int x = 5 ; if ( isLucky ( x ) ) System . out . println ( x + "" ▁ is ▁ a ▁ lucky ▁ no . "" ) ; else System . out . println ( x + "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ) ; } }","import java.util.*; public class Main { public static void main(String[] args) { int x = 5; boolean isLucky = isLucky(x); if (isLucky) System.out.println(x + "" is lucky.""); else System.out.println(x + "" is not lucky.""); } public static boolean isLucky(int n) { int counter = 2; int next_position = n; if (counter > n) return true; if (n % counter == 0) return false; next_position -= next_position / counter; counter++; return isLucky(next_position); } }",5.216458082199097,0.7701823275959635,0.7127312606698896,0.6138340754358083,1.0,0.7296838528050658
1824,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; cout << "" Following ▁ activities ▁ are ▁ selected ▁ "" << endl ; i = 0 ; cout << "" ▁ "" << i ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { cout << "" ▁ "" << j ; i = j ; } } } int main ( ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = sizeof ( s ) / sizeof ( s [ 0 ] ) ; printMaxActivities ( s , f , n ) ; return 0 ; }","import java . util . * ; import java . lang . * ; import java . io . * ; class ActivitySelection { public static void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; System . out . print ( "" Following ▁ activities ▁ are ▁ selected ▁ : ▁ n "" ) ; i = 0 ; System . out . print ( i + "" ▁ "" ) ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { System . out . print ( j + "" ▁ "" ) ; i = j ; } } } public static void main ( String [ ] args ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = s . length ; printMaxActivities ( s , f , n ) ; } }","import java.io.*; import java.util.*; class Solution { public static void main(String[] args){ int[] startTime = {1,3,0,5,8,5}; int[] finishTime = {2,4,6,7,9,9}; int n = startTime.length; System.out.println(""Following ▁ activities ▁ are ▁ selected ▁ ""); for(int i=0;i<n;++i){ if (startTime[i] >= finishTime[j]){ System.out.println((i+1)+"" ""+(i)); j = i; } } } }",3.970366954803467,0.36685629061377323,0.3081147900729874,0.20029124074742297,1.0,0.44020386852319604
13031,C++,Java,"#include <iostream> NEW_LINE using namespace std ; bool check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } int main ( ) { int n = 9 ; if ( check ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","public class Power_3 { static boolean check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } public static void main ( String args [ ] ) { int n = 9 ; if ( check ( n ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","class Check { public static boolean check(int n){ if(n <= 0) return false; return (1162261467 % n == 0); } public static void main(String[] args) { int n = 9; if(check(n)){ System.out.println(""Yes""); } else { System.out.println(""No""); } return 0; } }",3.0127549171447754,0.8227848101265823,0.7406235256532531,0.6084284527769662,1.0,0.7258999169438763
2001,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int multiply ( int x , int y ) { if ( y ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } int pow ( int a , int b ) { if ( b ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } int main ( ) { cout << pow ( 5 , 3 ) ; getchar ( ) ; return 0 ; }","import java . io . * ; class GFG { static int multiply ( int x , int y ) { if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } static int pow ( int a , int b ) { if ( b > 0 ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Main { public static int multiply(int x, int y) { if (y == 0) { return 0; } else { return x + multiply(x, y - 1); } } public static int pow(int a, int b) { if (b == 0) { return 1; } else { return a + multiply(a, pow(a, b - 1)); } } public static void main(String[] args) { System.out.println(pow(5, 3)); System.out.getChar(); return 0; } }",4.8549721240997314,0.8205128205128205,0.7427813527082074,0.6386479564455154,1.0,0.7470535695118607
1705,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int Xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) Xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) Xor ^= i ; set_bit_no = Xor & ~ ( Xor - 1 ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { if ( i & set_bit_no ) x = x ^ i ; else y = y ^ i ; } cout << "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ "" << y << "" ▁ "" << x ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) xor ^= i ; set_bit_no = ( xor & ~ ( xor - 1 ) ) ; for ( i = 0 ; i < size ; i ++ ) { int a = arr [ i ] & set_bit_no ; if ( a != 0 ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { int a = i & set_bit_no ; if ( a != 0 ) x = x ^ i ; else y = y ^ i ; } System . out . println ( "" The ▁ two ▁ reppeated ▁ elements ▁ are ▁ : "" ) ; System . out . println ( x + "" ▁ "" + y ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }"," public static void printRepeating(int arr[], int size) { int xor = arr[0]; int set_bit_no = (xor & -xor); for (int i = 1; i < size; i++) { xor ^= arr[i]; set_bit_no &= (xor - 1); } int x = 0, y = 0; for (int i = 1; i <= size - 2; i++) { if ((arr[i] & set_bit_no) == (x ^ arr[i])) { x = x ^ arr[i]; } else { y = y ^ arr[i]; } } System.out.println(""The ▁ two ▁ repeating ▁ elements ▁ are ▁ "" + y + "" ▁ and ▁ "" + x); } public static void main(String[] args) { int arr[] = { 4, 2, 4, 5, 2, 3, 1 }; int arr_size = sizeof(arr) / sizeof(arr[0]); printRepeating(arr, arr_size); } }",15.246371030807495,0.6491881717603455,0.5868801432752256,0.4825104888998697,0.888888888888889,0.6044240088965754
6659,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; cout << res << endl ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { cout << "" ▁ "" << wt [ i - 1 ] ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; printknapSack ( W , wt , val , n ) ; return 0 ; }","class GFG { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { System . out . print ( wt [ i - 1 ] + "" ▁ "" ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } public static void main ( String arg [ ] ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; printknapSack ( W , wt , val , n ) ; } }","#include <iostream> #include <algorithm> int max(int a, int b) { return (a > b) ? a : b; } void printKnapSack(int W, int wt[], int val[], int n) { int K[n + 1][W + 1]; for (int i = 0; i <= n; i++) { for (int w = 0; w <= W; w++) { if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i - 1] <= w) { K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]); } else { K[i][w] = K[i - 1][w]; } } } int res = K[n][W]; std::cout << res; } int main() { int val[]={60,100,120}; int wt[]={10,20,30}; int W=50; int n=sizeof(val)/sizeof(val[0]); printKnapSack(W,wt,val,n); return 0; }",12.886886358261108,0.6346250897559385,0.5930063369425644,0.5253942338222383,0.7058823529411764,0.5795406695579197
2095,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int fun ( unsigned int n ) { return n & ( n - 1 ) ; } int main ( ) { int n = 7 ; cout << "" The ▁ number ▁ after ▁ unsetting ▁ the "" ; cout << "" ▁ rightmost ▁ set ▁ bit ▁ "" << fun ( n ) ; return 0 ; }","class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String arg [ ] ) { int n = 7 ; System . out . print ( "" The ▁ number ▁ after ▁ unsetting ▁ "" + "" the ▁ rightmost ▁ set ▁ bit ▁ "" + fun ( n ) ) ; } }","public class Main { public static int fun(int n) { return n & (n - 1); } public static void main(String[] args) { int n = 7; System.out.println(""The number after unsetting the rightmost set bit is: "" + fun(n)); } }",1.6761658191680908,0.7428801486199896,0.64663657286689,0.5557971466949865,1.0,0.6890580026864905
1861,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Knapsack { public static int max(int a, int b) { if (a > b) { return a; } else { return b; } } public static int knapSack(int W, int[] wt, int[] val, int n) { if (n == 0 || W == 0) { return 0; } else if (wt[n - 1] > W) { return knapSack(W, wt, val, n - 1); } else { return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1)); } } public static void main(String[] args) { int[] val = {60, 100, 120}; int[] wt = {10, 20, 30}; int W = 50; int n = val.length / sizeof(val[0]); System.out.println(knapSack(W, wt, val, n)); } }",6.7696168422698975,0.8761467889908257,0.8037455126005331,0.6873713978134358,0.9473684210526316,0.7653705047851945
1843,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define R  3 NEW_LINE #define C  3 NEW_LINE int min ( int x , int y , int z ) ; int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int minCost ( int cost [ R ] [ C ] , int m , int n ) { if ( n < 0 m < 0 ) return INT_MAX ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << minCost ( cost , 2 , 2 ) << endl ; return 0 ; }","public class GFG { static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . print ( minCost ( cost , 2 , 2 ) ) ; } }","class Program { static int min (int x, int y, int z) { if (x < y && x < z) { return x; } else if (y < x && y < z) { return y; } else { return z; } } static int minCost (int cost[][3], int m, int n) { if (n < 0 || m < 0) { return Integer.MAX_VALUE; } else if (m == 0 && n == 0) { return cost[m][n]; } else { return cost[m][n] + min(minCost(cost, m-1, n), minCost(cost, m, n-1)); } } public static void main (String[] args) throws java.lang.Exception { int[][] cost = {{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}; System.out.println(minCost(cost, 2, 2)); } }",7.217913866043091,0.8300371219970947,0.7629894526544281,0.6616525972614895,1.0,0.7631568180830426
1867,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int x , int y ) { return ( x > y ) ? x : y ; } int lps ( char * seq , int i , int j ) { if ( i == j ) return 1 ; if ( seq [ i ] == seq [ j ] && i + 1 == j ) return 2 ; if ( seq [ i ] == seq [ j ] ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } int main ( ) { char seq [ ] = "" GEEKSFORGEEKS "" ; int n = strlen ( seq ) ; cout << "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ "" << lps ( seq , 0 , n - 1 ) ; return 0 ; }","class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int lps ( char seq [ ] , int i , int j ) { if ( i == j ) { return 1 ; } if ( seq [ i ] == seq [ j ] && i + 1 == j ) { return 2 ; } if ( seq [ i ] == seq [ j ] ) { return lps ( seq , i + 1 , j - 1 ) + 2 ; } return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { String seq = "" GEEKSFORGEEKS "" ; int n = seq . length ( ) ; System . out . printf ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d "" , lps ( seq . toCharArray ( ) , 0 , n - 1 ) ) ; } }","import java.util.Scanner; public class Main { public static int max(int x, int y){ if (x>y) return x; else return y;} public static int lps(char[] seq, int i, int j){ if (i==j) return 1; if (seq[i]==seq[j]&&i+1==j) return 2; if (seq[i]==seq[j]){return lps(seq, i+1, j-1)+2;} else {return max(lps(seq, i, j-1), lps(seq, i+1, j));}} public static void main(String[] args){ Scanner sc=new Scanner(System.in); char seq[]; int n; System.out.print(""Enter the string: ""); seq=sc.nextLine().toCharArray(); n = seq.length; System.out.println(""The length of the LPS is "" + lps(seq, 0, n-1)); }",4.905044078826904,0.7319009857834924,0.6210155103940745,0.4637807323565758,0.9411764705882353,0.6069994538260737
1949,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( char * pat , char * txt ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } } int main ( ) { char txt [ ] = "" AABAACAADAABAAABAA "" ; char pat [ ] = "" AABA "" ; search ( pat , txt ) ; return 0 ; }","public class NaiveSearch { public static void search ( String txt , String pat ) { int M = pat . length ( ) ; int N = txt . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } } public static void main ( String [ ] args ) { String txt = "" AABAACAADAABAAABAA "" ; String pat = "" AABA "" ; search ( txt , pat ) ; } }","public class Search { public static void main(String[] args) { String txt = ""AABAACAADAABAAABAA""; String pat = ""AABA""; int M = pat.length(); int N = txt.length(); for (int i = 0; i <= N - M; i++) { int j = 0; while (j < M && txt.charAt(i + j) == pat.charAt(j)) { j++; } if (j == M) { System.out.println(""Pattern "" + new StringBuffer(pat).reverse() + "" found at index "" + i); } } } }",4.335355997085571,0.6604368172862808,0.5798973600756699,0.44684250759616106,0.888888888888889,0.5794564219839794
13418,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findRoots ( int a , int b , int c ) { if ( a == 0 ) { cout << "" Invalid "" ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ different ▁ STRNEWLINE "" ; cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << "" STRNEWLINE "" << ( double ) ( - b - sqrt_val ) / ( 2 * a ) ; } else if ( d == 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ same ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) ; } { cout << "" Roots ▁ are ▁ complex ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) << "" ▁ + ▁ i "" << sqrt_val << "" STRNEWLINE "" << - ( double ) b / ( 2 * a ) << "" ▁ - ▁ i "" << sqrt_val ; } } int main ( ) { int a = 1 , b = -7 , c = 12 ; findRoots ( a , b , c ) ; return 0 ; }","import java . io . * ; import static java . lang . Math . * ; class Quadratic { static void findRoots ( int a , int b , int c ) { if ( a == 0 ) { System . out . println ( "" Invalid "" ) ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { System . out . println ( ""Roots are real and different NEW_LINE""); System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + ""NEW_LINE"" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ; } else if ( d == 0 ) { System . out . println ( ""Roots are real and same NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) ) ; } { System . out . println ( ""Roots are complex NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + "" ▁ + ▁ i "" + sqrt_val + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) + "" ▁ - ▁ i "" + sqrt_val ) ; } } public static void main ( String args [ ] ) { int a = 1 , b = - 7 , c = 12 ; findRoots ( a , b , c ) ; } }","public class Main { public static void findRoots(int a, int b, int c) { if (a == 0) { System.out.println(""Invalid""); return; } double d = b * b - 4 * a * c; double sqrt_val = Math.sqrt(Math.abs(d)); if (d > 0) { System.out.println(""Roots are real and different""); System.out.println((double) (-b + sqrt_val) / (2 * a)); System.out.println((double) (-b - sqrt_val) / (2 * a)); } else if (d == 0) { System.out.println(""Roots are real and same""); System.out.println((-b) / (2 * a)); } else { System.out.println(""Roots are complex""); double x1 = (-b + Math.sqrt(d)) / (2 * a); double y1 = -1; double x2 = (-b - Math.sqrt(d)) / (2 * a); double y2 = -1; System.out.println((-x1 + x2) + "" + "" + (y1 + y2) + ""i""); System.out.println((-x1 - x2) + "" + "" + (y1 + y2) + ""i""); } } public static void main(String[] args) { int a = 1, b = -7, c = 12; findRoots(a, b, c); } }",8.42819619178772,0.7251738962529736,0.628650101795833,0.507005461275056,1.0,0.6549038228925391
1687,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return -1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == -1 ) cout << "" Ceiling ▁ of ▁ "" << x << "" ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" ; else cout << "" ceiling ▁ of ▁ "" << x << "" ▁ is ▁ "" << arr [ index ] ; return 0 ; }","class Main { static int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = arr . length ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) System . out . println ( "" Ceiling ▁ of ▁ "" + x + "" ▁ doesn ' t ▁ exist ▁ in ▁ array "" ) ; else System . out . println ( "" ceiling ▁ of ▁ "" + x + "" ▁ is ▁ "" + arr [ index ] ) ; } }","public class CeilSearch { static int ceilSearch(int[] arr, int low, int high, int x) { if (x <= arr[low]) { return low; } int i = low; int j = high; while (i <= j) { if (arr[(i + j) / 2] == x) { return i; } else if (arr[(i + j) / 2] < x) { i = (i + j) / 2 + 1; } else if (arr[(i + j) / 2] > x) { j = (i + j) / 2 - 1; } } return -1; } public static void main(String[] args) { int arr[] = { 1, 2, 8, 10, 10, 12, 19 }; int n = arr.length; int x = 3; int index = ceilSearch(arr, 0, n - 1, x); if (index == -1) { System.out.println("" Ceiling of "" + x + "" doesn't exist in array""); } else { System.out.println("" Ceiling of "" + x + "" is "" + arr[index]); } return 0; } }",12.21910810470581,0.7341269841269841,0.6444554566776208,0.5145788851232375,0.9,0.6302052195862662
8588,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPalRec ( char str [ ] , int s , int e ) { if ( s == e ) return true ; if ( str [ s ] != str [ e ] ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } bool isPalindrome ( char str [ ] ) { int n = strlen ( str ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } int main ( ) { char str [ ] = "" geeg "" ; if ( isPalindrome ( str ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","import java . io . * ; class GFG { static boolean isPalRec ( String str , int s , int e ) { if ( s == e ) return true ; if ( ( str . charAt ( s ) ) != ( str . charAt ( e ) ) ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } static boolean isPalindrome ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } public static void main ( String args [ ] ) { String str = "" geeg "" ; if ( isPalindrome ( str ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","public class Palindrome { public static boolean isPalindrome(char[] str) { int n = str.length; if (n == 0) { return true; } else { for (int i = 0, j = n - 1; i < j; i++, j--) { if (str[i] != str[j]) { return false; } } return true; } } public static void main(String[] args) { char str[] = ""geeg""; if (isPalindrome(str)) { System.out.println(""Yes""); } else { System.out.println(""No""); } } }",6.623031854629517,0.47643071632512707,0.3893956359793101,0.24297643767740174,0.9600000000000001,0.45808350637418127
7323,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256  NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { bool flag = true ; for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) { flag = false ; break ; } if ( flag ) cout << i << "" ▁ "" ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","public class Search { static final int D = 256; public static void main(String[] args) { String txt = "" GEEKS FOR GEEKS""; String pat = ""GEEK""; int q = 101; search(pat, txt, q); } public static void search(String pat, String txt, int q) { int M = strlen(pat); int N = strlen(txt); int i, j; int h = 1; for (i = 0; i < M - 1; i++) { h = (h * D) % q; } for (i = 0; i < M; i++) { int p = (D * p + pat.charAt(i)) % q; int t = (D * t + txt.charAt(i)) % q; } for (i = 0; i <= N - M; i++) { if (p == t) { boolean flag = true; for (j = 0; j < M; j++) { if (txt.charAt(i + j) != pat.charAt(j)) { flag = false; break; } } if (flag) { for (j = 0; j < M; j++) { System.out.print("" "" + pat.charAt(j)); } System.out.println(); for (j = 0; j < M; j++) { if (i + j == N - 1) { System.out.println(""Pattern found: ""); System.out.print(i + 1 + "" ▁"" + pat.charAt(j)); } else if (j == M - 1) { System.out.println(); } } } if (i < N - M) { int t = (D * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q; if (t < 0) { t = (t + q); } } } }",17.332072257995605,0.6976744186046512,0.6391267086837964,0.5372120124109715,0.8181818181818181,0.6215029541422254
1944,C++,Java,"#include <iostream> NEW_LINE using namespace std ; int count ( int n ) { int table [ n + 1 ] , i ; for ( int j = 0 ; j < n + 1 ; j ++ ) table [ j ] = 0 ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } int main ( void ) { int n = 20 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; n = 13 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; return 0 ; }","import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; n = 13 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; } }","import java.io.*; public class TranslatedCode { public static int count (int n) { int[] table = new int[n+1]; for (int i = 0; i < n + 1; i++) { table[i] = 0; } table[0] = 1; for (int i = 3; i <= n; i++){ table[i] += table[i-3]; } for (int i = 5; i <= n; i++){ table[i] += table[i-5]; } for (int i = 10; i <= n; i++){ table[i] += table[i-10]; } return table[n]; } public static void main(String[] args) { int n = 20; System.out.println(""Count ▁ for ▁ is ▁ "" + count(n)); n = 13; System.out.println(""Count ▁ for ▁ is ▁ "" + count(n)); } }",5.589294910430908,0.784949767603287,0.7038334282193517,0.5826878315242195,1.0,0.7078814820669537
13895,C++,Java,#include <iostream> NEW_LINE #include <cmath> NEW_LINE unsigned countBits ( unsigned int number ) { return ( int ) log2 ( number ) + 1 ; } int main ( ) { unsigned int num = 65 ; std :: cout << countBits ( num ) << ' ' ; return 0 ; },import java . io . * ; class GFG { static int countBits ( int number ) { return ( int ) ( Math . log ( number ) / Math . log ( 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int num = 65 ; System . out . println ( countBits ( num ) ) ; } },public class CountBits { public static int countBits(int number) { return (int) Math.log2(number) + 1; } public static void main(String[] args) { int num = 65; System.out.println(countBits(num)); } },1.9427120685577393,0.6093630187386956,0.5738881533042923,0.5089742891925804,1.0,0.6562820024348062
1010,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int S [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S , n ) ; return 0 ; }","import java . util . Arrays ; class GFG { static void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } static void printArray ( int arr [ ] ) { System . out . print ( Arrays . toString ( arr ) ) ; } public static void main ( String [ ] args ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = price . length ; int S [ ] = new int [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S ) ; } }","import java.util.*; class Span { static void calculateSpan(int[] price, int n, int[] s) { s[0] = 1; for (int i = 1; i < n; i++) { s[i] = 1; for (int j = i - 1; j >= 0 && price[i] >= price[j]; j--) { s[i]++; } } } static void printArray(int[] arr, int n) { for (int i = 0; i < n; i++) { System.out.print(arr[i] + "" ▁""); } } public static int main() { int[] price = { 10, 4, 5, 90, 120, 80 }; int n = price.length; int[] s = new int[n]; calculateSpan(price, n, s); printArray(s, n); return 0; }",7.695363998413086,0.7959183673469388,0.7027642214999339,0.5462494402633367,0.875,0.6448746081843357
12814,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } int main ( ) { int x = 2 ; int n = 5 ; cout << fixed << setprecision ( 2 ) << sum ( x , n ) ; return 0 ; }","class GFG { static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public class Main { public static double sum(int x, int n) { double i = 1.0, total = 1.0, multi = x; for (i = 2; i <= n; i++) { total += multi / i; multi *= x; } return total; } public static void main(String[] args) { int x = 2, n = 5; System.out.println(""Fixed precision: "" + Math.round(sum(x, n), 2)); } }",3.646691083908081,0.8431372549019608,0.7698704089099929,0.6509990107722579,1.0,0.7556993075405805
7012,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NUM_LINE  2 NEW_LINE #define NUM_STATION  4 NEW_LINE int min ( int a , int b ) { return a < b ? a : b ; } int carAssembly ( int a [ ] [ NUM_STATION ] , int t [ ] [ NUM_STATION ] , int * e , int * x ) { int T1 [ NUM_STATION ] , T2 [ NUM_STATION ] , i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } int main ( ) { int a [ ] [ NUM_STATION ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ NUM_STATION ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; cout << carAssembly ( a , t , e , x ) ; return 0 ; }","import java . io . * ; class GFG { static int NUM_LINE = 2 ; static int NUM_STATION = 4 ; static int min ( int a , int b ) { return a < b ? a : b ; } static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) { int T1 [ ] = new int [ NUM_STATION ] ; int T2 [ ] = new int [ NUM_STATION ] ; int i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; System . out . println ( carAssembly ( a , t , e , x ) ) ; } }","public class CarAssembly { public static int min(int a, int b) { return a < b ? a : b ; } public static int carAssembly(int[] arr1, int[][] arr2, int[] e, int[] x) { int t1 = new int[arr1.length]; for (int i = 1; i < arr1.length; ++i) { t1[i] = Math.min(t1[i - 1] + arr1[0][i], Math.min(t2[i - 1] + arr2[1][i], t1[i - 1] + arr2[0][i])); } int t2 = new int[arr1.length]; for (int i = 1; i < arr2.length; ++i) { t2[i] = Math.min(t2[i - 1] + arr2[0][i], Math.min(t1[i - 1] + arr2[1][i], t2[i - 1] + arr2[0][i])); } return Math.min(t1[arr1.length - 1] + x[0], t2[arr1.length - 1] + x[1]); } }",8.372359275817871,0.47607531312447066,0.408340645592289,0.29993607495355856,0.8750000000000001,0.472455252467491
2066,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define INT_SIZE  32 NEW_LINE int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } int main ( ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","class GFG { static final int INT_SIZE = 32 ; static int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & x ) == 0 ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","public class Main { public static int getSingleOccurrence(int[] arr, int n) { int result = 0; int x = 1, sum = 0; for (int i = 0; i < 32; i++) { sum = 0; x <<= 1; for (int j = 0; j < n; j++) { if ((arr[j] & x) != 0) { sum++; } } if ((sum % 3 != 0) && (result == 0)) { result |= x; } } return result; } public static void main(String[] args) { int arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7}; int n = arr.length / sizeof(arr[0]); System.out.println(""The element with a single occurrence is: "" + getSingleOccurrence(arr, n)); } }",8.35273790359497,0.8383838383838383,0.75516305545359,0.6255104031063528,0.9473684210526316,0.7220678084902363
1584,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int minJumps ( int arr [ ] , int n ) { if ( n == 1 ) return 0 ; int res = INT_MAX ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( i + arr [ i ] >= n - 1 ) { int sub_res = minJumps ( arr , i + 1 ) ; if ( sub_res != INT_MAX ) res = min ( res , sub_res + 1 ) ; } } return res ; } int main ( ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Minimum ▁ number ▁ of ▁ jumps ▁ to "" ; cout << "" ▁ reach ▁ the ▁ end ▁ is ▁ "" << minJumps ( arr , n ) ; return 0 ; }","import java . util . * ; import java . io . * ; class GFG { static int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ; int min = Integer . MAX_VALUE ; for ( int i = l + 1 ; i <= h && i <= l + arr [ l ] ; i ++ ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) min = jumps + 1 ; } return min ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = arr . length ; System . out . print ( "" Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ▁ end ▁ is ▁ "" + minJumps ( arr , 0 , n - 1 ) ) ; } }","public class MinJump { static int minJumps(int[] arr, int n) { if (n == 1) { return 0; } else { int res = Integer.MAX_VALUE; for (int i = n - 2; i >= 0; i--) { if (i + arr[i] >= n - 1) { int sub_res = minJumps(arr, i + 1); if (sub_res != Integer.MAX_VALUE) { res = Math.min(res, sub_res + 1); } } } return res; } } public static void main(String[] args) { int arr[] = {1, 3, 6, 3, 2, 3, 6, 8, 9, 5}; int n = arr.length; System.out.println(""Minimum number of jumps to reach the end of the array is "" + minJumps(arr, n)); } }",8.12900710105896,0.6290243486387882,0.5122463929312994,0.3660251633547356,0.9473684210526316,0.5404281406641044
1531,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { cout << "" ▁ Invalid ▁ Input ▁ "" ; return ; } first = second = INT_MIN ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) { second = arr [ i ] ; } } if ( second == INT_MIN ) cout << "" There ▁ is ▁ no ▁ second ▁ largest "" "" element STRNEWLINE "" ; else cout << "" The ▁ second ▁ largest ▁ element ▁ is ▁ "" << second ; } int main ( ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; print2largest ( arr , n ) ; return 0 ; }","class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( "" ▁ Invalid ▁ Input ▁ "" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( "" There ▁ is ▁ no ▁ second ▁ largest "" + "" elementNEW_LINE""); else System . out . print ( "" The ▁ second ▁ largest ▁ element "" + "" ▁ is ▁ "" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }","import java.util.*; public class PrintLargestTwo { public static void main(String[] args) { int[] arr = new int[] { 12, 35, 1, 10, 34, 1 }; int n = arr.length; print2largest(arr, n); } public static void print2largest(int arr[], int arr_size) { if (arr_size < 2) { System.out.println(""Invalid input""); return; } int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE; for (int i = 0; i < arr_size; i++) { if (arr[i] > first) { second = first; first = arr[i]; } else if (arr[i] > second && arr[i] != first) { second = arr[i]; } } if (second == Integer.MIN_VALUE) { System.out.println(""There is no second largest element""); } else { System.out.println(""The second largest element is "" + second); } } }",7.165038108825684,0.7671861777603411,0.6918790740740072,0.5919654400027404,0.9523809523809523,0.700090093716204
1015,C++,Java,"#include <iostream> NEW_LINE using namespace std ; void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNGE ( arr , n ) ; return 0 ; }","class Main { static void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNGE ( arr , n ) ; } }","public class Main { public static void printNGE(int[] arr, int n) { int next = -1; for (int i = 0; i < n; i++) { next = -1; for (int j = i + 1; j < n; j++) { if (arr[i] < arr[j]) { next = arr[j]; break; } } if (next != -1) { System.out.print(arr[i] + "" ▁"") for (int k = i; k < n-1; k++) { System.out.print("" ▁ - - ""); } System.out.println(next + "" ▁""); } } } public static void main(String[] args) { int arr[] = { 11, 13, 21, 3 }; int n = arr.length; printNGE(arr, n); } }",9.114298343658447,0.7386363636363636,0.6751623181459077,0.575704531345361,1.0,0.7029931719417527
2174,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void nextGreatest ( int arr [ ] , int size ) { int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = -1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; nextGreatest ( arr , size ) ; cout << "" The ▁ modified ▁ array ▁ is : ▁ STRNEWLINE "" ; printArray ( arr , size ) ; return ( 0 ) ; }","import java . io . * ; class NextGreatest { static void nextGreatest ( int arr [ ] ) { int size = arr . length ; int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = - 1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } static void printArray ( int arr [ ] ) { for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; nextGreatest ( arr ) ; System . out . println ( "" The ▁ modified ▁ array : "" ) ; printArray ( arr ) ; } }","public class NextGreatest { static int[] nextGreatest(int[] arr, int size) { int maxFromRight = arr[size - 1]; for (int i = size - 2; i >= 0; i--) { int temp = arr[i]; arr[i] = maxFromRight; if (maxFromRight < temp) maxFromRight = temp; } return arr; } static void printArray(int[] arr, int size) { for (int i = 0; i < size; i++) { cout << arr[i] << "" ▁""; } cout << endl; } public static int main(String[] args) { int arr[] = { 16, 17, 4, 3, 5, 2 }; int size = sizeof(arr) / sizeof(arr[0]); arr = nextGreatest(arr, size); printArray(arr, size); return 0; } }",9.630367994308472,0.7823408252897388,0.702166472268319,0.5563378618106585,0.9411764705882353,0.6717894444439315
11738,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } int main ( ) { int n = 5 ; cout << "" Sum ▁ is ▁ "" << sum ( n ) ; return 0 ; }","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","public class Program { static double sum(int n) { double i = 1, s = 0.0; for (; i <= n; i++) { s = s + 1 / i; } return s; } public static void main(String[] args) { int n = 5; System.out.println(""Sum is "" + sum(n)); } }",2.8561151027679443,0.7551511417611766,0.6786828066836541,0.555997353938915,1.0,0.6891981477572404
1981,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = -1 , m2 = -1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } int main ( ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = sizeof ( ar1 ) / sizeof ( ar1 [ 0 ] ) ; int n2 = sizeof ( ar2 ) / sizeof ( ar2 [ 0 ] ) ; if ( n1 == n2 ) cout << "" Median ▁ is ▁ "" << getMedian ( ar1 , ar2 , n1 ) ; else cout << "" Doesn ' t ▁ work ▁ for ▁ arrays "" << "" ▁ of ▁ unequal ▁ size "" ; getchar ( ) ; return 0 ; }","class Main { static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = - 1 , m2 = - 1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = ar1 . length ; int n2 = ar2 . length ; if ( n1 == n2 ) System . out . println ( "" Median ▁ is ▁ "" + getMedian ( ar1 , ar2 , n1 ) ) ; else System . out . println ( "" arrays ▁ are ▁ of ▁ unequal ▁ size "" ) ; } }","import java.io.*; import java.util.Scanner; public class Chat { public static int getMedian(int[] a, int[] b, int n) throws Exception{ int i = 0, j = 0, count = 0, m1 = -1, m2 = -1; for (count = 0; count < n; count++) { if (i == n) { m1 = m2; m2 = a[0]; break; } else if (j == n) { m1 = m2; m2 = b[0]; break; } else if (a[i] <= b[j]) { m1 = m2; m2 = a[i]; i++; } else { m1 = m2; m2 = b[j]; j++; } } return (m1 + m2) / 2; } public static void main(String[] args) throws Exception { int ar1[] = { 1, 12, 15, 26, 38 }; int ar2[] = { 2, 13, 17, 30, 45 }; int n1 = ar1.length; int n2 = ar2.length; if (n1 == n2) { System.out.println(""Median is "" + getMedian(ar1, ar2, n1)); } else { System.out.println(""Doesn't work for arrays of unequal size""); } } }",14.63811206817627,0.8295776512631544,0.7532805577551875,0.6370671279587744,1.0,0.745946989571142
13443,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } int main ( ) { int N = 5 ; cout << seriesSum ( 1 , 1 , N ) << endl ; return 0 ; }","class GFG { static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( seriesSum ( 1 , 1 , N ) ) ; } }","public class Solution { static int seriesSum(int calculated, int current, int n) { int i = calculated; int cur = 1; if (current == n + 1) return 0; for (; i < calculated + current; i++) { cur *= i; } return cur + seriesSum(i, current + 1, n); } public static void main(String[] args) { int N = 5; System.out.println(seriesSum(1, 1, N)); } }",3.9114840030670166,0.8748339781322931,0.8294435890717506,0.7334556959581714,1.0,0.81341898717072
2291,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMissingNo ( int a [ ] , int n ) { int total = ( n + 1 ) * ( n + 2 ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) total -= a [ i ] ; return total ; } int main ( ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int miss = getMissingNo ( arr , n ) ; cout << miss ; }","import java . util . * ; import java . util . Arrays ; class GFG { public static List < Integer > findDisappearedNumbers ( int [ ] nums ) { for ( int i = 0 ; i < nums . length ; i ++ ) { int index = Math . abs ( nums [ i ] ) ; if ( nums [ index - 1 ] > 0 ) { nums [ index - 1 ] *= - 1 ; } } List < Integer > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { res . add ( i + 1 ) ; } } return res ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 4 , 5 , 6 } ; System . out . println ( findDisappearedNumbers ( a ) ) ; } }","public class Main { public static int getMissingNumber (int[] array, int n) { int total = (n + 1) * (n + 2) / 2; for (int i = 0; i < n; i++) { total -= array[i]; } return total; } public static void main(String[] args) { int arr[] = { 1, 2, 4, 5, 6 }; int n = arr.length / (int)arr[0]; int missNumber = getMissingNumber(arr, n); System.out.println(missNumber); } }",4.085155010223389,0.41225144173302963,0.3319341204500839,0.23857579542419377,0.888888888888889,0.43366972346360233
4857,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } void pancakeSort ( int * arr , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; ++ i ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; pancakeSort ( arr , n ) ; cout << "" Sorted ▁ Array ▁ "" << endl ; printArray ( arr , n ) ; return 0 ; }","import java . io . * ; class PancakeSort { static void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } static int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } static int pancakeSort ( int arr [ ] , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } return 0 ; } static void printArray ( int arr [ ] , int arr_size ) { for ( int i = 0 ; i < arr_size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = arr . length ; pancakeSort ( arr , n ) ; System . out . println ( "" Sorted ▁ Array : ▁ "" ) ; printArray ( arr , n ) ; } }","#include <iostream> #include <bits/stdc++.h> void flip(int arr[], int i){ int temp = arr[0]; arr[0] = arr[i]; arr[i] = temp; } int findMax(int arr[], int n){ int mi = 0, i = 0; for(; i<n; i++){ if(arr[i]>arr[mi]){ mi=i; } } return mi; } void pancakeSort(int* arr, int n){ for(int curr_size = n; curr_size>1; curr_size--){ int mi=findMax(arr, curr_size); if(mi!=curr_size-1){ flip(arr, mi); flip(arr, curr_size-1); } } } void printArray(int arr[], int n){ for(int i=0; i<n; i++){ cout<<arr[i]<<"" ""; } } int main(){ int arr[] = {23, 10, 20, 11, 12, 6, 7}; int n=sizeof(arr)/sizeof(arr[0]); pancakeSort(arr,n); cout<<""Sorted Array ▁ ""; printArray(arr,n); return 0; }",9.833307981491089,0.7120072028531338,0.6435580302705142,0.5283676458272287,0.6666666666666666,0.5698573520790601
1844,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <limits.h> NEW_LINE #define R  3 NEW_LINE #define C  3 NEW_LINE using namespace std ; int min ( int x , int y , int z ) ; int minCost ( int cost [ R ] [ C ] , int m , int n ) { int i , j ; int tc [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << "" ▁ "" << minCost ( cost , 2 , 2 ) ; return 0 ; }","import java . util . * ; class MinimumCostPath { private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }","#include <stdio.h> #define R 3 #define C 3 int minCost(int cost[][C], int m, int n){ int i = 1, j; int tc[R][C] = { {cost[0][0], cost[0][1], cost[0][2]},{cost[1][0], cost[1][1], cost[1][2]},{cost[2][0], cost[2][1], cost[2][2]} }; for (; i <= m; i++) { tc[i][0] = tc[i - 1][0] + cost[i][0]; } for (j = 1; j <= n; j++){ tc[0][j] = tc[0][j-1] + cost[0][j]; } for (i=1; i<=m; i++){ for (j=1; j<=n; j++){ tc[i][j] = min(tc[i-1][j], tc[i][j-1]); if (cost[i][j] != 0) { tc[i][j] += cost[i][j]; } } } return tc[m-1][n-1]; } int main(void) { int cost[R][C] = {{1, 2, 3},{4, 8, 2},{1, 5, 3}}; printf(""%d\n"", minCost(cost, 2, 2)); return 0; }",10.594094038009644,0.7150837988826816,0.634515725647214,0.5055898141852373,0.5882352941176471,0.5303834581649602
2012,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } int main ( ) { cout << count ( 578 ) << "" ▁ "" ; return 0 ; }",import java . io . * ; class GFG { static int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } public static void main ( String [ ] args ) { int n = 578 ; System . out . println ( count ( n ) ) ; } },public class Main { public static int count(int n) { if (n < 3) return n; if (n >= 3 && n < 10) return n - 1; int po = 1; while (n / po > 9) po = po * 10; int msd = n / po; if (msd != 3) return count(msd) * count(po - 1) + count(msd) + count(n % po); else return count(msd * po - 1); } public static void main(String[] args) { System.out.println(count(578)); } },3.633089065551758,0.8702760218162456,0.8525879480869903,0.8327291408302622,1.0,0.8829103985811835
13911,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int isKthBitSet ( int x , int k ) { return ( x & ( 1 << ( k - 1 ) ) ) ? 1 : 0 ; } int leftmostSetBit ( int x ) { int count = 0 ; while ( x ) { count ++ ; x = x >> 1 ; } return count ; } int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } int main ( ) { int n = 9 ; cout << findNthPalindrome ( n ) ; }","import java . io . * ; class GFG { static int INT_MAX = 2147483647 ; static int isKthBitSet ( int x , int k ) { return ( ( x & ( 1 << ( k - 1 ) ) ) > 0 ) ? 1 : 0 ; } static int leftmostSetBit ( int x ) { int count = 0 ; while ( x > 0 ) { count ++ ; x = x >> 1 ; } return count ; } static int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } static int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) > 0 ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( findNthPalindrome ( n ) ) ; } }","import java.util.*; public class PalindromeFinder { static boolean isPalindrome(int x) { int length = (int)Math.log2(x); int firstHalf = Integer.parseInt(Integer.toBinaryString(x), 2); int secondHalf = Integer.parseInt(Integer.toBinaryString(x), 2); if (firstHalf == secondHalf) { return true; } else { return false; } } static int getLeftmostSetBit(int x) { int count = 0; while (x != 0) { count++; x >>= 1; } return count; } static int findNthPalindrome(int n) { int count = 0; int i = 1; while (count < n) { if (isPalindrome(i)) { count++; } i++; } return i - 1; } public static void main(String[] args) { int n = 9; System.out.println(findNthPalindrome(n)); } }",11.7363760471344,0.6072299242150756,0.5094862698258834,0.3698460921239956,0.7826086956521738,0.49367487318244907
9298,C++,Java,"#include <iostream> NEW_LINE using namespace std ; void CalPeri ( ) { int s = 5 , Perimeter ; Perimeter = 10 * s ; cout << "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" << Perimeter ; } int main ( ) { CalPeri ( ) ; return 0 ; }","import java . io . * ; class GFG { static void CalPeri ( ) { int S = 5 , Perimeter ; Perimeter = 10 * S ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" + Perimeter ) ; } public static void main ( String [ ] args ) { CalPeri ( ) ; } }","public class Main { public static void CalPeri( ) throws Exception { int s = 5, Perimeter; Perimeter = 10 * s; System.out.println("" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" + Perimeter); } public static int main( ) throws Exception { CalPeri(); return 0; } }",2.5288197994232178,0.7294596359831329,0.6527670338055751,0.5508307756185746,0.8333333333333334,0.6355815429330023
1704,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int fact ( int n ) ; void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; cout << "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" << x << "" ▁ & ▁ "" << y ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = ( int ) Math . sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; System . out . println ( "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ : "" ) ; System . out . print ( x + "" ▁ "" + y ) ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","#include <java.util.Scanner> public class Chat { static Scanner sc = new Scanner(System.in); int factorial (int n){ if(n==0){ return 1; }else{ return n*factorial(n-1); } } public static void printRepeatingElements(int arr[], int size){ int sum = 0, product = 1, x = 0, y = 0; for(int i=0;i<size;i++){ sum += arr[i]; product *= arr[i]; } sum -= (size-2)*((size-1)+1)/2; product /= factorial(size-2); double d = Math.sqrt(sum*sum - 4*product); x = (double) (d + sum) / 2; y = (double) (sum - d) / 2; System.out.println(""The two repeating elements are "" + x + "" and "" + y); } public static void main(String[] args){ int arr[] = {4,2,4,5,2,3,1}; int arr_size = sizeof(arr)/sizeof(arr[0]); printRepeatingElements(arr, arr_size); } }",7.928605079650879,0.6111720389002382,0.48483571339529885,0.3291178532712315,0.9,0.5003824972898621
13537,C++,Java,"#include <iostream> NEW_LINE using namespace std ; class gfg { public : double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } } ; int main ( ) { gfg g ; int n = 5 ; cout << "" Sum ▁ is ▁ "" << g . sum ( n ) ; return 0 ; }","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","public class GFG { public double sum(int n) { double i, s = 0.0; for (i = 1; i <= n; i++) { s += 1 / i; } return s; } public static void main(String[] args) { GFG g = new GFG(); int n = 5; System.out.println(""Sum is "" + g.sum(n)); } }",3.3059990406036377,0.7640886575787673,0.6673489774359305,0.5475349732949601,0.9411764705882353,0.6656274224829426
13913,C++,Java,"#include <iostream> NEW_LINE #include <bits/stdc++.h> NEW_LINE using namespace std ; int constructNthNumber ( int group_no , int aux_num , int op ) { int INT_SIZE = 32 ; int a [ INT_SIZE ] = { 0 } ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { op = 2 ; aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) op = 0 ; else op = 1 ; aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } int main ( ) { int n = 9 ; cout << getNthNumber ( n ) ; return 0 ; }","class GFG { static int INT_SIZE = 32 ; static int constructNthNumber ( int group_no , int aux_num , int op ) { int a [ ] = new int [ INT_SIZE ] ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num > 0 ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } static int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 == 1 ) else aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . printf ( "" % d "" , getNthNumber ( n ) ) ; } }","#include<iostream> #include <bits/stdc++.h> int constructNthNumber(int group_no, int aux_num, int op){ int INT_SIZE = 32; int a[INT_SIZE]{0}; int num=0, len_f = 2*group_no; int i=0; if (op == 2) { while (aux_num){ a[len_f-1]=a[0] = 1; aux_num &= 1; aux_num >>= 1; i++; } } else if (op == 0){ len_f = 2*group_no+1; a[len_f-1]=a[0] = 1; a[group_no]=0; while (aux_num){ a[group_no+1]+=(a[group_no-1]-i); a[group_no-1]&=1; aux_num &= 1; aux_num >>= 1; i++; } } else { len_f = 2*group_no+1; a[len_f-1]=a[0] = 1; a[group_no]=1; while (aux_num){ a[group_no+1]+=(a[group_no-1]-i); a[group_no-1]&=1; aux_num &= 1; aux_num >>= 1; i++; } } for (int i = 0; i < len_f; i++){ num += (1 << i) * a[i]; } return num; } int getNthNumber(int n){ int group_no = 0, group_offset; int count_upto_group = 0, count_temp = 1; while (count_temp < n) { group_no++; count_upto_group += 3 * (1 << (group_no - 1)); count_temp += 3 * (1 << (group_no - 1)); } group_offset = n - count_upto_group - 1; if (((group_offset + 1) <= ((1 << (group_no - 1))) { return constructNthNumber(group_no, group_offset, 2); } else { if(((group_offset + 1) % 2 == 0) { return constructNthNumber(group_no, group_offset, 0); } else { if(((group_offset + 1) / 2 == 1) { return constructNthNumber(group_no, group_offset - (1 << (group_no - 1)), 1); } else { return constructNthNumber(group_no, group_offset / 2, 0); } } } } int main(){ int n=9; cout<<getNthNumber(n)<<endl; return 0;}",26.765380859375,0.7751261995558881,0.6841990729984098,0.5324185297660963,0.6666666666666666,0.5726929708362674
11721,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void midptellipse ( int rx , int ry , int xc , int yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; while ( dx < dy ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } int main ( ) { midptellipse ( 10 , 15 , 50 , 50 ) ; return 0 ; }","import java . util . * ; import java . text . DecimalFormat ; class GFG { static void midptellipse ( float rx , float ry , float xc , float yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25f * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; DecimalFormat df = new DecimalFormat ( "" # , # # # , # #0.00000"" ) ; while ( dx < dy ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5f ) * ( x + 0.5f ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } public static void main ( String args [ ] ) { midptellipse ( 10 , 15 , 50 , 50 ) ; } }","#include <iostream> using namespace std; int rx = 10, ry = 15, xc = 50, yc = 50; float dx = 2 * ry * ry * x, dy = 2 * rx * rx * y, d1 = (ry * ry) - (rx * rx * ry + 0.25 * rx * rx), d2 = ((xc * ci + 0.5) * (xc * ci + 0.5)) + (((rx * rx) - 1) * ((yr * yr) - 1)), x = 0, y = ry; while (dx < dy) { cout << x + xc << "" ▁ , ▁ ,"" << y + yc << endl; cout << -x + xc << "" ▁ , ▁ ,"" << y + yc << endl; cout << x + xc << "" ▁ , ▁ ,"" << -y + yc << endl; cout << -x + xc << "" ▁ , ▁ ,"" << -y + yc << endl; if (d1 < 0) { x++; dx += 2 * ry * ry; d1 += dx + ry * ry; } else { x++; y--; dx += 2 * ry * ry; dy -= 2 * rx * rx; d1 += dx - dy + ry * ry; } } d2 = (rx * rx) * ((xc * ci + 0.5) * (xc * ci + 0.5)) + (((ry * yr) - 1) * ((yr * yr) - 1)); while (y >= 0) { cout << x + xc << "" ▁ ,"" << y + yc << endl; cout << -x + xc << "" ▁ ,"" << y + yc << endl; cout << x + xc << "" ▁ ,"" << -y + yc << endl; cout << -x + xc << "" ▁ ,"" << -y + yc << endl; if (d2 > 0) { y--; dy -= 2 * rx * rx; d2 += dx - dy + rx * rx; } else { y--; x++; dx += 2 * ry * ry; dy -= 2 * rx * rx; d2 += dx - dy + ry * ry; } }",16.21908402442932,0.4865205325599644,0.3914474137163653,0.2538441648353179,0.46153846153846156,0.316152453846261
2065,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } int main ( ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","public class Main { public static int getSingleElement(int[] array, int size) { int ones = 0; int twos = 0; int common_bit_mask = ~(ones & twos); ones |= common_bit_mask; twos |= common_bit_mask; return ones & common_bit_mask; } public static void main(String[] args) { int arr[] = { 3, 3, 2, 3 }; int n = arr.length; System.out.println(""The element with single occurrence is "" + (getSingleElement(arr, n))); } }",6.33617091178894,0.5752454677036634,0.4889946891688865,0.3700920063587925,0.9333333333333333,0.5390644044511548
13427,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) cout << "" Even "" << endl ; else cout << "" Odd "" << endl ; } int main ( ) { cout << "" The ▁ count ▁ of ▁ divisor : ▁ "" ; countDivisors ( 10 ) ; return 0 ; }","import java . io . * ; import java . math . * ; class GFG { static void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) System . out . println ( "" Even "" ) ; else System . out . println ( "" Odd "" ) ; } public static void main ( String args [ ] ) { System . out . print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) ; countDivisors ( 10 ) ; } }","public class Main { public static void countDivisors(int n) { int count = 0; for (int i = 1; i <= Math.sqrt(n) + 1; i++) { if (n % i == 0) { count += (n / i == i) ? 1 : 2; } } if (count % 2 == 0) { System.out.println("" Even ""); } else { System.out.println("" Odd ""); } } public static void main(String[] args) { System.out.println("" The ▁ count ▁ of ▁ divisor : ▁ ""); countDivisors(10); } }",5.528132915496826,0.748895339762963,0.7061044353170584,0.6318595118414441,1.0,0.7423016582890107
848,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int search ( int mat [ 4 ] [ 4 ] , int n , int x ) { if ( n == 0 ) return -1 ; int smallest = mat [ 0 ] [ 0 ] , largest = mat [ n - 1 ] [ n - 1 ] ; if ( x < smallest x > largest ) return -1 ; int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { cout << "" n ▁ Found ▁ at ▁ "" << i << "" , ▁ "" << j ; return 1 ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } cout << "" n ▁ Element ▁ not ▁ found "" ; return 0 ; } int main ( ) { int mat [ 4 ] [ 4 ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; return 0 ; }","class GFG { private static void search ( int [ ] [ ] mat , int n , int x ) { int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { System . out . print ( "" n ▁ Found ▁ at ▁ "" + i + "" ▁ "" + j ) ; return ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } System . out . print ( "" n ▁ Element ▁ not ▁ found "" ) ; return ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; } }",,5.589969158172607,0,0,0,0,0.0
13539,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; cout << f1 << "" ▁ "" ; for ( i = 1 ; i < n ; i ++ ) { cout << f2 << "" ▁ "" ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } int main ( ) { printFibonacciNumbers ( 7 ) ; return 0 ; }","class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; System . out . print ( f1 + "" ▁ "" ) ; for ( i = 1 ; i < n ; i ++ ) { System . out . print ( f2 + "" ▁ "" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }","public class Main { public static void printFibonacciNumbers(int n) { int f1 = 0, f2 = 1, i; if (n < 1) return; System.out.println(f1 + "" ▁""); for (i = 1; i < n; i++) { System.out.print(f2 + "" ▁""); int next = f1 + f2; f1 = f2; f2 = next; } } public static void main(String[] args) { printFibonacciNumbers(7); } }",4.359241008758545,0.8550576548302251,0.8203671121076527,0.766501270790337,1.0,0.8365508895532359
1954,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256 NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) break ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","public class Main { static int d = 256; static int M = str.length(); static int N = txt.length(); int i, j, p = 0, t = 0, h = 1; public static void search(char pat[], char txt[], int q) { for (i = 0; i < M - 1; i++) { h *= d; } for (i = 0; i < M; i++) { p = (d * p + pat[i]); t = (d * t + txt[i]); } for (i = 0; i <= N - M; i++) { if (p == t) { for (j = 0; j < M; j++) { if (txt[i + j] != pat[j]) break; } if (j == M) cout << ""Pattern ▁ found ▁ at ▁ index ▁ ""; for (j = 0; j < M; j++) { p = (d * (p - txt[i + j] * h)) % q; t = (d * (t - txt[i + j]) % q); } } if (i < N - M) { t = (d * (t - txt[i] * h)) % q; if (t < 0) t += q; } } }",8.895984888076782,0.7471103467939642,0.6625134624131865,0.5223951658809012,0.8750000000000001,0.6281766161166309
13546,C++,Java,"#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int a = 98 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","class Test { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public class Main { public static int gcd(int a, int b) { if (b == 0) { return a; } else { return gcd(b, a % b); } } public static void main(String[] args) { int a = 98; int b = 56; System.out.println("" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd(a, b)); } }",3.6347341537475586,0.8865979381443299,0.8541640474354276,0.7950733466507276,0.9411764705882353,0.8389042838319799
2096,C++,Java,"#include <iostream> NEW_LINE using namespace std ; #define bool  int NEW_LINE class GFG { public : bool isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } } ; int main ( ) { GFG g ; int test_no = 64 ; if ( g . isPowerOfFour ( test_no ) ) cout << test_no << "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ; else cout << test_no << "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ; getchar ( ) ; }","class GFG { static int isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } public static void main ( String [ ] args ) { int test_no = 64 ; if ( isPowerOfFour ( test_no ) == 1 ) System . out . println ( test_no + "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ) ; else System . out . println ( test_no + "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ) ; } }","import java.io.*; public class GFG { public boolean isPowerOfFour(int n) { if (n == 0) return false; while (n != 1) { if (n % 4 != 0) return false; n = n / 4; } return true; } public static void main(String[] args) throws IOException { GFG g = new GFG(); int testNo = 64; if (g.isPowerOfFour(testNo)) System.out.println(testNo + "" is a power of 4""); else System.out.println(testNo + "" is not a power of 4""); } }",4.061026096343994,0.7495924778735545,0.6389079456435357,0.5244969405190567,0.8333333333333333,0.6171478583633396
7050,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } int main ( ) { int arr [ ] = { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" "" subsequence ▁ is ▁ "" << maxSumIS ( arr , n ) << endl ; return 0 ; }","class GFG { static int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } public static void main ( String args [ ] ) { int arr [ ] = new int [ ] { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = arr . length ; System . out . println ( "" Sum ▁ of ▁ maximum ▁ sum ▁ "" + "" increasing ▁ subsequence ▁ is ▁ "" + maxSumIS ( arr , n ) ) ; } }","public class Main { static int maxSumIS(int[] arr, int n) { int i = 0, j = 0, max = 0; int msis[n]; for (i = 0; i < n; i++) { msis[i] = arr[i]; } for (i = 1; i < n; i++) { for (j = 0; j < i; j++) { if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) { msi[i] = msis[j] + arr[i]; } } for (i = 0; i < n; i++) { if (max < msi[i]) max = msi[i]; } return max; } public static void main(String[] args) { int arr[] = {1, 101, 2, 3, 100, 4, 5}; int n = arr.length; System.out.println(""Sum of the maximum sum increasing subsequence is "" + maxSumIS(arr, n)); } }",7.0273590087890625,0.8401169215363506,0.7678593005775982,0.6666823021016005,0.9473684210526316,0.7508881377869098
8947,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } int main ( ) { int A = 2 , B = 5 , C = 13 ; cout << "" Power ▁ is ▁ "" << exponentMod ( A , B , C ) ; return 0 ; }","import java . io . * ; class GFG { static int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } public static void main ( String args [ ] ) { int A = 2 , B = 5 , C = 13 ; System . out . println ( "" Power ▁ is ▁ "" + exponentMod ( A , B , C ) ) ; } }","import java.util.*; class Main { public static int exponentMod(int a, int b, int c) { if (a == 0) { return 0; } else if (b == 0) { return 1; } long y = exponentMod(a, b / 2, c); y = (y * y) % c; if (b % 2 == 0) { return y; } else { int aModC = a % c; long result = aModC * exponentMod(a, b - 1, c); result %= c; return (int) ((y + c) % c); } } public static void main(String[] args) { int a = 2, b = 5, c = 13; System.out.println(""Power ▁ is "" + exponentMod(a, b, c)); } }",6.994912147521973,0.7572254335260116,0.6259553794921837,0.38617256444936354,1.0,0.5703207951145545
9368,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 1st ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 2nd ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 3rd ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 4th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 5th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 6th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 7th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 8th ▁ octant STRNEWLINE "" ; } int main ( ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = -4 , y = 2 , z = -8 ; octant ( x , y , z ) ; x = -6 , y = -2 , z = 8 ; octant ( x , y , z ) ; return 0 ; }","import java . util . * ; class solution { static void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" ) ; else if ( x < 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" ) ; else if ( x >= 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" ) ; else if ( x < 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" ) ; } public static void main ( String args [ ] ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = - 4 ; y = 2 ; z = - 8 ; octant ( x , y , z ) ; x = - 6 ; y = - 2 ; z = 8 ; octant ( x , y , z ) ; } }","#include <iostream> #include <math.h> using namespace std; void octant(float x, float y, float z){ if (x >= 0 && y >= 0 && z >= 0) cout << ""Point lies in the first octant"" << endl; else if (x < 0 && y >= 0 && z >= 0) cout << ""Point lies in the second octant"" << endl; else if (x < 0 && y < 0 && z >= 0) cout << ""Point lies in the third octant"" << endl; else if (x >= 0 && y < 0 && z >= 0) cout << ""Point lies in the fourth octant"" << endl; else if (x >= 0 && y > 0 && z >= 0) cout << ""Point lies in the fifth octant"" << endl; else if (x >= 0 && y > 0 && z < 0) cout << ""Point lies in the sixth octant"" << endl; else if (x < 0 && y > 0 && z < 0) cout << ""Point lies in the seventh octant"" << endl; else if (x < 0 && y < 0 && z < 0) cout << ""Point lies in the eighth octant"" << endl; } int main(){ float x = 2, y = 3, z = 4; octant(x,y,z); x = -4, y = 2, z = -8; octant(x,y,z); x = -6, y = -2, z = 8; octant(x,y,z); return 0; }",8.684592008590698,0.6657871450800223,0.5952098712862457,0.5116736547811969,0.5,0.5081715583468378
2090,C++,Java,#include <bits/stdc++.h> NEW_LINE using namespace std ; int addOne ( int x ) { int m = 1 ; while ( x & m ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } int main ( ) { cout << addOne ( 13 ) ; return 0 ; },class GFG { static int addOne ( int x ) { int m = 1 ; while ( ( int ) ( x & m ) >= 1 ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } public static void main ( String [ ] args ) { System . out . println ( addOne ( 13 ) ) ; } },public class Main { public static int addOne(int x) { int m = 1; while (x & m) { x ^= m; m <<= 1; } x ^= m; return x; } public static void main(String[] args) { System.out.println(addOne(13)); } },2.862511157989502,0.731809941586992,0.6989995970021357,0.6291521088228643,1.0,0.740406476176005
12740,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } int main ( ) { int n = 4 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; n = 5 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; return 0 ; }",import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } },"public class Main { int divisorSum(int n) { int sum = 0; for (int i = 1; i <= n; i++) { sum += (n / i) * i; } return sum; } public static void main(String[] args) { int n = 4; System.out.println("" ▁ "" + divisorSum(n)); n = 5; System.out.println("" ▁ "" + divisorSum(n)); } }",3.227376937866211,0.7841142466348658,0.7187819896796523,0.6369274196679526,1.0,0.7458491937675669
12813,C++,Java,"#include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <boost/format.hpp> NEW_LINE class gfg { public : double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( pow ( x , i ) / i ) ; return total ; } } ; int main ( ) { gfg g ; int x = 2 ; int n = 5 ; std :: cout << boost :: format ( "" % .2f "" ) % g . sum ( x , n ) ; return 0 ; }","import static java . lang . Math . pow ; class GFG { static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public class GFG { double sum(int x, int n) { double i = 1.0; double total = 1.0; for (i = 1; i <= n; i++) { total = total + (pow(x, i) / i); } return total; } public static void main(String[] args) { GFG g = new GFG(); int x = 2; int n = 5; System.out.println(g.sum(x, n)); } }",4.074138164520264,0.7563056437893487,0.7073333724611971,0.6276773887939272,0.9411764705882353,0.7217271133322196
12673,C++,Java,#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } int main ( ) { int n = 10 ; cout << AvgofSquareN ( n ) ; return 0 ; },import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },public class Main { private static float AvgofSquareN(int n) { return (float) ((n + 1) * (2 * n + 1) / 6); } public static void main(String[] args) { int n = 10; System.out.println(AvgofSquareN(n)); } },2.815049886703491,0.7961388313679854,0.7301739858455353,0.6459469259471822,0.9333333333333333,0.7321628481630275
7057,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Max { static int max(int a, int b) { return (a > b) ? a : b; } static int knapSack(int W, int[] wt, int[] val, int n) { if (n == 0 || W == 0) { return 0; } if (wt[n - 1] > W) { return knapSack(W, wt, val, n - 1); } int result = max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1)); return result; } public static void main(String[] args) { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val) / sizeof(val[0]); System.out.println(""The maximum value that can be obtained is: "" + knapSack(W, wt, val, n)); } }",8.413562774658203,0.8539823008849557,0.8056218397440367,0.7262084123799538,0.888888888888889,0.7750125553326344
2149,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void swap ( int * xp , int * yp ) { * xp = * xp ^ * yp ; * yp = * xp ^ * yp ; * xp = * xp ^ * yp ; } int main ( ) { int x = 10 ; swap ( & x , & x ) ; cout << "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" << x ; return 0 ; }","class GFG { static void swap ( int [ ] xp , int [ ] yp ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; } public static void main ( String [ ] args ) { int [ ] x = { 10 } ; swap ( x , x ) ; System . out . println ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" + x [ 0 ] ) ; } }","public class Swap { public static void main(String[] args) { int x = 10; swap(ref x, ref x); System.out.println(""After swapping, x is "" + x); } public static void swap(int* xp, int* yp) { *xp = (*xp ^ *yp) ^ *yp; *yp = (*xp ^ *yp) ^ *yp; *xp = (*xp ^ *yp) ^ *yp; } }",3.0775837898254395,0.5386777385076289,0.39103571038305573,0.23265444005539407,1.0,0.4628581080387758
8793,C++,Java,"#include <iostream> NEW_LINE #include <string.h> NEW_LINE using namespace std ; class gfg { public : void divideString ( char str [ ] , int n ) { int str_size = strlen ( str ) ; int i ; int part_size ; if ( str_size % n != 0 ) { cout << "" Invalid ▁ Input : ▁ String ▁ size "" ; cout << "" ▁ is ▁ not ▁ divisible ▁ by ▁ n "" ; return ; } part_size = str_size / n ; for ( i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) cout << endl ; cout << str [ i ] ; } } } ; int main ( ) { gfg g ; char str [ ] = "" a _ simple _ divide _ string _ quest "" ; g . divideString ( str , 4 ) ; return 0 ; }","class GFG { static void divideString ( String str , int n ) { int str_size = str . length ( ) ; int part_size ; if ( str_size % n != 0 ) { System . out . println ( "" Invalid ▁ Input : ▁ String ▁ size "" + "" is ▁ not ▁ divisible ▁ by ▁ n "" ) ; return ; } part_size = str_size / n ; for ( int i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) System . out . println ( ) ; System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = "" a _ simple _ divide _ string _ quest "" ; divideString ( str , 4 ) ; } }","public class GFG { void divideString(char str[], int n) { int str_size = strlen(str); int i, part_size; if (str_size % n != 0) { System.out.println(""Invalid input: String size is not divisible by n""); return; } else { part_size = str_size / n; for (i = 0; i < str_size; i++) { if (i % part_size == 0) { System.out.println(); System.out.print(str[i]); } } } } public static void main(String[] args) { GFG gf = new GFG(); char str[]; } }",7.191982269287109,0.6562152571323485,0.5641230660359398,0.427966590283539,0.9,0.5695766131984773
2142,C++,Java,#include <bits/stdc++.h> NEW_LINE using namespace std ; unsigned int swapBits ( unsigned int x ) { unsigned int even_bits = x & 0xAAAAAAAA ; unsigned int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } int main ( ) { unsigned int x = 23 ; cout << swapBits ( x ) ; return 0 ; },class GFG { static int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA ; int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } public static void main ( String [ ] args ) { int x = 23 ; System . out . println ( swapBits ( x ) ) ; } },public class SwapBits { public static void main(String[] args) { long x = 23L; long even_bits = x & 0xAAAAAAAALL; long odd_bits = x & 0x55555555LL; even_bits >>= 1; odd_bits <<= 1; System.out.println(even_bits | odd_bits); } },2.378462076187134,0.5791896885906739,0.5080874735702037,0.4086312258325626,0.8333333333333333,0.5360418580827938
1683,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" First ▁ equilibrium ▁ index ▁ is ▁ "" << equilibrium ( arr , arr_size ) ; return 0 ; }","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( "" First ▁ equilibrium ▁ index ▁ is ▁ "" + equi . equilibrium ( arr , arr_size ) ) ; } }","import java.util.*; public class Equilibrium { public static int equilibrium(int[] arr, int n) { int sum = 0; int leftsum = 0; for (int i = 0; i < n; i++) { sum += arr[i]; } for (int i = 0; i < n; i++) { sum -= arr[i]; if (leftsum == sum) return i; leftsum += arr[i]; } return -1; } public static void main(String[] args) { int[] arr = {-7, 1, 5, 2, -4, 3, 0}; int arr_size = arr.length; System.out.println(""First equilibrium index is: "" + equilibrium(arr, arr_size)); } }",6.819000720977783,0.8123038839653893,0.7368547755936378,0.6387308695697955,0.9473684210526316,0.7313221350146464
1862,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","import java.util.*; public class KnapSack { public static int max(int a, int b) { return (a > b) ? a : b; } public static int knapSack(int W, ArrayList<Integer> wt, ArrayList<Integer> val, int n) { int i = 0; int w = 0; int K[][] = new int[n + 1][W + 1]; for (i = 0; i <= n; i++) { for (w = 0; w <= W; w++) { if (i == 0 && w == 0) { K[i][w] = 0; } else if (wt.get(i - 1) <= w) { K[i][w] = max(val.get(i - 1) + K[i - 1][w - wt.get(i - 1)], K[i - 1][w]); } else { K[i][w] = K[i - 1][w]; } } } return K[n][W]; } public static void main(String[] args) { int val = [60, 100, 120] int wt = [10, 20, 30] int W = 50; int n = val.length; ArrayList<Integer> wt_array = new ArrayList(wt); ArrayList<Integer> val_array = new ArrayList(val); System.out.println(""The maximum value that can be obtained is: "" + knapSack(W, wt_array, val_array, n)); } }",16.026384115219116,0.7839506172839507,0.7088074355818752,0.5986564353140685,1.0,0.7190595047198479
2143,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned i = 1 , pos = 1 ; while ( ! ( i & n ) ) { i = i << 1 ; ++ pos ; } return pos ; } int main ( void ) { int n = 16 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","public class Main { static int isPowerOfTwo(int n) { return n && (!((n & (n - 1)) == 0)); } static int findPosition(int n) { if (!isPowerOfTwo(n)) { return -1; } int i = 1, pos = 1; while (!(i & n) && ++pos < Math.pow(2, 31)) { i <<= 1; } return pos; } public static void main(String[] args) { int n = 16; int pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(n + "" = 2^"" + pos); } n = 12; pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(n + "" = 2^"" + pos); } n = 128; pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(n + "" = 2^"" + pos); } return 0; } }",12.002162218093872,0.6785291819523658,0.5882872920489989,0.47307892453113715,0.8695652173913044,0.5920248123891874
1703,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int * count = new int [ sizeof ( int ) * ( size - 2 ) ] ; int i ; cout << "" ▁ Repeating ▁ elements ▁ are ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << "" ▁ "" ; else count [ arr [ i ] ] ++ ; } } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int count [ ] = new int [ size ] ; int i ; System . out . println ( "" Repeated ▁ elements ▁ are ▁ : ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) System . out . print ( arr [ i ] + "" ▁ "" ) ; else count [ arr [ i ] ] ++ ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","public class Main { public static void printRepeatingElements(int[] arr, int size){ int* count = new int[size - 2]; for(int i=0;i<size;i++){ if(count[arr[i]]==1){ System.out.println(arr[i]); count[arr[i]]++; } else { count[arr[i]]++; } } } public static void main(String[] args) { int arr[] = {4, 2, 4, 5, 2, 3, 1}; int arr_size = sizeof(arr)/sizeof(arr[0]); printRepeatingElements(arr, arr_size); } }",4.806133031845093,0.724730674673034,0.6298568995503779,0.5134353680606841,1.0,0.6594047576424789
7056,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int eggDrop ( int n , int k ) { int eggFloor [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = INT_MAX ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } int main ( ) { int n = 2 , k = 36 ; cout << "" Minimum number of trials "" STRNEWLINE TABSYMBOL TABSYMBOL "" in worst case with "" << n << "" ▁ eggs ▁ and ▁ "" << k << "" ▁ floors ▁ is ▁ "" << eggDrop ( n , k ) ; return 0 ; }","class EggDrop { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int eggDrop ( int n , int k ) { int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = Integer . MAX_VALUE ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } public static void main ( String args [ ] ) { int n = 2 , k = 10 ; System . out . println ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst "" + "" ▁ case ▁ with ▁ "" + n + "" ▁ eggs ▁ and ▁ "" + k + "" ▁ floors ▁ is ▁ "" + eggDrop ( n , k ) ) ; } }",,7.810779094696045,0,0,0,0,0.0
13544,C++,Java,"#include <iostream> NEW_LINE using namespace std ; long long gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } long long lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } int main ( ) { int a = 15 , b = 20 ; cout << "" LCM ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << lcm ( a , b ) ; return 0 ; }","class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "" LCM ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + lcm ( a , b ) ) ; } }","public class GcdAndLcm { private static int gcd(int a, int b) { if (b == 0) { return a; } else { return gcd(b, a % b); } } private static int lcm(int a, int b) { return (a / gcd(a, b)) * b; } public static void main(String[] args) { int a = 15, b = 20; System.out.println(""LCM of "" + a + "" and "" + b + "" is "" + lcm(a, b)); } }",4.2717649936676025,0.8906276342459065,0.8056685213807202,0.7025669321374893,0.888888888888889,0.7584635191629092
1610,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NA  -1 NEW_LINE void moveToEnd ( int mPlusN [ ] , int size ) { int j = size - 1 ; for ( int i = size - 1 ; i >= 0 ; i -- ) if ( mPlusN [ i ] != NA ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } int merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( j == n ) || ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int mPlusN [ ] = { 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = sizeof ( N ) / sizeof ( N [ 0 ] ) ; int m = sizeof ( mPlusN ) / sizeof ( mPlusN [ 0 ] ) - n ; moveToEnd ( mPlusN , m + n ) ; merge ( mPlusN , N , m , n ) ; printArray ( mPlusN , m + n ) ; return 0 ; }","class MergeArrays { void moveToEnd ( int mPlusN [ ] , int size ) { int i , j = size - 1 ; for ( i = size - 1 ; i >= 0 ; i -- ) { if ( mPlusN [ i ] != - 1 ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } } void merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) || ( j == n ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { MergeArrays mergearray = new MergeArrays ( ) ; int mPlusN [ ] = { 2 , 8 , - 1 , - 1 , - 1 , 13 , - 1 , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = N . length ; int m = mPlusN . length - n ; mergearray . moveToEnd ( mPlusN , m + n ) ; mergearray . merge ( mPlusN , N , m , n ) ; mergearray . printArray ( mPlusN , m + n ) ; } }","public class Main { static int[] mPlusN = { 2, 8, -1, -1, -1, 13, -1, 15, 20 }; static int N[] = { 5, 7, 9, 25 }; static int n = N.length; static int m = (mPlusN.length - n) + 1; public static void moveToEnd(int[] arr, int size) { int j = size - 1; for (int i = size - 1; i >= 0; i--) { if (arr[i] != -1) { arr[j] = arr[i]; j--; } } } public static int[] merge(int[] mPlusN, int[] N, int m, int n) { int i = n; int j = 0; int k = 0; while (k < (m + n)) { if (j == n || i < (m + n) && mPlusN[i] <= N[j]) { mPlusN[k++] = mPlusN[i++]; } else { mPlusN[k++] = N[j++]; } } } public static void printArray(int[] arr, int size) { for (int i = 0; i < size; i++) { System.out.print(arr[i] + "" ▁ ""); } System.out.println(); } public static void main(String[] args) { moveToEnd(mPlusN, m + n); merge(mPlusN, N, m, n); printArray(mPlusN, m + n); } }",13.847242832183838,0.7958171042377945,0.7235016981237011,0.5951549354985227,0.9523809523809523,0.7023227405632515
11743,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int nthTermOfTheSeries ( int n ) { int nthTerm ; if ( n % 2 == 0 ) nthTerm = pow ( n - 1 , 2 ) + n ; else nthTerm = pow ( n + 1 , 2 ) + n ; return nthTerm ; } int main ( ) { int n ; n = 8 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 12 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 102 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 999 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 9999 ; cout << nthTermOfTheSeries ( n ) << endl ; return 0 ; }","import java . lang . Math ; class GFG { static long nthTermOfTheSeries ( int n ) { long nthTerm ; if ( n % 2 == 0 ) nthTerm = ( long ) Math . pow ( n - 1 , 2 ) + n ; else nthTerm = ( long ) Math . pow ( n + 1 , 2 ) + n ; return nthTerm ; } public static void main ( String [ ] args ) { int n ; n = 8 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 12 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 102 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 9999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; } }","class Main { static int nthTermOfTheSeries(int n) { int nthTerm = 0; if (n % 2 == 0) { nthTerm = pow(n - 1, 2) + n; } else { nthTerm = pow(n + 1, 2) + n; } return nthTerm; } public static void main(String[] args) { int n = 8; System.out.println(nthTermOfTheSeries(n)); n = 12; System.out.println(nthTermOfTheSeries(n)); n = 102; System.out.println(nthTermOfTheSeries(n)); n = 999; System.out.println(nthTermOfTheSeries(n)); n = 9999; System.out.println(nthTermOfTheSeries(n)); } }",5.593994140625,0.6981328004012444,0.6519616189134495,0.5699015870106118,1.0,0.6989311109074282
13474,C++,Java,"#include <iostream> NEW_LINE using namespace std ; int countSquares ( int m , int n ) { if ( n < m ) swap ( m , n ) ; return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } int main ( ) { int m = 4 , n = 3 ; cout << "" Count ▁ of ▁ squares ▁ is ▁ "" << countSquares ( m , n ) ; }","class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } public static void main ( String [ ] args ) { int m = 4 , n = 3 ; System . out . println ( "" Count ▁ of ▁ squares ▁ is ▁ "" + countSquares ( m , n ) ) ; } }","public class Translator { public static void main(String[] args) { int m = 4; int n = 3; System.out.println(""Count of squares is "" + countSquares(m, n)); } public static int countSquares(int m, int n) { if (n < m) { int temp = m; m = n; n = temp; } return (m * (m + 1) * (2 * m + 1)) / 6 + (n - m) * m * ((m + 1) / 2); } }",3.4154610633850098,0.906746728394112,0.8625686331859291,0.7891646792289009,1.0,0.8524152754602305
13562,C++,Java,"#include <iostream> NEW_LINE using namespace std ; void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << "" ▁ "" << arr [ i ] ; cout << "" STRNEWLINE "" ; return ; } void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } void printSequences ( int n , int k ) { int * arr = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } int main ( ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; return 0 ; }","class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }","public class Main { static void printArray(int arr[], int size) { for (int i = 0; i < size; i++) { System.out.print(""▁ "" + arr[i]); } System.out.println(); } static void printSequencesRecur(int arr[], int n, int k, int index) { for (int i = 1; i <= n; i++) { arr[index] = i; if (k == 0) { printArray(arr, index); } else { printSequencesRecur(arr, n, k - 1, index + 1); } } } static void printSequences(int n, int k) { int *arr = new int[k]; printSequencesRecur(arr, n, k, 0); } public static void main(String[] args) { int n = 3; int k = 2; printSequences(n, k); } }",7.957178831100464,0.8557968615084403,0.8236462655940151,0.7625202889536435,0.9,0.8037642022675504
1955,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","- pat: a string that represents the pattern to search for. - txt: a string that represents the text to search in. The function has three main parts: 1. It calculates the length of the pattern and the text, using size_t, which is an unsigned integer type. 2. It loops through the text, starting from the first character. If the current characters match at any position, it increments the loop variable i by the length of the pattern, and checks if the pattern ends at that position. If yes, it prints a message indicating that the pattern was found and its index in the text, and resets i to start searching again from the next position. If no, it moves on to the next character in the text, unless it reaches the end of the text, in which case it stops the loop. 3. It handles two special cases: if j is zero at any point in the loop, it means that the pattern starts at the current position, so i is incremented by one. Otherwise, i and j are both incremented together, to skip over the mismatched characters and continue searching from the next position. The main function declares two string variables txt and pat, which store the text and the pattern respectively, and calls the search function with them as arguments. It also prints a message indicating that it is done. Finally, it returns zero, which means that the program has no errors.",8.05290412902832,0.10992907801418442,0.019778945455319403,0.002660179900545708,0.33333333333333337,0.101862125930382
2018,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <string.h> NEW_LINE using namespace std ; int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } int findSmallerInRight ( char * str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str [ i ] < str [ low ] ) ++ countRight ; return countRight ; } int findRank ( char * str ) { int len = strlen ( str ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; int i ; for ( i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } int main ( ) { char str [ ] = "" string "" ; cout << findRank ( str ) ; return 0 ; }","import java . io . * ; import java . util . * ; class GFG { static int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } static int findSmallerInRight ( String str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str . charAt ( i ) < str . charAt ( low ) ) ++ countRight ; return countRight ; } static int findRank ( String str ) { int len = str . length ( ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; for ( int i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } public static void main ( String [ ] args ) { String str = "" string "" ; System . out . println ( findRank ( str ) ) ; } }","import java.io.*; public class Main { public static int fact(int n) { if (n <= 1) { return 1; } else { return n * fact(n - 1); } } public static int findSmallerInRight(char[] str, int low, int high) { int countRight = 0; for (int i = low + 1; i <= high; i++) { if (str[i] < str[low]) { countRight++; } } return countRight; } public static int findRank(char[] str) { int len = str.length; int mul = fact(len); int rank = 1; int countRight; for (int i = 0; i < len; i++) { mul /= len - i; countRight = findSmallerInRight(str, i, len - 1); rank += countRight * mul; } return rank; } public static void main(String[] args) { char str[]; try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) { str = br.readLine().toCharArray(); System.out.println(findRank(str)); } catch (Exception e) { e.printStackTrace(); } } }",11.320241928100586,0.7325102880658436,0.6647764244112053,0.5715836995761592,0.8181818181818181,0.6455631351578568
1656,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findElement ( int arr [ ] , int n , int key ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return -1 ; } int main ( ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) cout << "" Element ▁ not ▁ found "" ; else cout << "" Element ▁ Found ▁ at ▁ Position : ▁ "" << position + 1 ; return 0 ; }","class Main { static int findElement ( int arr [ ] , int n , int key ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = arr . length ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) System . out . println ( "" Element ▁ not ▁ found "" ) ; else System . out . println ( "" Element ▁ Found ▁ at ▁ Position : ▁ "" + ( position + 1 ) ) ; } }","public class Main { static int findElement(int[] arr, int n, int key) { for (int i = 0; i < n; i++) { if (arr[i] == key) return i; } return -1; } public static void main(String[] args) { int arr[] = { 12, 34, 10, 6, 40 }; int n = arr.length / sizeof(arr[0]); int key = 40; int position = findElement(arr, n, key); if (position == -1) { System.out.println(""Element not found""); } else { System.out.println(""Element found at position: "" + (position + 1)); } return 0; } }",4.378010034561157,0.8223504668695629,0.7525952112460873,0.6536026317824435,1.0,0.7575218422477104
12321,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <iomanip> NEW_LINE #include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { float d = sqrt ( pow ( x2 - x1 , 2 ) + pow ( y2 - y1 , 2 ) + pow ( z2 - z1 , 2 ) * 1.0 ) ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 2 ) ; cout << "" ▁ Distance ▁ is ▁ "" << d ; return ; } int main ( ) { float x1 = 2 ; float y1 = -5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; return 0 ; }","import java . io . * ; import java . lang . Math ; class GFG { static void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { double d = Math . pow ( ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) + Math . pow ( z2 - z1 , 2 ) * 1.0 ) , 0.5 ) ; System . out . println ( "" Distance ▁ is ▁ "" + d ) ; return ; } public static void main ( String [ ] args ) { float x1 = 2 ; float y1 = - 5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; } }","public class Distance { public static void main(String[] args) { float x1 = 2.0f; float y1 = -5.0f; float z1 = 7.0f; float x2 = 3.0f; float y2 = 4.0f; float z2 = 5.0f; distance(x1, y1, z1, x2, y2, z2); } public static void distance(float x1, float y1, float z1, float x2, float y2, float z2) { float d = Math.sqrt(Math.pow(x2 - x1, 2f) + Math.pow(y2 - y1, 2f) + Math.pow(z2 - z1, 2f)); System.out.printf(""▁ Distance ▁ is ▁ ̂%2.2f"" , d); } }",5.811098098754883,0.6713246954975662,0.6046675575740426,0.492135049129609,0.9090909090909091,0.6172218071179989
2133,C++,Java,#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; class gfg { public : unsigned int getFirstSetBitPos ( int n ) { return log2 ( n & - n ) + 1 ; } } ; int main ( ) { gfg g ; int n = 12 ; cout << g . getFirstSetBitPos ( n ) ; return 0 ; },class GFG { public static int getFirstSetBitPos ( int n ) { return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log10 ( 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( getFirstSetBitPos ( n ) ) ; } },class GFG { public: unsigned int getFirstSetBitPos(int n) { return (n & -n) + 1; } }; int main() { GFG g; int n = 12; cout << g.getFirstSetBitPos(n); return 0; },1.5775108337402344,0.4826304331456603,0.4299613631574683,0.29220479809716826,0.7272727272727273,0.4227251768498359
2190,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; for ( int i = 0 ; i < arr_size ; i ++ ) { for ( int j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } int main ( ) { int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Maximum ▁ difference ▁ is ▁ "" << maxDiff ( arr , n ) ; return 0 ; }","class MaximumDiffrence { int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int i , j ; for ( i = 0 ; i < arr_size ; i ++ ) { for ( j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } public static void main ( String [ ] args ) { MaximumDifference maxdif = new MaximumDifference ( ) ; int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; System . out . println ( "" Maximum ▁ difference ▁ is ▁ "" + maxdif . maxDiff ( arr , 5 ) ) ; } }","import java.util.*; public class MaxDifference { public static int maxDiff(int[] arr, int arr_size) { int max_diff = arr[1] - arr[0]; for (int i = 0; i < arr_size; i++) { for (int j = i + 1; j < arr_size; j++) { if (arr[j] - arr[i] > max_diff) { max_diff = arr[j] - arr[i]; } } } return max_diff; } public static void main(String[] args) { int[] arr = new int[]{1, 2, 90, 10, 110}; int n = arr.length / sizeof(arr[0]); System.out.println(""Maximum difference is: "" + maxDiff(arr, n)); } }",5.086642026901245,0.8353658536585366,0.7609984620777839,0.63381191113275,1.0,0.743668337792925
1715,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { cout << "" Triplet ▁ is ▁ "" << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] ; return true ; } } } } return false ; } int main ( ) { int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = sizeof ( A ) / sizeof ( A [ 0 ] ) ; find3Numbers ( A , arr_size , sum ) ; return 0 ; }","class FindTriplet { boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { System . out . print ( "" Triplet ▁ is ▁ "" + A [ i ] + "" , ▁ "" + A [ j ] + "" , ▁ "" + A [ k ] ) ; return true ; } } } } return false ; } public static void main ( String [ ] args ) { FindTriplet triplet = new FindTriplet ( ) ; int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = A . length ; triplet . find3Numbers ( A , arr_size , sum ) ; } }",#include <iostream> using namespace std; ,2.7571709156036377,4.963625413784813e-11,1.1772271319591808e-11,6.3697672775233535e-12,0,4.4588370942663475e-12
12963,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countDigit ( long long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } int main ( void ) { long long n = 345289467 ; cout << "" Number ▁ of ▁ digits ▁ : "" << countDigit ( n ) ; return 0 ; }","import java . util . * ; class GFG { static int countDigit ( long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "" Number ▁ of ▁ digits ▁ : ▁ "" + countDigit ( n ) ) ; } }","public class Main { int countDigits(long long n) { if (n / 10 == 0) { return 1; } return 1 + countDigits(n / 10); } public static void main(String[] args) { long long n = 345289467L; System.out.println(""Number of digits: "" + countDigits(n)); } }",2.717071771621704,0.7202905150082229,0.6335959924000256,0.5091107516219214,1.0,0.656377526135345
1788,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return -1 ; } int main ( void ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int result = binarySearch ( arr , 0 , n - 1 , x ) ; ( result == -1 ) ? cout << "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" : cout << "" Element ▁ is ▁ present ▁ at ▁ index ▁ "" << result ; return 0 ; }","class BinarySearch { int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , 0 , n - 1 , x ) ; if ( result == - 1 ) System . out . println ( "" Element ▁ not ▁ present "" ) ; else System . out . println ( "" Element ▁ found ▁ at ▁ index ▁ "" + result ) ; } }","public class BinarySearch { public static int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) { return mid; } if (arr[mid] > x) { return binarySearch(arr, l, mid - 1, x); } if (arr[mid] < x) { return binarySearch(arr, mid + 1, r, x); } return -1; } else { return -1; } } public static void main(String[] args) { int arr[] = {2, 3, 4, 10, 40}; int x = 10; int n = arr.length - 1; int result = binarySearch(arr, 0, n, x); if (result == -1) { System.out.println(""Element is not present in array""); } else { System.out.println(""Element is present at index "" + result); } return; } }",12.684561729431152,0.8271028037383178,0.7631951016588081,0.65986265763111,0.9473684210526316,0.7461143866575664
9263,C++,Java,#include <bits/stdc++.h> NEW_LINE #define PI  3.14159265 NEW_LINE using namespace std ; float area_circumscribed ( float c ) { return ( c * c * ( PI / 4 ) ) ; } int main ( ) { float c = 8 ; cout << area_circumscribed ( c ) ; return 0 ; },import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double c = 8.0 ; System . out . println ( area_cicumscribed ( c ) ) ; } },public class Main { public static double areaCircumscribed(double c){ return (c * c * (Math.PI/4)); } public static void main(String[] args) { double c = 8; System.out.println(areaCircumscribed(c)); } },1.6883220672607422,0.6061806862190549,0.5537670271124967,0.49005070338933143,1.0,0.643035492372532
12672,C++,Java,#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } int main ( ) { int n = 2 ; cout << AvgofSquareN ( n ) ; return 0 ; },import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },public class Main { public static float avgOfSquareN(int n) { float sum = 0f; for (int i = 1; i <= n; i++) { sum += (i * i); } return sum / n; } public static void main(String[] args) { int n = 2; System.out.println(avgOfSquareN(n)); } },2.83817195892334,0.7777894315823355,0.7004247133573444,0.5955692794337563,1.0,0.7168984956036293
2304,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printTwoElements ( int arr [ ] , int size ) { int i ; cout << "" ▁ The ▁ repeating ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) - 1 ] > 0 ) arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] ; else cout << abs ( arr [ i ] ) << "" STRNEWLINE "" ; } cout << "" and ▁ the ▁ missing ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) cout << ( i + 1 ) ; } } int main ( ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printTwoElements ( arr , n ) ; }","import java . io . * ; class GFG { static void printTwoElements ( int arr [ ] , int size ) { int i ; System . out . print ( "" The ▁ repeating ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { int abs_val = Math . abs ( arr [ i ] ) ; if ( arr [ abs_val - 1 ] > 0 ) arr [ abs_val - 1 ] = - arr [ abs_val - 1 ] ; else System . out . println ( abs_val ) ; } System . out . print ( "" And ▁ the ▁ missing ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) System . out . println ( i + 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = arr . length ; printTwoElements ( arr , n ) ; } }","public class Main { public static void printTwoElements(int[] arr, int size) { int i = 0; System.out.println(""▁ The ▁ repeating ▁ element ▁ is ▁ ""); for (; i < size; i++) { if (arr[Math.abs(arr[i]) - 1] > 0) arr[Math.abs(arr[i]) - 1] = -arr[Math.abs(arr[i]) - 1]; else System.out.println(Math.abs(arr[i]) + "" STRNEWLINE""); } System.out.println(""and ▁ the ▁ missing ▁ element ▁ is ▁ ""); for (; i < size; i++) { if (arr[i] > 0) System.out.println(i + 1); } } public static void main(String[] args) { int arr[] = {7, 3, 4, 5, 5, 6, 2}; int n = arr.length / (arr[0] != 0 ? 1 : 1); printTwoElements(arr, n); } }",6.653990030288696,0.7830188679245284,0.7182113863323184,0.604808667696152,1.0,0.7233660673873064
2148,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; return 0 ; }","import java . io . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( "" After ▁ swap : ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","public class Main { public static void main(String[] args) { int x = 10; int y = 5; x ^= y; y = x ^ y; x ^= y; System.out.println("" After swapping: "" + ""x = "" + x + "", y = "" + y); } }",1.9822969436645508,0.643171886116804,0.5679811964099695,0.450017638641071,1.0,0.6150123470487496
9291,C++,Java,"#include <iostream> NEW_LINE using namespace std ; float area ( float r ) { return ( 0.5 ) * ( 3.14 ) * ( r * r ) ; } float perimeter ( float r ) { return ( 3.14 ) * ( r ) ; } int main ( ) { int r = 10 ; cout << "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" << area ( r ) << endl ; cout << "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" << perimeter ( r ) << endl ; return 0 ; }","import java . io . * ; class GFG { static float area ( float r ) { return ( float ) ( ( 0.5 ) * ( 3.14 ) * ( r * r ) ) ; } static float perimeter ( float r ) { return ( float ) ( ( 3.14 ) * ( r ) ) ; } public static void main ( String [ ] args ) { float r = 10 ; System . out . println ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" + area ( r ) ) ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Semicircle : "" + + perimeter ( r ) ) ; } }","public class Main { public static void main(String[] args) { int r = 10; System.out.println(""The area of a semicircle with radius "" + r + "" is "" + (0.5 * 3.14 * r * r)); System.out.println(""The perimeter of a semicircle with radius "" + r + "" is "" + (3.14 * r)); } }",2.5289533138275146,0.3584522505875124,0.27339555099523477,0.18249891505327445,0.8333333333333334,0.3777492405372921
2076,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int swapBits ( unsigned int x , unsigned int p1 , unsigned int p2 , unsigned int n ) { unsigned int set1 = ( x >> p1 ) & ( ( 1U << n ) - 1 ) ; unsigned int set2 = ( x >> p2 ) & ( ( 1U << n ) - 1 ) ; unsigned int Xor = ( set1 ^ set2 ) ; Xor = ( Xor << p1 ) | ( Xor << p2 ) ; unsigned int result = x ^ Xor ; return result ; } int main ( ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; cout << "" Result ▁ = ▁ "" << res ; return 0 ; }","class GFG { static int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; int result = x ^ xor ; return result ; } public static void main ( String [ ] args ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; System . out . println ( "" Result ▁ = ▁ "" + res ) ; } }","import java.util.*; public class TranslateC++ToJava { public static int swapBits(int x, int p1, int p2, int n) { int set1 = (x >> p1) & ((1 << n) - 1); int set2 = (x >> p2) & ((1 << n) - 1); int Xor = (set1 ^ set2); Xor = (Xor << p1) | (Xor << p2); return x ^ Xor; } public static void main(String[] args) { int res = swapBits(28, 0, 3, 2); System.out.println(""Result ▁ = ▁""); System.out.printf(""%d\n"", res); } }",4.622989892959595,0.8571428571428571,0.810884854079383,0.7432380153879781,1.0,0.8202666107715846
12300,C++,Java,"#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int a = 0 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","class Test { static int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public class Main { public static int gcd(int a, int b) { if (a == 0 || b == 0) { return Math.abs(b); } if (a > b) { return gcd(a - b, b); } else { return gcd(a, b - a); } } public static void main(String[] args) { int a = 0; int b = 56; System.out.println(""GCD ▁ of ▁ and ▁ is ▁""); System.out.println(gcd(a, b)); } }",5.600790739059448,0.6700087876226561,0.6111809871443569,0.5100071469224746,0.9411764705882353,0.6393579440222028
2311,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) cout << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] << "" , ▁ "" << A [ l ] ; } } } } int main ( ) { int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int X = 91 ; findFourElements ( A , n , X ) ; return 0 ; }","class FindFourElements { void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) { if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) System . out . print ( A [ i ] + "" ▁ "" + A [ j ] + "" ▁ "" + A [ k ] + "" ▁ "" + A [ l ] ) ; } } } } } public static void main ( String [ ] args ) { FindFourElements findfour = new FindFourElements ( ) ; int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = A . length ; int X = 91 ; findfour . findFourElements ( A , n , X ) ; } }","public class FindFourElements { void findFourElements(int[] A, int n, int X) { List<List<Integer>> pairs = new ArrayList<>(); for (int i = 0; i < n - 3; i++) { for (int j = i + 1; j < n - 2; j++) { for (int k = j + 1; k < n - 1; k++) { for (int l = k + 1; l < n; l++) { if (A[i] + A[j] + A[k] + A[l] == X) { pairs.add(Arrays.asList(A[i], A[j], A[k], A[l])); } } } } } if (pairs.size() > 0) { for (List<Integer> pair : pairs) { System.out.println(pair); } } else { System.out.println(""No four elements found""); } } public static void main(String[] args) { int A[] = {10, 20, 30, 40, 1, 2}; int n = sizeof(A) / sizeof(A[0]); int X = 91; FindFourElements.findFourElements(A, n, X); } }",16.1094331741333,0.7099236641221374,0.6779987998176552,0.6083458704223987,0.9473684210526316,0.7100526356114686
836,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int Identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) cout << 1 << "" ▁ "" ; else cout << 0 << "" ▁ "" ; } cout << endl ; } return 0 ; } int main ( ) { int size = 5 ; Identity ( size ) ; return 0 ; }","class GFG { static int identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) System . out . print ( 1 + "" ▁ "" ) ; else System . out . print ( 0 + "" ▁ "" ) ; } System . out . println ( ) ; } return 0 ; } public static void main ( String args [ ] ) { int size = 5 ; identity ( size ) ; } }",public class Main { public static void main(String[] args) { int size = 5; int identity = 0; for (int row = 0; row < size; row++) { for (int col = 0; col < size; col++){ if (row == col) { identity += 1 << 3; } else { identity += 0 << 3; } } System.out.println(identity); identity = 0; } } },3.3862407207489014,0.5888991957779613,0.4782138106015045,0.31112680335108395,0.9473684210526316,0.5019992886615482
7322,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","public class Main { public static void main(String[] args) { String txt = ""ABCEABCDABCEABCD""; String pat = ""ABCD""; search(pat, txt); } public static void search(String pat, String txt) { int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { int j = 0; for (j = 0; j < M; j++) if (txt.charAt(i + j) != pat.charAt(j)) break; if (j == 0) { i = i + 1; } else { i = i + j; } } if (j == M) System.out.println(""Pattern found at index "" + i); } }",7.633267879486084,0.8191194157220487,0.7501585219038405,0.6404690880328009,1.0,0.7483283616229606
747,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printSorted ( int arr [ ] , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; cout << arr [ start ] << "" ▁ "" ; printSorted ( arr , start * 2 + 2 , end ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; int arr_size = sizeof ( arr ) / sizeof ( int ) ; printSorted ( arr , 0 , arr_size - 1 ) ; getchar ( ) ; return 0 ; }","class GFG { private static void printSorted ( int [ ] arr , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; System . out . print ( arr [ start ] + "" ▁ "" ) ; printSorted ( arr , start * 2 + 2 , end ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; printSorted ( arr , 0 , arr . length - 1 ) ; } }","public class PrintSorted { public static void main(String[] args) { int arr[] = { 4, 2, 5, 1, 3 }; int arr_size = sizeof(arr) / sizeof(int); printSorted(arr, 0, arr_size - 1); } public static void printSorted(int[] arr, int start, int end) { if (start > end) return; printSorted(arr, start * 2 + 1, end); System.out.println(arr[start]); printSorted(arr, start * 2 + 2, end); } }",3.9583699703216553,0.8559322033898306,0.8292599270765937,0.7879047258138807,0.9411764705882353,0.833886249246187
13565,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; # define MAX  11 NEW_LINE bool isMultipleof5 ( int n ) { char str [ MAX ] ; int len = strlen ( str ) ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } int main ( ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) cout << n << "" ▁ is ▁ multiple ▁ of ▁ 5"" << endl ; else cout << n << "" ▁ is ▁ not ▁ multiple ▁ of ▁ 5"" << endl ; return 0 ; }","class GFG { static int MAX = 11 ; static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . println ( n + "" ▁ is ▁ multiple ▁ "" + "" of ▁ 5"" ) ; else System . out . println ( n + "" ▁ is ▁ not ▁ a ▁ "" + "" multiple ▁ of ▁ 5"" ) ; } }","import java.io.*; import java.util.*; public class Main { public static int getMultipleOfFive(int n) { String str = Integer.toString(n); char[] arr = new char[str.length()]; for (int i = 0; i < str.length(); i++) { if (str.charAt(i) == '5') arr[str.length() - 1] = '\0'; } return Integer.parseInt(arr); } public static void main(String[] args) { int n = 19; if (getMultipleOfFive(n) == 5) System.out.println(n + "" is multiple of 5""); else System.out.println(n + "" is not a multiple of 5""); } }",5.380721807479858,0.6413793103448275,0.49494571860742065,0.3417734652030346,0.8333333333333333,0.48924142564212414
1701,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" << findPeak ( arr , n ) ; return 0 ; }","import java . util . * ; import java . lang . * ; import java . io . * ; class PeakElement { static int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } static int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = arr . length ; System . out . println ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" + findPeak ( arr , n ) ) ; } }","public class FindPeak { private int findPeakUtil(int[] arr, int low, int high, int n) { int mid = (low + high) / 2; if((mid == 0 || arr[mid-1] <= arr[mid]) && (mid == n-1 || arr[mid+1] <= arr[mid])) { return mid; } else if(mid > 0 && arr[mid-1] > arr[mid]) { return findPeakUtil(arr, low, (mid - 1), n); } else { return findPeakUtil(arr, (mid + 1), high, n); } } public int findPeak(int[] arr, int n) { return findPeakUtil(arr, 0, n - 1, n); } public static void main(String[] args) { int[] arr = {1, 3, 20, 4, 1, 0}; int n = arr.length; System.out.println(""Index of peak is "" + findPeak(arr, n)); } }",7.080417156219482,0.7740756626125673,0.7075648736861105,0.6162006146959116,0.9473684210526316,0.7155509566029276
2147,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x * y ; y = x / y ; x = x / y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; }","import java . io . * ; class GFG { public static void main ( String [ ] args ) { int x = 10 ; int y = 5 ; x = x * y ; y = x / y ; x = x / y ; System . out . println ( "" After ▁ swaping : "" + "" ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","public class Main { int x = 10, y = 5; x = x * y; y = x / y; x = x / y; System.out.println("" After Swapping ""); System.out.printf(""x = %d\n"", x); System.out.printf(""y = %d\n"", y); }",1.767416000366211,0.5429094209286331,0.42816353511468674,0.3436205279361322,0.6666666666666666,0.44053436955529246
3997,C++,Java,"#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNSE ( arr , n ) ; return 0 ; }","class Main { static void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNSE ( arr , n ) ; } }",,3.5741078853607178,0,0,0,0,0.0
2144,C++,Java,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned count = 0 ; while ( n ) { n = n >> 1 ; ++ count ; } return count ; } int main ( void ) { int n = 0 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","class GFG { static boolean isPowerOfTwo ( int n ) { return n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int count = 0 ; while ( n > 0 ) { n = n >> 1 ; ++ count ; } return count ; } public static void main ( String [ ] args ) { int n = 0 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","public class Main { public static int isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; } public static int findPosition(int n) { if (!isPowerOfTwo(n)) { return -1; } int count = 0; while (n > 0) { n >>= 1; ++count; } return count; } public static void main(String[] args) { int n = 0; int pos = findPosition(n); if (pos == -1) { System.out.println(""Invalid number""); } else { System.out.println(n + "" is a power of two, with position: "" + pos); } n = 12; pos = findPosition(n); if (pos == -1) { System.out.println(""Invalid number""); } else { System.out.println(n + "" is a power of two, with position: "" + pos); } n = 128; pos = findPosition(n); if (pos == -1) { System.out.println(""Invalid number""); } else { System.out.println(n + "" is a power of two, with position: "" + pos); } return 0; } }",11.847685098648071,0.6043849539451368,0.5282755694340467,0.44056605418965605,0.9523809523809523,0.594110523647045
9367,C++,Java,"#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <iomanip> NEW_LINE using namespace std ; void mirror_point ( float a , float b , float c , float d , float x1 , float y1 , float z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 1 ) ; cout << "" ▁ x3 ▁ = ▁ "" << x3 ; cout << "" ▁ y3 ▁ = ▁ "" << y3 ; cout << "" ▁ z3 ▁ = ▁ "" << z3 ; } int main ( ) { float a = 1 ; float b = -2 ; float c = 0 ; float d = 0 ; float x1 = -1 ; float y1 = 3 ; float z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; return 0 ; }","import java . io . * ; class GFG { static void mirror_point ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; System . out . print ( "" x3 ▁ = ▁ "" + x3 + "" ▁ "" ) ; System . out . print ( "" y3 ▁ = ▁ "" + y3 + "" ▁ "" ) ; System . out . print ( "" z3 ▁ = ▁ "" + z3 + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int a = 1 ; int b = - 2 ; int c = 0 ; int d = 0 ; int x1 = - 1 ; int y1 = 3 ; int z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; } }","import java.util.*; public class MirrorPoint { public static void main(String[] args) { float a = 1f; float b = -2f; float c = 0f; float d = 0f; float x1 = -1f; float y1 = 3f; float z1 = 4f; mirror_point(a, b, c, d, x1, y1, z1); } public static void mirror_point(float a, float b, float c, float d, float x1, float y1, float z1) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float.valueOf(a) * a + b * b + c * c ); float x2 = a * k + x1; float y2 = b * k + y1; float z2 = c * k + z1; float x3 = 2f * x2 - x1; float y3 = 2f * y2 - y1; float z3 = 2f * z2 - z1; System.out.println(String.format("" ▁ x3 ▁ = ▁ %.1f "", x3)); System.out.println(String.format("" ▁ y3 ▁ = ▁ %.1f "", y3)); System.out.println(String.format("" ▁ z3 ▁ = ▁ %.1f "", z3)); } }",7.039124011993408,0.7760720075254409,0.6791079593494617,0.543463217595708,0.9090909090909091,0.6531515250442683
