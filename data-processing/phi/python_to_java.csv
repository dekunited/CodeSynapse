example_id,start_language,target_language,source_code,reference_code,translated_code,inference_time,bleu_1,bleu_2,bleu_4,keyword_match,codebleu
2048,Python,Java,"def calcAngle ( h , m ) : NEW_LINE INDENT if ( h < 0 or m < 0 or h > 12 or m > 60 ) : NEW_LINE INDENT print ( ' Wrong ▁ input ' ) NEW_LINE DEDENT if ( h == 12 ) : NEW_LINE INDENT h = 0 NEW_LINE DEDENT if ( m == 60 ) : NEW_LINE INDENT m = 0 NEW_LINE h += 1 ; NEW_LINE if ( h > 12 ) : NEW_LINE INDENT h = h - 12 ; NEW_LINE DEDENT DEDENT hour_angle = 0.5 * ( h * 60 + m ) NEW_LINE minute_angle = 6 * m NEW_LINE angle = abs ( hour_angle - minute_angle ) NEW_LINE angle = min ( 360 - angle , angle ) NEW_LINE return angle NEW_LINE DEDENT h = 9 NEW_LINE m = 60 NEW_LINE print ( ' Angle ▁ ' , calcAngle ( h , m ) ) NEW_LINE","import java . io . * ; class GFG { static int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) System . out . println ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ; int minute_angle = ( int ) ( 6 * m ) ; int angle = Math . abs ( hour_angle - minute_angle ) ; angle = Math . min ( 360 - angle , angle ) ; return angle ; } public static void main ( String [ ] args ) { System . out . println ( calcAngle ( 9 , 60 ) + "" ▁ degree "" ) ; System . out . println ( calcAngle ( 3 , 30 ) + "" ▁ degree "" ) ; } }","public class CalcAngle { public static int calcAngle(int h, int m) { if (h < 0 || m < 0 || h > 12 || m > 60) { System.out.println(""Wrong input""); return -1; } if (h == 12) { h = 0; m = m + 1; } int hour_angle = 0.5 * (h * 60 + m); int minute_angle = 6 * m; double angle = Math.abs(hour_angle - minute_angle); if (angle > 180) { angle = Math.min(360 - angle, angle); } return (int) Math.min(angle, 360 - angle); } public static void main(String[] args) { int h = 9; int m = 60; System.out.println(""Angle: "" + calcAngle(h, m)); } }",6.71320104598999,0.684714133979969,0.5628011740583702,0.3870616543052145,1.0,0.5709431580136501
13186,Python,Java,"def moduloMultiplication ( a , b , mod ) : NEW_LINE INDENT a = a % mod ; NEW_LINE while ( b ) : NEW_LINE INDENT if ( b & 1 ) : NEW_LINE INDENT res = ( res + a ) % mod ; NEW_LINE DEDENT a = ( 2 * a ) % mod ; NEW_LINE DEDENT return res ; NEW_LINE DEDENT a = 10123465234878998 ; NEW_LINE b = 65746311545646431 ; NEW_LINE m = 10005412336548794 ; NEW_LINE print ( moduloMultiplication ( a , b , m ) ) ; NEW_LINE","class GFG { static long moduloMultiplication ( long a , long b , long mod ) { long res = 0 ; a %= mod ; while ( b > 0 ) { if ( ( b & 1 ) > 0 ) { res = ( res + a ) % mod ; } a = ( 2 * a ) % mod ; } return res ; } public static void main ( String [ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L ; System . out . print ( moduloMultiplication ( a , b , m ) ) ; } }","public class ModuloMultiplication { private int a = 10123465234878998; private int b = 6574631154566431; private int mod = 10005412336548794; public static void main(String[] args) { System.out.println(moduloMultiplication(a, b, mod)); } public static int moduloMultiplication(int a, int b, int mod) { int res = 0; while (b > 0) { if ((b & 1) == 1) { res = (res + a) % mod; } a = (2 * a) % mod; b >>= 1; } return res; }}",3.3791117668151855,0.7948717948717948,0.7024020930103013,0.5796589412601424,0.888888888888889,0.6724279255487663
2200,Python,Java,"def findMaximum ( arr , low , high ) : NEW_LINE INDENT if low == high : NEW_LINE INDENT return arr [ low ] NEW_LINE DEDENT if high == low + 1 and arr [ low ] >= arr [ high ] : NEW_LINE INDENT return arr [ low ] ; NEW_LINE DEDENT if high == low + 1 and arr [ low ] < arr [ high ] : NEW_LINE INDENT return arr [ high ] NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return findMaximum ( arr , low , mid - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findMaximum ( arr , mid + 1 , high ) NEW_LINE DEDENT DEDENT arr = [ 1 , 3 , 50 , 10 , 9 , 7 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ maximum ▁ element ▁ is ▁ % d "" % findMaximum ( arr , 0 , n - 1 ) ) NEW_LINE","class Main { static int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( "" The ▁ maximum ▁ element ▁ is ▁ "" + findMaximum ( arr , 0 , n - 1 ) ) ; } }","public static int findMaximum(int[] arr, int low, int high) { if (low == high) { return arr[low]; } else if (high == low + 1 && arr[low] >= arr[high]) { return arr[low]; } else if (high == low + 1 && arr[low] < arr[high]) { return findMaximum(arr, low, high - 1); } else if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) { return arr[mid]; } else if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1]) { return findMaximum(arr, low, mid - 1); } else { return findMaximum(arr, mid + 1, high); } }",3.6269328594207764,0.6700498989075351,0.6228751168074464,0.5422627837754448,0.8,0.6195839486428113
9260,Python,Java,PI = 3.14159265 NEW_LINE def length_rope ( r ) : NEW_LINE INDENT return ( ( 2 * PI * r ) + 6 * r ) NEW_LINE DEDENT r = 7 NEW_LINE print ( length_rope ( r ) ) NEW_LINE,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } },public class LengthRope { final static double PI = 3.14159265; public static int length_rope(int r) { return (2 * PI * r) + 6 * r; } public static void main(String[] args) { int r = 7; System.out.println(length_rope(r)); } },2.049570083618164,0.7353667078069156,0.6833164967416308,0.5873653281048854,0.8571428571428571,0.6682985868162769
13513,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def phi ( n ) : NEW_LINE INDENT result = 1 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if ( gcd ( i , n ) == 1 ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT for n in range ( 1 , 11 ) : NEW_LINE INDENT print ( "" phi ( "" , n , "" ) ▁ = ▁ "" , phi ( n ) , sep = "" "" ) NEW_LINE DEDENT","import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int phi ( int n ) { int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) System . out . println ( "" phi ( "" + n + "" ) ▁ = ▁ "" + phi ( n ) ) ; } }","public class Gcd { public static int gcd(int a, int b) { if (a == 0) { return b; } else { return gcd(b % a, a); } } public static int phi(int n) { int result = 1; for (int i = 2; i < n; i++) { if (gcd(i, n) == 1) { result++; } } return result; } public static void main(String[] args) { for (int n = 1; n <= 10; n++) { System.out.println(""phi( "" + n + "" ) ▁ = ▁ "" + phi(n)); } } }",2.9657750129699707,0.8520265494617213,0.8040979393368932,0.7318850785272815,0.9473684210526316,0.7965300812848864
2000,Python,Java,"def pow ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT answer = a NEW_LINE increment = a NEW_LINE for i in range ( 1 , b ) : NEW_LINE INDENT for j in range ( 1 , a ) : NEW_LINE INDENT answer += increment NEW_LINE DEDENT increment = answer NEW_LINE DEDENT return answer NEW_LINE DEDENT print ( pow ( 5 , 3 ) ) NEW_LINE","import java . io . * ; class GFG { static int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Power { public static int power (int a, int b){ if (b == 0){ return 1; } int answer = a; int increment = a; for(int i = 1; i < b; i++){ for (int j = 1; j < a; j++){ answer += increment; } increment = answer; } return answer; } public static void main(String[] args){ System.out.println(power(5,3)); }}",2.876209020614624,0.7650352471509492,0.7098280268044862,0.6127907078061143,1.0,0.72895349546428
1682,Python,Java,"def equilibrium ( arr ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT leftsum += arr [ j ] NEW_LINE DEDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT rightsum += arr [ j ] NEW_LINE DEDENT if leftsum == rightsum : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( equilibrium ( arr ) ) NEW_LINE","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( equi . equilibrium ( arr , arr_size ) ) ; } }",public int equilibrium(int[] arr){ int n = arr.length; int leftsum = 0; int rightsum = 0; for (int i = 0; i < n; i++){ leftsum += arr[i]; } for (int i = 1; i < n; i++) { rightsum += arr[i]; } if (leftsum == rightsum) { return i; } else { return -1; } },2.1674091815948486,0.35890192660152265,0.2874623264083997,0.1670459709291488,0.625,0.30443217965040414
13511,Python,Java,"def modInverse ( a , m ) : NEW_LINE INDENT m0 = m NEW_LINE y = 0 NEW_LINE x = 1 NEW_LINE if ( m == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT while ( a > 1 ) : NEW_LINE INDENT q = a // m NEW_LINE t = m NEW_LINE m = a % m NEW_LINE a = t NEW_LINE t = y NEW_LINE y = x - q * y NEW_LINE x = t NEW_LINE DEDENT if ( x < 0 ) : NEW_LINE INDENT x = x + m0 NEW_LINE DEDENT return x NEW_LINE DEDENT a = 3 NEW_LINE m = 11 NEW_LINE print ( "" Modular ▁ multiplicative ▁ inverse ▁ is "" , modInverse ( a , m ) ) NEW_LINE","class GFG { static int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( "" Modular ▁ multiplicative ▁ "" + "" inverse ▁ is ▁ "" + modInverse ( a , m ) ) ; } }","import java.util.*; public class ModInverse { public static int modInverse(int a, int m) { int y = 0; int x = 1; if (m == 1) { return 0; } else { while (a > 1) { int q = a / m; int t = m; m = a % m; a = t; t = y; y = x - q * y; x = t; } if (x < 0) { x += m; } return x; } } public static void main(String[] args) { int a = 3; int m = 11; System.out.println(""Modular ▁ multiplicative ▁ inverse ▁ is "" + modInverse(a, m)); } }",5.574967861175537,0.8866666666666667,0.8272484782353663,0.7214593027510274,0.9473684210526316,0.7892320382415087
1994,Python,Java,"def isLucky ( n ) : NEW_LINE INDENT next_position = n NEW_LINE if isLucky . counter > n : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % isLucky . counter == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT next_position = next_position - next_position / isLucky . counter NEW_LINE isLucky . counter = isLucky . counter + 1 NEW_LINE return isLucky ( next_position ) NEW_LINE DEDENT isLucky . counter = 2 NEW_LINE x = 5 NEW_LINE if isLucky ( x ) : NEW_LINE INDENT print x , "" is ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT else : NEW_LINE INDENT print x , "" is ▁ not ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT","import java . io . * ; class GFG { public static int counter = 2 ; static boolean isLucky ( int n ) { int next_position = n ; if ( counter > n ) return true ; if ( n % counter == 0 ) return false ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } public static void main ( String [ ] args ) { int x = 5 ; if ( isLucky ( x ) ) System . out . println ( x + "" ▁ is ▁ a ▁ lucky ▁ no . "" ) ; else System . out . println ( x + "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ) ; } }",public class Lucky { static boolean isLucky(int n) { int counter = 1; while (counter <= n) { next_position = n / isLucky(); if (next_position == 0) { return true; } else if (n % isLucky() == 0) { counter++; } } return false; } private int isLucky() { return isLucky(n / isLucky()); } },3.3723719120025635,0.3976746357136174,0.3024637165754464,0.15372644819059508,0.8333333333333334,0.35760851373341657
1824,Python,Java,"def printMaxActivities ( s , f ) : NEW_LINE INDENT n = len ( f ) NEW_LINE print "" The ▁ following ▁ activities ▁ are ▁ selected "" NEW_LINE i = 0 NEW_LINE print i , NEW_LINE for j in xrange ( n ) : NEW_LINE INDENT if s [ j ] >= f [ i ] : NEW_LINE INDENT print j , NEW_LINE i = j NEW_LINE DEDENT DEDENT DEDENT s = [ 1 , 3 , 0 , 5 , 8 , 5 ] NEW_LINE f = [ 2 , 4 , 6 , 7 , 9 , 9 ] NEW_LINE printMaxActivities ( s , f ) NEW_LINE","import java . util . * ; import java . lang . * ; import java . io . * ; class ActivitySelection { public static void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; System . out . print ( "" Following ▁ activities ▁ are ▁ selected ▁ : ▁ n "" ) ; i = 0 ; System . out . print ( i + "" ▁ "" ) ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { System . out . print ( j + "" ▁ "" ) ; i = j ; } } } public static void main ( String [ ] args ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = s . length ; printMaxActivities ( s , f , n ) ; } }","public class PrintMaxActivities { static void printMaxActivities(int[] s, int[] f) { for (int i = 0; i < s.length; i++) { if (s[i] >= f[0]) { System.out.println(i + 1); } else { s[0] = s[i]; } } for (int j : f) { System.out.print(j + "" ""); } System.out.println(); } static void main(String[] args) { int[] s = {1, 3, 0, 5, 8, 5}; int[] f = {2, 4, 6, 7, 9, 9}; printMaxActivities(s, f); } }",5.518247842788696,0.5950924693014885,0.5074486113355127,0.35935653639314064,0.9411764705882353,0.533902516651669
13031,Python,Java,"def check ( n ) : NEW_LINE INDENT return 1162261467 % n == 0 NEW_LINE DEDENT n = 9 NEW_LINE if ( check ( n ) ) : NEW_LINE INDENT print ( "" Yes "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" No "" ) NEW_LINE DEDENT","public class Power_3 { static boolean check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } public static void main ( String args [ ] ) { int n = 9 ; if ( check ( n ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","public static int check(int n) { if (n == 0) { return 116226146; } else { return 9; } } public static void main(String[] args) { if (check(n)) { System.out.println(""Yes""); } else { System.out.println(""No""); } }",1.56302809715271,0.6675804602020468,0.5467218050035803,0.3607025185154484,0.8421052631578948,0.5051233419081822
2001,Python,Java,"def multiply ( x , y ) : NEW_LINE INDENT if ( y ) : NEW_LINE INDENT return ( x + multiply ( x , y - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT def pow ( a , b ) : NEW_LINE INDENT if ( b ) : NEW_LINE INDENT return multiply ( a , pow ( a , b - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT DEDENT print ( pow ( 5 , 3 ) ) ; NEW_LINE","import java . io . * ; class GFG { static int multiply ( int x , int y ) { if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } static int pow ( int a , int b ) { if ( b > 0 ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Program { public static int multiply(int x, int y){ if (y == 0) { return 0; } else { return x + multiply(x, y-1); } } public static int pow(int a, int b){ if (b == 0) { return 1; } else { return multiply(a, pow(a, b-1)); } } public static void main(String[] args) { System.out.println(pow(5, 3)); } }",2.851165294647217,0.7896424047777186,0.7168001174057955,0.6017227422509872,1.0,0.721205919575691
1705,Python,Java,"def printRepeating ( arr , size ) : NEW_LINE INDENT xor = arr [ 0 ] NEW_LINE n = size - 2 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT xor ^= arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT xor ^= i NEW_LINE DEDENT set_bit_no = xor & ~ ( xor - 1 ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( arr [ i ] & set_bit_no ) : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i & set_bit_no ) : NEW_LINE INDENT x = x ^ i NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ i NEW_LINE DEDENT DEDENT print ( "" The ▁ two ▁ repeating "" , "" elements ▁ are "" , y , x ) NEW_LINE DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) xor ^= i ; set_bit_no = ( xor & ~ ( xor - 1 ) ) ; for ( i = 0 ; i < size ; i ++ ) { int a = arr [ i ] & set_bit_no ; if ( a != 0 ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { int a = i & set_bit_no ; if ( a != 0 ) x = x ^ i ; else y = y ^ i ; } System . out . println ( "" The ▁ two ▁ reppeated ▁ elements ▁ are ▁ : "" ) ; System . out . println ( x + "" ▁ "" + y ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","public class PrintRepeating { public static void printRepeating(int[] arr, int size) { int xor = arr[0]; for (int i = 1; i < size - 2; i++) { xor ^= arr[i + 1]; } int n = size - 2; for (int i = 1; i < n + 1; i++) { xor ^= i; } int set_bit_no = xor & ~(xor - 1); for (int i = 0; i < size; i++) { if (arr[i] & set_bit_no) { xor ^= arr[i]; } else { int y = i; } } System.out.print(""The ▁ two ▁ repeating elements are ""); print(y, xor); } private static void print(int y, int x) { System.out.print("" "", y); for (int i = 0; i < 32; i++) { System.out.printf(""%x"", (x >> i) & 1); } System.out.println(); } public static void main(String[] args) { int arr[] = { 4, 2, 4, 5, 2, 3, 1 }; int arr_size = arr.length; printRepeating(arr, arr_size); } }",7.856655120849609,0.7153269828899795,0.608982921865927,0.45313484884080185,0.9,0.5871943941885613
6659,Python,Java,"def printknapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for w in range ( W + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT res = K [ n ] [ W ] NEW_LINE print ( res ) NEW_LINE w = W NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if res <= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if res == K [ i - 1 ] [ w ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT print ( wt [ i - 1 ] ) NEW_LINE res = res - val [ i - 1 ] NEW_LINE w = w - wt [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE printknapSack ( W , wt , val , n ) NEW_LINE","class GFG { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { System . out . print ( wt [ i - 1 ] + "" ▁ "" ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } public static void main ( String arg [ ] ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; printknapSack ( W , wt , val , n ) ; } }","public class PrintKnapSack { static int maxValue(int W, int wt[], int val[], int n) { if (W == 0 || n == 0) return 0; if (wt[n-1] > W) return maxValue(W, wt, val, n-1); return Math.max(val[n-1] + maxValue(W-wt[n-1], wt, val, n-1), maxValue(W, wt, val, n-1)); }",4.853652000427246,0.04498259811305315,0.032787750030336,0.02189483715076635,0.7058823529411764,0.22709109188788937
2095,Python,Java,"def fun ( n ) : NEW_LINE INDENT return n & ( n - 1 ) NEW_LINE DEDENT n = 7 NEW_LINE print ( "" The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit "" , fun ( n ) ) NEW_LINE","class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String arg [ ] ) { int n = 7 ; System . out . print ( "" The ▁ number ▁ after ▁ unsetting ▁ "" + "" the ▁ rightmost ▁ set ▁ bit ▁ "" + fun ( n ) ) ; } }","public class Fun { public static int fun(int n) { return n & (n - 1); } public static void main(String[] args) { System.out.println(""The number after unsetting the rightmost set bit is: "" + fun(7)); } }",1.087198257446289,0.6625031166255522,0.5511702859584157,0.44498205016571063,1.0,0.6114874351159973
1861,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public static int knapSack(int W, int[] wt, int[] val, int n) { if (n == 0 || W == 0) return 0; if (wt[n - 1] > W) return knapSack(W, wt, val, n - 1); else { return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1)); } }",2.335541009902954,0.392445031116239,0.3829533658453973,0.3531949957314803,0.7499999999999999,0.4722364970120361
1843,Python,Java,"R = 3 NEW_LINE C = 3 NEW_LINE import sys NEW_LINE def min ( x , y , z ) : NEW_LINE INDENT if ( x < y ) : NEW_LINE INDENT return x if ( x < z ) else z NEW_LINE DEDENT else : NEW_LINE INDENT return y if ( y < z ) else z NEW_LINE DEDENT DEDENT def minCost ( cost , m , n ) : NEW_LINE INDENT if ( n < 0 or m < 0 ) : NEW_LINE INDENT return sys . maxsize NEW_LINE DEDENT elif ( m == 0 and n == 0 ) : NEW_LINE INDENT return cost [ m ] [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) NEW_LINE DEDENT DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","public class GFG { static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . print ( minCost ( cost , 2 , 2 ) ) ; } }","public class MinCost { int M = 3; int N = 3; double[][] cost = new double[M+1][N+1]; public static void main(String[] args) { System.out.println(minCost(cost, 2, 2)); } private static double minCost(double[][] cost, int m, int n) { if (n < 0 || m < 0) { return Double.MAX_VALUE; } else if (m == 0 && n == 0) { return cost[m][n]; } else { return cost[m][n] + Math.min(minCost(cost, m-1, n-1), ",6.1109607219696045,0.45664284024493296,0.38598147937235033,0.2935382381080323,0.9,0.47547676667562266
1867,Python,Java,"def max ( x , y ) : NEW_LINE INDENT if ( x > y ) : NEW_LINE INDENT return x NEW_LINE DEDENT return y NEW_LINE DEDENT def lps ( seq , i , j ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] and i + 1 == j ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] ) : NEW_LINE INDENT return lps ( seq , i + 1 , j - 1 ) + 2 NEW_LINE DEDENT return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT seq = "" GEEKSFORGEEKS "" NEW_LINE n = len ( seq ) NEW_LINE print ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is "" , lps ( seq , 0 , n - 1 ) ) NEW_LINE DEDENT","class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int lps ( char seq [ ] , int i , int j ) { if ( i == j ) { return 1 ; } if ( seq [ i ] == seq [ j ] && i + 1 == j ) { return 2 ; } if ( seq [ i ] == seq [ j ] ) { return lps ( seq , i + 1 , j - 1 ) + 2 ; } return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { String seq = "" GEEKSFORGEEKS "" ; int n = seq . length ( ) ; System . out . printf ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d "" , lps ( seq . toCharArray ( ) , 0 , n - 1 ) ) ; } }","public class Max { public static int max(int x, int y) { if (x > y) { return x; } else { return y; } } public static int lps(String seq, int i, int j) { if (i == j) { return 1; } else if (seq.charAt(i) == seq.charAt(j) && i + 1 == j) { return 2; } else { int lps1 = 0; int lps2 = 0; if (seq.charAt(i) == seq.charAt(j)) { lps1 = 2 + lps2; } else { lps1 = Math.max(lps1, lps2); if (seq.charAt(i + 1) == seq.charAt(j)) { lps1++; } else { lps2 = Math.max(lps1, 2); } } return lps1; } } public static void main(String[] args) { String seq = ""GeeksforGeeks""; int n = seq.length(); System.out.println(""The length of the longest palindromic substring is: "" + lps(seq, 0, n - 1)); } }",10.740901231765747,0.6543778801843319,0.5476524400424829,0.4169416800144097,0.9411764705882353,0.5742121171865573
1949,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE for i in range ( N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE while ( j < M ) : NEW_LINE INDENT if ( txt [ i + j ] != pat [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if ( j == M ) : NEW_LINE INDENT print ( "" Pattern ▁ found ▁ at ▁ index ▁ "" , i ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT txt = "" AABAACAADAABAAABAA "" NEW_LINE pat = "" AABA "" NEW_LINE search ( pat , txt ) NEW_LINE DEDENT","public class NaiveSearch { public static void search ( String txt , String pat ) { int M = pat . length ( ) ; int N = txt . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } } public static void main ( String [ ] args ) { String txt = "" AABAACAADAABAAABAA "" ; String pat = "" AABA "" ; search ( txt , pat ) ; } }","public class Search { static void search(String pat, String txt) { int M = pat.length(); int N = txt.length(); for (int i = 0; i < N - M + 1; i++) { int j = 0; while (j < M) { if (txt.charAt(i + j) != pat.charAt(j)) { break; } j++; } if (j == M) { System.out.println("" Pattern found at index "" + i); } } } public static void main(String[] args) { String txt = ""AABAACAADAABAAABAA""; String pat = ""AABA""; search(pat, txt); } }",8.085540056228638,0.777644280488655,0.6778378427009315,0.5086839544443629,0.9411764705882353,0.6384317092875246
13418,Python,Java,"import math NEW_LINE def findRoots ( a , b , c ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT print ( "" Invalid "" ) NEW_LINE return - 1 NEW_LINE DEDENT d = b * b - 4 * a * c NEW_LINE sqrt_val = math . sqrt ( abs ( d ) ) NEW_LINE if d > 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ different ▁ "" ) NEW_LINE print ( ( - b + sqrt_val ) / ( 2 * a ) ) NEW_LINE print ( ( - b - sqrt_val ) / ( 2 * a ) ) NEW_LINE DEDENT elif d == 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ same "" ) NEW_LINE print ( - b / ( 2 * a ) ) NEW_LINE print ( "" Roots ▁ are ▁ complex "" ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ + ▁ i "" , sqrt_val ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ - ▁ i "" , sqrt_val ) NEW_LINE DEDENT DEDENT a = 1 NEW_LINE b = - 7 NEW_LINE c = 12 NEW_LINE findRoots ( a , b , c ) NEW_LINE","import java . io . * ; import static java . lang . Math . * ; class Quadratic { static void findRoots ( int a , int b , int c ) { if ( a == 0 ) { System . out . println ( "" Invalid "" ) ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { System . out . println ( ""Roots are real and different NEW_LINE""); System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + ""NEW_LINE"" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ; } else if ( d == 0 ) { System . out . println ( ""Roots are real and same NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) ) ; } { System . out . println ( ""Roots are complex NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + "" ▁ + ▁ i "" + sqrt_val + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) + "" ▁ - ▁ i "" + sqrt_val ) ; } } public static void main ( String args [ ] ) { int a = 1 , b = - 7 , c = 12 ; findRoots ( a , b , c ) ; } }","import java.lang.*; public class FindRoots { public static void main (String[] args) { double a = 1; double b = -7; double c = 12; double discriminant = (b*b) - (4*a*c); if(discriminant == 0) { System.out.println(""Invalid: a = 0""); return; } else if (discriminant > 0) { double sqrt_val = Math.sqrt(Math.abs(discriminant)); if (a == 0) { System.out.println(""Roots are real and same""); } else if (discriminant > 0) { System.out.println(""Roots are real and different""); System.out.println((-b + sqrt_val) / (2 * a)); System.out.println((-b - sqrt_val) / (2 * a)); } else if (discriminant == 0) { System.out.println(""Roots are real and same""); double root = -b / (2*a); System.out.println(root); } else { double sqrt_val = Math.sqrt(Math.abs(discriminant)); if (a == 0) { System.out.println(""Roots are complex""); System.out.println((-b + sqrt_val) / (2 * a)); } else if (discriminant > 0) { System.out.println(""Roots are complex""); System.out.println((-b - sqrt_val) / (2 * a), "" + "" + sqrt_val); } else { System.out.println(""Roots are complex""); double root1 = -b / (2*a), root2 = -(b/2) + Math.sqrt(discriminant)/(2*a); System.out.println(root1, "" + "" + sqrt_val, root2); } } else { System.out.println(""Invalid: a = 0""); } } }",11.417248964309692,0.6079545454545454,0.4817640574976584,0.32610657917326824,0.9411764705882353,0.5106275465977583
1687,Python,Java,"def ceilSearch ( arr , low , high , x ) : NEW_LINE INDENT if x <= arr [ low ] : NEW_LINE INDENT return low NEW_LINE DEDENT i = low NEW_LINE for i in range ( high ) : NEW_LINE INDENT if arr [ i ] == x : NEW_LINE INDENT return i NEW_LINE DEDENT if arr [ i ] < x and arr [ i + 1 ] >= x : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 1 , 2 , 8 , 10 , 10 , 12 , 19 ] NEW_LINE n = len ( arr ) NEW_LINE x = 3 NEW_LINE index = ceilSearch ( arr , 0 , n - 1 , x ) ; NEW_LINE if index == - 1 : NEW_LINE INDENT print ( "" Ceiling ▁ of ▁ % d ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" % x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" ceiling ▁ of ▁ % d ▁ is ▁ % d "" % ( x , arr [ index ] ) ) NEW_LINE DEDENT","class Main { static int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = arr . length ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) System . out . println ( "" Ceiling ▁ of ▁ "" + x + "" ▁ doesn ' t ▁ exist ▁ in ▁ array "" ) ; else System . out . println ( "" ceiling ▁ of ▁ "" + x + "" ▁ is ▁ "" + arr [ index ] ) ; } }","public static int ceilSearch(int[] array, int low, int high, int x) { if (x <= array[low]) { return low; } else { for (int i = low; i < array.length - 1 && array[i] < x && array[i + 1] >= x; i++) { } } return -1; }",3.5394959449768066,0.1434818234048535,0.1256573048987443,0.0895946813992269,0.8235294117647058,0.3097751005088706
8588,Python,Java,"def isPalRec ( st , s , e ) : NEW_LINE INDENT if ( s == e ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( st [ s ] != st [ e ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( s < e + 1 ) : NEW_LINE INDENT return isPalRec ( st , s + 1 , e - 1 ) ; NEW_LINE DEDENT return True NEW_LINE DEDENT def isPalindrome ( st ) : NEW_LINE INDENT n = len ( st ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return isPalRec ( st , 0 , n - 1 ) ; NEW_LINE DEDENT st = "" geeg "" NEW_LINE if ( isPalindrome ( st ) ) : NEW_LINE INDENT print "" Yes "" NEW_LINE DEDENT else : NEW_LINE INDENT print "" No "" NEW_LINE DEDENT","import java . io . * ; class GFG { static boolean isPalRec ( String str , int s , int e ) { if ( s == e ) return true ; if ( ( str . charAt ( s ) ) != ( str . charAt ( e ) ) ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } static boolean isPalindrome ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } public static void main ( String args [ ] ) { String str = "" geeg "" ; if ( isPalindrome ( str ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","public class IsPalIndoem { private static boolean isPalindrome(String str) { int n = str.length(); if (n == 0) { return true; } else if (str.charAt(0) != str.charAt(n - 1)) { return false; } else { if (n > 1) { return isPalindrome(str.substring(1, n - 1)); } else { return true; } } } private static boolean isPalRec(String st, int s, int e) { if (s == e) { return true; } else if (st.charAt(s) != st.charAt(e)) { return false; } else { if (s < e + 1) { return isPalRec(st, s + 1, e - 1); } else { return true; } } } public static void main(String[] args) { String st = ""geeg""; if (isPalindrome(st)) { System.out.println(""Yes""); } else { System.out.println(""No""); } } }",13.638795852661133,0.6538461538461539,0.5676134788000512,0.4105294700684224,0.9600000000000001,0.5753706290478957
7323,Python,Java,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }",,1.5231380462646484,0,0,0,0,0.0
1944,Python,Java,"def count ( n ) : NEW_LINE INDENT table = [ 0 for i in range ( n + 1 ) ] NEW_LINE table [ 0 ] = 1 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 3 ] NEW_LINE DEDENT for i in range ( 5 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 5 ] NEW_LINE DEDENT for i in range ( 10 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 10 ] NEW_LINE DEDENT return table [ n ] NEW_LINE DEDENT n = 20 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE n = 13 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE","import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; n = 13 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; } }",public int count(int n) { int[] table = new int[n+1]; table[0] = 1; for (int i = 3; i <= n; i++) { table[i] += table[i - 3]; } for (int i = 5; i <= n; i++) { table[i] += table[i - 5]; } for (int i = 10; i <= n; i++) { table[i] += table[i - 10]; } return table[n]; },2.933568000793457,0.42075782537936496,0.37752221762770705,0.31542594591913303,0.7142857142857143,0.4350838764291074
13895,Python,Java,import math NEW_LINE def countBits ( number ) : NEW_LINE INDENT return int ( ( math . log ( number ) / math . log ( 2 ) ) + 1 ) ; NEW_LINE DEDENT num = 65 ; NEW_LINE print ( countBits ( num ) ) ; NEW_LINE,import java . io . * ; class GFG { static int countBits ( int number ) { return ( int ) ( Math . log ( number ) / Math . log ( 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int num = 65 ; System . out . println ( countBits ( num ) ) ; } },public class Main { public static int countBits(int number) { return (int) Math.log(number)/Math.log(2)+1; } public static void main(String[] args) { int num = 65; System.out.println(countBits(num)); } },1.6921460628509521,0.6353042508323263,0.5915912924128193,0.5212591156698209,1.0,0.6648813809688745
1010,Python,Java,"def calculateSpan ( price , n , S ) : NEW_LINE INDENT S [ 0 ] = 1 NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE INDENT S [ i ] = 1 NEW_LINE j = i - 1 NEW_LINE while ( j >= 0 ) and ( price [ i ] >= price [ j ] ) : NEW_LINE INDENT S [ i ] += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT price = [ 10 , 4 , 5 , 90 , 120 , 80 ] NEW_LINE n = len ( price ) NEW_LINE S = [ None ] * n NEW_LINE calculateSpan ( price , n , S ) NEW_LINE printArray ( S , n ) NEW_LINE","import java . util . Arrays ; class GFG { static void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } static void printArray ( int arr [ ] ) { System . out . print ( Arrays . toString ( arr ) ) ; } public static void main ( String [ ] args ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = price . length ; int S [ ] = new int [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S ) ; } }","public class calculateSpan { private int[] price; private int n; private int[] S; public static void main(String[] args) { calculateSpan(new int[]{10, 4, 5, 90, 120, 80}, 6); } private static void calculateSpan(int[] price, int n) { S = new int[n]; for (int i = 1; i <= n - 1; i++) { S[i] = 0; for (int j = i - 1; j >= 0 && price[i] >= price[j]; j--) { S[i]++; } } } private static void printArray(int[] arr, int n) { for (int i = 0; i < n; i++) { System.out.print(arr[i] + "" ▁""); } } }",5.013501882553101,0.8233355267811938,0.6913822470167957,0.5105009177163214,0.9411764705882353,0.6397035835778956
12814,Python,Java,"def sum ( x , n ) : NEW_LINE INDENT total = 1.0 NEW_LINE multi = x NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + multi / i NEW_LINE multi = multi * x NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE print ( round ( sum ( x , n ) , 2 ) ) NEW_LINE","class GFG { static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public double sum(double x, int n){ double total = 1.0; double multi = x; for (int i=1; i<=n; i++){ total = total + multi / i; multi = multi * x; } return total; }",1.5512490272521973,0.3522536348950591,0.3198268615585651,0.2647718788324343,0.6666666666666666,0.38534031518270395
7012,Python,Java,"def carAssembly ( a , t , e , x ) : NEW_LINE INDENT NUM_STATION = len ( a [ 0 ] ) NEW_LINE T1 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE T2 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE DEDENT T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] NEW_LINE T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] NEW_LINE INDENT for i in range ( 1 , NUM_STATION ) : NEW_LINE INDENT T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) NEW_LINE T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) NEW_LINE DEDENT return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) NEW_LINE DEDENT a = [ [ 4 , 5 , 3 , 2 ] , [ 2 , 10 , 1 , 4 ] ] NEW_LINE t = [ [ 0 , 7 , 4 , 5 ] , [ 0 , 9 , 2 , 8 ] ] NEW_LINE e = [ 10 , 12 ] NEW_LINE x = [ 18 , 7 ] NEW_LINE print ( carAssembly ( a , t , e , x ) ) NEW_LINE","import java . io . * ; class GFG { static int NUM_LINE = 2 ; static int NUM_STATION = 4 ; static int min ( int a , int b ) { return a < b ? a : b ; } static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) { int T1 [ ] = new int [ NUM_STATION ] ; int T2 [ ] = new int [ NUM_STATION ] ; int i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; System . out . println ( carAssembly ( a , t , e , x ) ) ; } }","public class CarAssembly { private int[] a; private int[] t; private int[] e; private int[] x; public static void main(String[] args) { a = new int[2][4]; t = new int[2][4]; e = new int[2]; x = new int[2]; setA(a); setT(t); setX(x); System.out.println(carAssembly(a, t, e, x)); } public static int carAssembly(int[][] a, int[][] t, int[] e, int[] x) { int minCost = Integer.MAX_VALUE; List<Integer> sequence = new ArrayList<>(); int[][] dp = new int[a.length+1][a.length]; dp[0][0] = e[0] + a[0][0]; dp[1][0] = e[1] + t[0][0]; for (int i = 1; i <= a.length; i++) { dp[i][0] = Math.min(dp[i-1][0], dp[i-1][1]) + t[0][i]; } for (int j = 1; j <= a.length; j++) { dp[0][j] = Math.min(dp[0][j-1], dp[1][j-1]) + a[0][j]; dp[1][j] = Math.min(dp[0][j], dp[1][j-1]) + t[0][j]; } for (int i = a.length - 1; i >= 0; i--) { int[] path1 = new int[i+1]; int[] path2 = new int[i+1]; if (i == 0) { path1[0] = dp[0][i]; path2[0] = dp[1][i]; } else if (i == 1) { path1[0] = dp[0][i]; path2[0] = dp[1][i]; } else { int bestPathCost = Math.min(dp[0][i], dp[1][i]); List<Integer> bestPath = new ArrayList<>(); int j = i; while (j > 0) { bestPath.add(j); if (bestPathCost == dp[0][i] && j == 0) { bestPath.add(0); } else if (bestPathCost == dp[1][i] && j == 1) { bestPath.add(1); } else if (dp[0][i] == dp[1][i]) { bestPath.add(Math.abs(j-1)); } if (bestPathCost == dp[0][i]) { bestPathCost -= t[0][j]; } else if (bestPathCost == dp[1][i]) { bestPathCost -= t[1][j]; } j = Math.abs(j-1); } if (bestPathCost < dp[0]) {",31.61617398262024,0.43465045592705165,0.34984304884145656,0.2327113005052061,0.761904761904762,0.39146933892507285
2066,Python,Java,"INT_SIZE = 32 NEW_LINE def getSingle ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 0 , INT_SIZE ) : NEW_LINE INDENT sm = 0 NEW_LINE x = ( 1 << i ) NEW_LINE for j in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ j ] & x ) : NEW_LINE INDENT sm = sm + 1 NEW_LINE DEDENT DEDENT if ( ( sm % 3 ) != 0 ) : NEW_LINE INDENT result = result | x NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr = [ 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","class GFG { static final int INT_SIZE = 32 ; static int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & x ) == 0 ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","int INT_SIZE = 32; int[] arr = { 12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7 }; int n = arr.length; public int getSingle(int[] arr, int n) { int result = 0; for (int i = 0; i < INT_SIZE; i++) { int sm = 0; int x = 1 << i; for (int j = 0; j < n; j++) { if ((arr[j] & x) == 0) { sm++; } else if (sm % 3 != 0) { result |= x; } } } return result; } System.out.println("" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle(arr, n));",6.457052946090698,0.7941834665927614,0.7359282704284401,0.6306677866094454,0.625,0.6289674506266119
1584,Python,Java,"def minJumps ( arr , l , h ) : NEW_LINE INDENT if ( h == l ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( arr [ l ] == 0 ) : NEW_LINE INDENT return float ( ' inf ' ) NEW_LINE DEDENT min = float ( ' inf ' ) NEW_LINE for i in range ( l + 1 , h + 1 ) : NEW_LINE INDENT if ( i < l + arr [ l ] + 1 ) : NEW_LINE INDENT jumps = minJumps ( arr , i , h ) NEW_LINE if ( jumps != float ( ' inf ' ) and jumps + 1 < min ) : NEW_LINE INDENT min = jumps + 1 NEW_LINE DEDENT DEDENT DEDENT return min NEW_LINE DEDENT arr = [ 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( ' Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ' , ' end ▁ is ' , minJumps ( arr , 0 , n - 1 ) ) NEW_LINE","import java . util . * ; import java . io . * ; class GFG { static int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ; int min = Integer . MAX_VALUE ; for ( int i = l + 1 ; i <= h && i <= l + arr [ l ] ; i ++ ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) min = jumps + 1 ; } return min ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = arr . length ; System . out . print ( "" Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ▁ end ▁ is ▁ "" + minJumps ( arr , 0 , n - 1 ) ) ; } }","public int minJumps(int[] arr, int l, int h) { if (h == l) return 0; if (arr[l] == 0) return Integer.MAX_VALUE; int min = Integer.MAX_VALUE; for (int i = l + 1; i <= h; i++) { int jumps = minJumps(arr, i, h); if (jumps != Integer.MAX_VALUE && jumps + 1 < min) { min = jumps + 1; } } return min; }",5.160369873046875,0.29067477531019803,0.2761914514540015,0.24475687460906073,0.7142857142857143,0.38561552651205677
1531,Python,Java,"def print2largest ( arr , arr_size ) : NEW_LINE INDENT if ( arr_size < 2 ) : NEW_LINE INDENT print ( "" ▁ Invalid ▁ Input ▁ "" ) NEW_LINE return NEW_LINE DEDENT first = second = - 2147483648 NEW_LINE for i in range ( arr_size ) : NEW_LINE INDENT if ( arr [ i ] > first ) : NEW_LINE INDENT second = first NEW_LINE first = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] > second and arr [ i ] != first ) : NEW_LINE INDENT second = arr [ i ] NEW_LINE DEDENT DEDENT if ( second == - 2147483648 ) : NEW_LINE INDENT print ( "" There ▁ is ▁ no ▁ second ▁ largest ▁ element "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ second ▁ largest ▁ element ▁ is "" , second ) NEW_LINE DEDENT DEDENT arr = [ 12 , 35 , 1 , 10 , 34 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print2largest ( arr , n ) NEW_LINE","class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( "" ▁ Invalid ▁ Input ▁ "" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( "" There ▁ is ▁ no ▁ second ▁ largest "" + "" elementNEW_LINE""); else System . out . print ( "" The ▁ second ▁ largest ▁ element "" + "" ▁ is ▁ "" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }","public class PrintTwoLargest { public static void print2Largest(int[] arr, int arrSize) { if (arrSize < 2) { System.out.println(""Invalid input""); } else { int first = Integer.MIN_VALUE; int second = -Integer.MAX_VALUE; for (int i = 0; i < arrSize; i++) { if (arr[i] > first) { second = first; first = arr[i]; } else if (arr[i] > second && arr[i] != first) { second = arr[i]; } } if (second == -Integer.MAX_VALUE) { System.out.println(""There is no second largest element""); } else { System.out.println(""The second largest element is "" + second); } } } public static void main(String[] args) { int arr[] = { 12, 35, 1, 10, 34, 1 }; int n = arr.length; print2Largest(arr, n); } }",13.126571893692017,0.7236513793938578,0.6434730545901588,0.529003507092182,0.9473684210526316,0.6545129812803169
1015,Python,Java,"def printNGE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] < arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNGE ( arr ) NEW_LINE","class Main { static void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNGE ( arr , n ) ; } }","public class PrintNGE { static void main(String[] args) { int[] arr = { 11, 13, 21, 3 }; nge(arr); } private static void nge(int[] arr) { for (int i = 0; i < arr.length - 1; i++) { int next = -1; for (int j = i + 1; j < arr.length; j++) { if (arr[i] < arr[j]) { next = arr[j]; break; } } if (next != -1) { System.out.print(String.valueOf(arr[i]) + "" ▁ - - ▁ "" + String.valueOf(next)); } } } }",8.615799903869629,0.8090335983287403,0.7021383531093492,0.5242846035148429,0.9411764705882353,0.6493521636368605
2174,Python,Java,"def nextGreatest ( arr ) : NEW_LINE INDENT size = len ( arr ) NEW_LINE max_from_right = arr [ size - 1 ] NEW_LINE arr [ size - 1 ] = - 1 NEW_LINE for i in range ( size - 2 , - 1 , - 1 ) : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = max_from_right NEW_LINE if max_from_right < temp : NEW_LINE INDENT max_from_right = temp NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT print arr [ i ] , NEW_LINE DEDENT DEDENT arr = [ 16 , 17 , 4 , 3 , 5 , 2 ] NEW_LINE nextGreatest ( arr ) NEW_LINE print "" Modified ▁ array ▁ is "" NEW_LINE printArray ( arr ) NEW_LINE","import java . io . * ; class NextGreatest { static void nextGreatest ( int arr [ ] ) { int size = arr . length ; int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = - 1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } static void printArray ( int arr [ ] ) { for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; nextGreatest ( arr ) ; System . out . println ( "" The ▁ modified ▁ array : "" ) ; printArray ( arr ) ; } }","def nextGreatest (arr) { int size = arr.length; int maxFromRight = arr[size - 1]; arr[size - 1] = -1; for (int i = size - 2; i >= 0; i--) { int temp = arr[i]; if (maxFromRight < temp) { maxFromRight = temp; } } return maxFromRight; } public static void printArray(int[] arr) { int size = arr.length; for (int i = 0; i < size; i++) { System.out.print(arr[i] + "", ""); } }",5.433164119720459,0.4642390408211485,0.4239729534459873,0.3495092857756073,0.7999999999999999,0.48465650004292504
11738,Python,Java,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","Here's the Java code for the same program without any comments: public class Sum { public static double sum(int n) { double s = 0; for (int i = 1; i <= n; i++) { s += 1.0 / i; } return s; } public static void main(String[] args) { int n = 5; System.out.println(""Sum is: "" + sum(n)); } }",4.25246787071228,0.7110665582255609,0.6062515335073584,0.4690803877761677,1.0,0.6283562714433173
1981,Python,Java,"def getMedian ( ar1 , ar2 , n ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE m1 = - 1 NEW_LINE m2 = - 1 NEW_LINE count = 0 NEW_LINE while count < n + 1 : NEW_LINE INDENT count += 1 NEW_LINE if i == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ 0 ] NEW_LINE break NEW_LINE DEDENT elif j == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ 0 ] NEW_LINE break NEW_LINE DEDENT if ar1 [ i ] <= ar2 [ j ] : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ i ] NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ j ] NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return ( m1 + m2 ) / 2 NEW_LINE DEDENT ar1 = [ 1 , 12 , 15 , 26 , 38 ] NEW_LINE ar2 = [ 2 , 13 , 17 , 30 , 45 ] NEW_LINE n1 = len ( ar1 ) NEW_LINE n2 = len ( ar2 ) NEW_LINE if n1 == n2 : NEW_LINE INDENT print ( "" Median ▁ is ▁ "" , getMedian ( ar1 , ar2 , n1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Doesn ' t ▁ work ▁ for ▁ arrays ▁ of ▁ unequal ▁ size "" ) NEW_LINE DEDENT","class Main { static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = - 1 , m2 = - 1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = ar1 . length ; int n2 = ar2 . length ; if ( n1 == n2 ) System . out . println ( "" Median ▁ is ▁ "" + getMedian ( ar1 , ar2 , n1 ) ) ; else System . out . println ( "" arrays ▁ are ▁ of ▁ unequal ▁ size "" ) ; } }","public double getMedian(double[] a, double[] b, int n) { double m1 = -1; double m2 = -1; int count = 0; while (count < n + 1) { count++; if (count == n) { m1 = m2; break; } if (count == n) { m1 = m2; m2 = b[0]; break; } if (a[count - 1] <= b[count]) { m1 = m2; m2 = a[count]; count++; } else { m1 = m2; m2 = b[count]; count++; } } return (m1 + m2) / 2; }",9.94179105758667,0.3129378861348704,0.2647590403872161,0.1936440835901351,0.625,0.32305085851309456
13443,Python,Java,"def seriesSum ( calculated , current , N ) : NEW_LINE INDENT i = calculated ; NEW_LINE cur = 1 ; NEW_LINE if ( current == N + 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT while ( i < calculated + current ) : NEW_LINE INDENT cur *= i ; NEW_LINE i += 1 ; NEW_LINE DEDENT return cur + seriesSum ( i , current + 1 , N ) ; NEW_LINE DEDENT N = 5 ; NEW_LINE print ( seriesSum ( 1 , 1 , N ) ) ; NEW_LINE","class GFG { static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( seriesSum ( 1 , 1 , N ) ) ; } }","public class SeriesSum { public static int seriesSum(int calculated, int current, int N) { if (current == N + 1) { return 0; } else { int cur = 1; while (i < calculated + current) { cur *= i++; } return cur + seriesSum(i, current+1, N); } } public static void main(String[] args) { int N = 5; System.out.println(seriesSum(1, 1, N)); } }",5.909339189529419,0.806238907083301,0.745041482875563,0.6281434152325704,0.8421052631578948,0.6923319696101677
2291,Python,Java,"def getMissingNo ( A ) : NEW_LINE INDENT n = len ( A ) NEW_LINE total = ( n + 1 ) * ( n + 2 ) / 2 NEW_LINE sum_of_A = sum ( A ) NEW_LINE return total - sum_of_A NEW_LINE DEDENT A = [ 1 , 2 , 4 , 5 , 6 ] NEW_LINE miss = getMissingNo ( A ) NEW_LINE print ( miss ) NEW_LINE","import java . util . * ; import java . util . Arrays ; class GFG { public static List < Integer > findDisappearedNumbers ( int [ ] nums ) { for ( int i = 0 ; i < nums . length ; i ++ ) { int index = Math . abs ( nums [ i ] ) ; if ( nums [ index - 1 ] > 0 ) { nums [ index - 1 ] *= - 1 ; } } List < Integer > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { res . add ( i + 1 ) ; } } return res ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 4 , 5 , 6 } ; System . out . println ( findDisappearedNumbers ( a ) ) ; } }",public static int getMissingNumber(int[] A) { int n = A.length + 1; int total = (n+1)*(n+2)/2; int sumOfA = Arrays.stream(A).sum(); return total - sumOfA; },2.226771831512451,0.03888070909484106,0.022690473702863968,0.007515009415360432,0.5714285714285715,0.17668907801932376
4857,Python,Java,"def flip ( arr , i ) : NEW_LINE INDENT start = 0 NEW_LINE while start < i : NEW_LINE INDENT temp = arr [ start ] NEW_LINE arr [ start ] = arr [ i ] NEW_LINE arr [ i ] = temp NEW_LINE start += 1 NEW_LINE i -= 1 NEW_LINE DEDENT DEDENT def findMax ( arr , n ) : NEW_LINE INDENT mi = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if arr [ i ] > arr [ mi ] : NEW_LINE INDENT mi = i NEW_LINE DEDENT DEDENT return mi NEW_LINE DEDENT def pancakeSort ( arr , n ) : NEW_LINE INDENT curr_size = n NEW_LINE while curr_size > 1 : NEW_LINE INDENT mi = findMax ( arr , curr_size ) NEW_LINE if mi != curr_size - 1 : NEW_LINE INDENT flip ( arr , mi ) NEW_LINE flip ( arr , curr_size - 1 ) NEW_LINE DEDENT curr_size -= 1 NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT print ( "" % d "" % ( arr [ i ] ) , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT arr = [ 23 , 10 , 20 , 11 , 12 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE pancakeSort ( arr , n ) ; NEW_LINE print ( "" Sorted ▁ Array ▁ "" ) NEW_LINE printArray ( arr , n ) NEW_LINE","import java . io . * ; class PancakeSort { static void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } static int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } static int pancakeSort ( int arr [ ] , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } return 0 ; } static void printArray ( int arr [ ] , int arr_size ) { for ( int i = 0 ; i < arr_size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = arr . length ; pancakeSort ( arr , n ) ; System . out . println ( "" Sorted ▁ Array : ▁ "" ) ; printArray ( arr , n ) ; } }","public class PancakeSort { private static void pancakeSort(int[] arr, int n) { int currSize = n; while (currSize > 1) { int maxIndex = findMax(arr, currSize); if (maxIndex != currSize - 1) { swap(arr, maxIndex, currSize); flip(arr, currSize); } currSize--; } printArray(arr, n); } private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } private static void flip(int[] arr, int n) { for (int i = 0; i < n / 2; i++) { int temp = arr[i]; arr[i] = arr[n - 1 - i]; arr[n - 1 - i] = temp; } } private static int findMax(int[] arr, int n) { int maxIndex = 0; for (int i = 1; i < n; i++) { if (arr[i] > arr[maxIndex]) { maxIndex = i; } } return maxIndex; } private static void printArray(int[] arr, int n) { for (int i = 0; i < n; i++) { System.out.print("" "" + arr[i]); } System.out.println(); } }",21.134626150131226,0.7198636931596158,0.5957840273840658,0.38192970714659935,0.9,0.5373507950026195
1844,Python,Java,"R = 3 NEW_LINE C = 3 NEW_LINE def minCost ( cost , m , n ) : NEW_LINE INDENT tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ] NEW_LINE tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] NEW_LINE DEDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] NEW_LINE DEDENT DEDENT return tc [ m ] [ n ] NEW_LINE DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","import java . util . * ; class MinimumCostPath { private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }","public class MinCost { public static int [][] minCost (int[][] cost, int m, int n) { int[][] tc = new int[m+1][n+1]; tc[0][0] = 0; for (int i=1; i<=m; i++) { tc[i][0] = tc[i-1][0] + cost[i][0]; } for (int j=1; j<=n; j++) { tc[0][j] = tc[0][j-1] + cost[0][j]; } for (int i=1; i<=m; i++) { for (int j=1; j<=n; j++) { int minCost = Math.min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]); tc[i][j] = minCost + cost[i][j]; } } return tc[m][n]; } public static void main(String[] args) { int cost = new int [][] {{1,2,3},{4,8,2},{1,5,3}}; System.out.print(""Minimum cost is: "" + minCost(cost, 2, 2)); } }",10.243510007858276,0.6233780411360863,0.5294906677915262,0.39534300925008803,0.8571428571428571,0.5338829636179188
2012,Python,Java,def count ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT return n NEW_LINE DEDENT elif n >= 3 and n < 10 : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT po = 1 NEW_LINE while n / po > 9 : NEW_LINE INDENT po = po * 10 NEW_LINE DEDENT msd = n / po NEW_LINE if msd != 3 : NEW_LINE INDENT return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) NEW_LINE DEDENT else : NEW_LINE INDENT return count ( msd * po - 1 ) NEW_LINE DEDENT DEDENT n = 578 NEW_LINE print count ( n ) NEW_LINE,import java . io . * ; class GFG { static int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } public static void main ( String [ ] args ) { int n = 578 ; System . out . println ( count ( n ) ) ; } },public class Count { public static int count(int n) { if (n < 3) { return n; } else if (n >= 3 && n <= 10) { return n - 1; } int po = 1; while (n / po > 9) { po = po * 10; } int msd = n / po; if (msd != 3) { return count(msd) * count(po - 1) + count(msd) + count(n % po); } else { return count(msd * po - 1); } } public static void main(String[] args) { int n = 578; System.out.println(count(n)); }},7.047662019729614,0.891156462585034,0.8450715545712925,0.7622429325265853,1.0,0.8335700527686096
13911,Python,Java,"INT_MAX = 2147483647 NEW_LINE def isKthBitSet ( x , k ) : NEW_LINE INDENT return 1 if ( x & ( 1 << ( k - 1 ) ) ) else 0 NEW_LINE DEDENT def leftmostSetBit ( x ) : NEW_LINE INDENT count = 0 NEW_LINE while ( x ) : NEW_LINE INDENT count += 1 NEW_LINE x = x >> 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def isBinPalindrome ( x ) : NEW_LINE INDENT l = leftmostSetBit ( x ) NEW_LINE r = 1 NEW_LINE while ( l > r ) : NEW_LINE INDENT if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT l -= 1 NEW_LINE r += 1 NEW_LINE DEDENT return 1 NEW_LINE DEDENT def findNthPalindrome ( n ) : NEW_LINE INDENT pal_count = 0 NEW_LINE i = 0 NEW_LINE for i in range ( 1 , INT_MAX + 1 ) : NEW_LINE INDENT if ( isBinPalindrome ( i ) ) : NEW_LINE INDENT pal_count += 1 NEW_LINE DEDENT if ( pal_count == n ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( findNthPalindrome ( n ) ) NEW_LINE DEDENT","import java . io . * ; class GFG { static int INT_MAX = 2147483647 ; static int isKthBitSet ( int x , int k ) { return ( ( x & ( 1 << ( k - 1 ) ) ) > 0 ) ? 1 : 0 ; } static int leftmostSetBit ( int x ) { int count = 0 ; while ( x > 0 ) { count ++ ; x = x >> 1 ; } return count ; } static int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } static int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) > 0 ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( findNthPalindrome ( n ) ) ; } }","int INT_MAX = 2147483647; public static boolean isKthBitSet(int x, int k) { return (x & (1 << (k - 1))) != 0; } private int leftmostSetBit(int x) { int count = 0; while (x > 0) { x >>= 1; count++; } return count; } public static boolean isBinPalindrome(int x) { int left = leftmostSetBit(x); int right = 1; while (left > right) { if (!isKthBitSet(x, left)) { return false; } left -= 1; right += 1; } return true; } public static int findNthPalindrome(int n) { int pal_count = 0; for (int i = 1; i < INT_MAX + 1; i++) { if (isBinPalindrome(i)) { pal_count++; } if (pal_count == n) { break; } } return i; } public static void main(String[] args) { int n = 9; System.out.println(""The "" + n + ""th palindrome is: "" + findNthPalindrome(n)); }",8.170049905776978,0.7737164224078351,0.6997359721666653,0.5772432577918086,0.7826086956521738,0.6388528891499181
9298,Python,Java,"def CalPeri ( ) : NEW_LINE INDENT s = 5 NEW_LINE Perimeter = 10 * s NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" , Perimeter ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT CalPeri ( ) ; NEW_LINE DEDENT","import java . io . * ; class GFG { static void CalPeri ( ) { int S = 5 , Perimeter ; Perimeter = 10 * S ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" + Perimeter ) ; } public static void main ( String [ ] args ) { CalPeri ( ) ; } }","public class Decagon { private double sideLength; private double perimeter; public static void main(String[] args) { new Decagon().CalPerimeter(); } public Decagon() { setSideLength(5); calculatePerimeter(); } private void setSideLength(double sideLength) { this.sideLength = sideLength; } public double calculatePerimeter() { perimeter = 10 * sideLength; System.out.println(""The Perimeter of the Decagon is: "" + perimeter); return perimeter; } }",3.6458559036254883,0.4673913043478261,0.3510954803347867,0.2261604818259509,0.7142857142857143,0.3725980515638799
1704,Python,Java,"import math NEW_LINE def printRepeating ( arr , size ) : NEW_LINE INDENT S = 0 ; NEW_LINE P = 1 ; NEW_LINE n = size - 2 NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT S = S + arr [ i ] NEW_LINE P = P * arr [ i ] NEW_LINE DEDENT S = S - n * ( n + 1 ) // 2 NEW_LINE P = P // fact ( n ) NEW_LINE D = math . sqrt ( S * S - 4 * P ) NEW_LINE x = ( D + S ) // 2 NEW_LINE y = ( S - D ) // 2 NEW_LINE print ( "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" , ( int ) ( x ) , "" ▁ & ▁ "" , ( int ) ( y ) ) NEW_LINE DEDENT def fact ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n * fact ( n - 1 ) ) NEW_LINE DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = ( int ) Math . sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; System . out . println ( "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ : "" ) ; System . out . print ( x + "" ▁ "" + y ) ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","```java import java.lang.Math; public class PrintRepeating { public static void main(String[] args) { int arr[] = { 4, 2, 4, 5, 2, 3, 1 }; int size = arr.length; for (int i = 0; i < size; i++) { int s = 0; int p = 1; for (int j = 0; j <= i; j++) { s += arr[j]; p *= arr[j]; } double d = Math.sqrt(s * s - 4 * p); int x = (int) ((d + s) / 2); int y = (int) ((s - d) / 2); System.out.println("" The two repeating elements are "" + x + "", "" + y + "".""); } } public static long fact(int n) { if (n == 0) { return 1; } else { return n * fact(n - 1); } } } ```",5.961409091949463,0.620538981417406,0.5016082874897068,0.3364569397129433,0.8421052631578948,0.48815143674642875
13537,Python,Java,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","public class Main { public static double sum(int n) { int i = 1; double s = 0.0; for (i = 1; i <= n + 1; i++) { s += 1 / i; } return s; } public static void main(String[] args) { int n = 5; System.out.println(""Sum ▁ is "" + round(sum(n), 6)); } public static double round(double num, int decimalPlaces) { return Math.round(num * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces); } }",3.9546878337860107,0.6083333333333333,0.5106018857331861,0.3998054307751431,1.0,0.5798638015426001
13913,Python,Java,"INT_SIZE = 32 NEW_LINE def constructNthNumber ( group_no , aux_num , op ) : NEW_LINE INDENT a = [ 0 ] * INT_SIZE NEW_LINE num , i = 0 , 0 NEW_LINE if op == 2 : NEW_LINE INDENT len_f = 2 * group_no NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT elif op == 0 : NEW_LINE INDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 0 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT for i in range ( 0 , len_f ) : NEW_LINE INDENT num += ( 1 << i ) * a [ i ] NEW_LINE DEDENT return num NEW_LINE DEDENT def getNthNumber ( n ) : NEW_LINE INDENT group_no = 0 NEW_LINE count_upto_group , count_temp = 0 , 1 NEW_LINE while count_temp < n : NEW_LINE INDENT group_no += 1 NEW_LINE count_upto_group = count_temp NEW_LINE count_temp += 3 * ( 1 << ( group_no - 1 ) ) NEW_LINE DEDENT group_offset = n - count_upto_group - 1 NEW_LINE if ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) : NEW_LINE INDENT aux_num = group_offset NEW_LINE DEDENT else : NEW_LINE INDENT if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) : NEW_LINE else : NEW_LINE aux_num = ( ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) // 2 ) NEW_LINE DEDENT return constructNthNumber ( group_no , aux_num , op ) NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( getNthNumber ( n ) ) NEW_LINE DEDENT","class GFG { static int INT_SIZE = 32 ; static int constructNthNumber ( int group_no , int aux_num , int op ) { int a [ ] = new int [ INT_SIZE ] ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num > 0 ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } static int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 == 1 ) else aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . printf ( "" % d "" , getNthNumber ( n ) ) ; } }","import java.lang.Integer; class JavaCode { public static int constructNthNumber(int groupNo, int auxNum, int op){ if(op == 2){ final int length = 2 * groupNo; Integer[] a = new Integer[length]; for (int i = 0; i < length; i++) { if(i == 0) { a[length - 1] = 1; a[0] = 1; } else if(i < groupNo) { a[groupNo + i - 1] = auxNum & 1; auxNum = auxNum >> 1; } else { a[groupNo] = 0; } } for (int i = 0; i < length; i++){ if(i == groupNo) { a[groupNo + i] = 1; } else { a[groupNo + i - 1] = auxNum & 1; auxNum = auxNum >> 1; } return a[groupNo]; } else if(op == 0){ final int length = 2 * group_no + 1; Integer[] a = new Integer[length]; a[group_no] = 0; for(int i=0;i<n;++i){ if(a[2*group_no+1]){ a[2*group_no] = 1; } else { a[2*group_no+1] = 1; } auxNum = (auxNum>>1); } for(int i=0;i<length;++i){ if(a[2*group_no+1] && (i==group_no) || (i>=2*group_no)){ a[2*group_no+1] = 1; } else { a[2*group_no+1] = 0; } } for(int i=0;i<length;++i){ if(a[2*group_no]){ return 1 << (i % 2); } else { return 0; } } } }",23.7864990234375,0.5692716371156806,0.4378878074466587,0.24629651065443242,0.8181818181818182,0.41786210291264814
11721,Python,Java,"def midptellipse ( rx , ry , xc , yc ) : NEW_LINE INDENT x = 0 ; NEW_LINE y = ry ; NEW_LINE d1 = ( ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ) ; NEW_LINE dx = 2 * ry * ry * x ; NEW_LINE dy = 2 * rx * rx * y ; NEW_LINE while ( dx < dy ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d1 < 0 ) : NEW_LINE INDENT x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE d1 = d1 + dx + ( ry * ry ) ; NEW_LINE DEDENT else : NEW_LINE INDENT x += 1 ; NEW_LINE y -= 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d1 = d1 + dx - dy + ( ry * ry ) ; NEW_LINE DEDENT DEDENT d2 = ( ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ) ; NEW_LINE while ( y >= 0 ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d2 > 0 ) : NEW_LINE INDENT y -= 1 ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + ( rx * rx ) - dy ; NEW_LINE DEDENT else : NEW_LINE INDENT y -= 1 ; NEW_LINE x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + dx - dy + ( rx * rx ) ; NEW_LINE DEDENT DEDENT DEDENT midptellipse ( 10 , 15 , 50 , 50 ) ; NEW_LINE","import java . util . * ; import java . text . DecimalFormat ; class GFG { static void midptellipse ( float rx , float ry , float xc , float yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25f * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; DecimalFormat df = new DecimalFormat ( "" # , # # # , # #0.00000"" ) ; while ( dx < dy ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5f ) * ( x + 0.5f ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } public static void main ( String args [ ] ) { midptellipse ( 10 , 15 , 50 , 50 ) ; } }","public class MidpointEllipse { public static void main(String[] args) { double rx = 10.0, ry = 15.0, xc = 50.0, yc = 50.0; midptellipse(rx, ry, xc, yc); } private static void midptellipse(double rx, double ry, double xc, double yc) { int dx = 0; int dy = ry; double d1 = (rx * rx - 2.0 * rx * ry + (0.25 * rx * rx)) / d2; while (dx < dy) { System.out.println(""( "" + xc + "", "" + yc + "", ""); System.out.println((-xc, ""+"" + yc)); System.out.println((+xc, ""+"" + yc)); System.out.println((+xc, ""-"" + yc)); System.out.println(""( "" + xc + "", "" + yc + "", )""); System.out.println((-xc, ""+"" + yc)); System.out.println((+xc, ""+"" + yc)); System.out.println(""( "" + xc + "", "" + yc + "", )""); if (d1 < 0) { x += 1; dx = dx + (2.0 * ry * ry); d1 = d1 + dx + (ry * ry); } else { x += 1; y -= 1; dx = dx + (2.0 * ry * ry); dy = dy - (2.0 * rx * rx); d1 = d1 + dx - dy + (ry * ry); } } if (d2 > 0) { y -= 1; dy = dy - (2.0 * rx * rx); } else { y -= 1; x += 1; dx = dx + (2.0 * ry * ry); } if (d1 < 0) { System.out.println((x, y)); } else { System.out.println((-x + xc, -y + yc)); System.out.println((+x + xc, -y + yc)); } } }",29.32939624786377,0.44340284931611046,0.3654437822665485,0.24434056775307983,0.8421052631578948,0.4236699763745243
2065,Python,Java,"def getSingle ( arr , n ) : NEW_LINE INDENT ones = 0 NEW_LINE twos = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT twos = twos | ( ones & arr [ i ] ) NEW_LINE ones = ones ^ arr [ i ] NEW_LINE common_bit_mask = ~ ( ones & twos ) NEW_LINE ones &= common_bit_mask NEW_LINE twos &= common_bit_mask NEW_LINE DEDENT return ones NEW_LINE DEDENT arr = [ 3 , 3 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","public int getSingle(int[] arr, int n){ int ones = 0; int twos = 0; for (int i=0; i<n; i++){ twos |= (ones & arr[i]); ones ^= arr[i]; } int common_bit_mask = ~(ones & twos); ones &= common_bit_mask; twos &= common_bit_mask; return ones; } public class GetSingle { public static int getSingle(int[] arr, int n) { int ones = 0; int twos = 0; for (int i=0; i<n; i++){ twos |= (ones & arr[i]); ones ^= arr[i]; } int common_bit_mask = ~(ones & twos); ones &= common_bit_mask; twos &= common_bit_mask; return ones; } public static void main(String[] args) { int arr[] = {3, 3, 2, 3}; int n = arr.length; System.out.println(""The element with a single occurrence is: "" + getSingle(arr, n)); } }",8.53372073173523,0.6325581395348837,0.567618558612077,0.45553184820372045,1.0,0.6188722937426043
13427,Python,Java,"import math NEW_LINE def countDivisors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , ( int ) ( math . sqrt ( n ) ) + 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( n // i == i ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = count + 2 NEW_LINE DEDENT DEDENT DEDENT if ( count % 2 == 0 ) : NEW_LINE INDENT print ( "" Even "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Odd "" ) NEW_LINE DEDENT DEDENT print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) NEW_LINE countDivisors ( 10 ) NEW_LINE","import java . io . * ; import java . math . * ; class GFG { static void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) System . out . println ( "" Even "" ) ; else System . out . println ( "" Odd "" ) ; } public static void main ( String args [ ] ) { System . out . print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) ; countDivisors ( 10 ) ; } }","import java.lang.Math; public class CountDivisors { public static int countDivisors(int n) { int count = 0; for (int i = 1; i <= (int) Math.sqrt(n) + 2; i++) { if (n % i == 0) { count++; } if (i != n / i && (n / i != i)) { count--; } } return count % 2 == 0 ? count + 1 : count + 2; } public static void main(String[] args) { System.out.println("" Even: ""); if (countDivisors(10) % 2 == 0) { System.out.println(countDivisors(10)); } else { System.out.println("" Odd: "" + countDivisors(10)); } System.out.println("" The ▁ count ▁ of ▁ divisor : ▁ ""); System.out.print(countDivisors(10) + "" ""); } }",9.934131860733032,0.6132596685082873,0.5317714237766901,0.4121118283353759,0.9473684210526316,0.5726888061505526
848,Python,Java,"def search ( mat , n , x ) : NEW_LINE INDENT i = 0 NEW_LINE j = n - 1 NEW_LINE while ( i < n and j >= 0 ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == x ) : NEW_LINE INDENT print ( "" n ▁ Found ▁ at ▁ "" , i , "" , ▁ "" , j ) NEW_LINE return 1 NEW_LINE DEDENT if ( mat [ i ] [ j ] > x ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT print ( "" Element ▁ not ▁ found "" ) NEW_LINE return 0 NEW_LINE DEDENT mat = [ [ 10 , 20 , 30 , 40 ] , [ 15 , 25 , 35 , 45 ] , [ 27 , 29 , 37 , 48 ] , [ 32 , 33 , 39 , 50 ] ] NEW_LINE search ( mat , 4 , 29 ) NEW_LINE","class GFG { private static void search ( int [ ] [ ] mat , int n , int x ) { int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { System . out . print ( "" n ▁ Found ▁ at ▁ "" + i + "" ▁ "" + j ) ; return ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } System . out . print ( "" n ▁ Element ▁ not ▁ found "" ) ; return ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; } }","public static boolean search(int[][] matrix, int n, int x) { }",1.2316370010375977,0.00012904356264866387,0.0001167622102146104,9.758352751439248e-05,0.39999999999999997,0.12006830846926006
13539,Python,Java,"def printFibonacciNumbers ( n ) : NEW_LINE INDENT f1 = 0 NEW_LINE f2 = 1 NEW_LINE if ( n < 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT print ( f1 , end = "" ▁ "" ) NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT print ( f2 , end = "" ▁ "" ) NEW_LINE next = f1 + f2 NEW_LINE f1 = f2 NEW_LINE f2 = next NEW_LINE DEDENT DEDENT printFibonacciNumbers ( 7 ) NEW_LINE","class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; System . out . print ( f1 + "" ▁ "" ) ; for ( i = 1 ; i < n ; i ++ ) { System . out . print ( f2 + "" ▁ "" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }","public class PrintFibonacciNumbers { public static void main(String[] args) { int n = 7; FibonacciFinder f1 = 0, f2 = 1; if (n < 1) { return; } System.out.print(f1 + "" ▁""); for (int x = 1; x <= n - 1; x++) { int next = f1 + f2; System.out.print(f2 + "" ▁""); f1 = f2; f2 = next; } } }",3.911979913711548,0.7361038290048407,0.6491433585950525,0.4870504283849893,1.0,0.6409352998694925
1954,Python,Java,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE p = 0 NEW_LINE t = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","public class Search { int d = 256; static int M = 0; static int N = 0; static int i = 0; static int j = 0; static int p = 0; static int t = 0; static int h = 1; public void search(String pat, String txt, int q) { for (i = M - 1; i < M; i++) { h = (h * d) % q; } for (i = 0; i < M; i++) { p = (d * p + pat.charAt(i) - 'a') % q; t = (d * t + txt.charAt(i) - 'a') % q; } for (i = 0; i < N - M + 1; i++) { if (p == t) { print(""Pattern found at index "" + i); for (j = 0; j < M; j++) { if (txt.charAt(i + j) != pat.charAt(j)) { break; } } return; } t = (t - h * (txt.charAt(i) - 'a') + q) % q; if (t < 0) { t = t + q; } } txt = ""Geeks for Geeks""; pat = ""Geek""; q = 101; }",11.982583045959473,0.6993568818913262,0.615433570674953,0.46339294361907346,0.8888888888888888,0.5910417272000181
13546,Python,Java,"def gcd ( a , b ) : ' NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","class Test { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public static int gcd (int a, int b) { if (b == 0) { return a; } return gcd(b, a % b); } public static void main(String[] args) { a = 98; b = 56; if (gcd(a, b)) { System.out.println(""GCD ▁ of "" + a + "" and "" + b + "" is "" + gcd(a, b)); } else { System.out.println(""Not ▁ found""); } }",2.599461078643799,0.7714285714285715,0.7102081416004778,0.6077703266657443,0.875,0.687939228666021
2096,Python,Java,"def isPowerOfFour ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT while ( n != 1 ) : NEW_LINE INDENT if ( n % 4 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT n = n // 4 NEW_LINE DEDENT return True NEW_LINE DEDENT test_no = 64 NEW_LINE if ( isPowerOfFour ( 64 ) ) : NEW_LINE INDENT print ( test_no , ' is ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( test_no , ' is ▁ not ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT","class GFG { static int isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } public static void main ( String [ ] args ) { int test_no = 64 ; if ( isPowerOfFour ( test_no ) == 1 ) System . out . println ( test_no + "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ) ; else System . out . println ( test_no + "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ) ; } }","public class IsPowerOfFour { public static boolean isPowerOfFour(int n) { if (n == 0) { return false; } else { while (n != 1) { if (n % 4 != 0) { return false; } else { n = n / 4; } } return true; } } public static void main(String[] args) { int testNo = 64; boolean result = isPowerOfFour(testNo); if (result) { System.out.println(testNo + "" is a power of 4""); } else { System.out.println(testNo + "" is not a power of 4""); } } }",6.969884872436523,0.744,0.6148170459575759,0.47670003047896653,0.8695652173913044,0.5945595865526678
7050,Python,Java,"def maxSumIS ( arr , n ) : NEW_LINE INDENT max = 0 NEW_LINE msis = [ 0 for x in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT msis [ i ] = arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) : NEW_LINE INDENT msis [ i ] = msis [ j ] + arr [ i ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if max < msis [ i ] : NEW_LINE INDENT max = msis [ i ] NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT arr = [ 1 , 101 , 2 , 3 , 100 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" + "" subsequence ▁ is ▁ "" + str ( maxSumIS ( arr , n ) ) ) NEW_LINE","class GFG { static int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } public static void main ( String args [ ] ) { int arr [ ] = new int [ ] { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = arr . length ; System . out . println ( "" Sum ▁ of ▁ maximum ▁ sum ▁ "" + "" increasing ▁ subsequence ▁ is ▁ "" + maxSumIS ( arr , n ) ) ; } }","public int maxSumIS(int[] arr, int n){ int[] msis = new int[n]; for (int i = 0; i < n; i++) { msis[i] = arr[i]; } for (int i = 1; i < n; i++) { for (int j = 0; j <= i-1; j++) { if (arr[i] > arr[j] && msis[i] < msi[j] + arr[i]) { msis[i] = msi[j] + arr[i]; } } } int max = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { if (max < msi[i]) { max = msi[i]; } } return max; }",5.443288803100586,0.5801409041112622,0.5072761862559502,0.39252519270207253,0.7499999999999999,0.4997676348914507
8947,Python,Java,"def exponentMod ( A , B , C ) : NEW_LINE INDENT if ( A == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( B == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT y = 0 NEW_LINE if ( B % 2 == 0 ) : NEW_LINE INDENT y = exponentMod ( A , B / 2 , C ) NEW_LINE y = ( y * y ) % C NEW_LINE DEDENT else : NEW_LINE INDENT y = A % C NEW_LINE y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C NEW_LINE DEDENT return ( ( y + C ) % C ) NEW_LINE DEDENT A = 2 NEW_LINE B = 5 NEW_LINE C = 13 NEW_LINE print ( "" Power ▁ is "" , exponentMod ( A , B , C ) ) NEW_LINE","import java . io . * ; class GFG { static int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } public static void main ( String args [ ] ) { int A = 2 , B = 5 , C = 13 ; System . out . println ( "" Power ▁ is ▁ "" + exponentMod ( A , B , C ) ) ; } }","public class ExponentMod { static int exponentMod(int a, int b, int c) { if (a == 0) { return 0; } else if (b == 0) { return 1; } else if (b % 2 == 0) { int y = exponentMod(a, b / 2, c); return (y * y) % c; } else { int y = a % c; return (y * exponentMod(a, b - 1, c)) % c; } } public static void main(String[] args) { System.out.println(""Power ▁ is "" + exponentMod(2, 5, 13)); } }",5.683077812194824,0.6138522774318779,0.5007619889948932,0.2970453642075158,1.0,0.5079317549452611
9368,Python,Java,"def octant ( x , y , z ) : NEW_LINE INDENT if x >= 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" NEW_LINE DEDENT DEDENT x , y , z = 2 , 3 , 4 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 4 , 2 , - 8 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 6 , - 2 , 8 NEW_LINE octant ( x , y , z ) NEW_LINE","import java . util . * ; class solution { static void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" ) ; else if ( x < 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" ) ; else if ( x >= 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" ) ; else if ( x < 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" ) ; } public static void main ( String args [ ] ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = - 4 ; y = 2 ; z = - 8 ; octant ( x , y , z ) ; x = - 6 ; y = - 2 ; z = 8 ; octant ( x , y , z ) ; } }","public class Octant { public static void main(String[] args) { int[][] points = {{2, 3, 4}, {-4, 2, -8}, {-6, -2, 8}, {-4, -1, -2}, {4, 1, 6}}; for (int i = 0; i < points.length; i++) { int[] point = points[i]; if (point[0] >= 0 && point[1] >= 0 && point[2] >= 0) { System.out.println(""Point ""+point+"" lies in the 1st octant""); } else if (point[0] < 0 && point[1] >= 0 && point[2] >= 0) { System.out.println(""Point ""+point+"" lies in the 2nd octant""); } else if (point[0] < 0 && point[1] < 0 && point[2] >= 0) { System.out.println(""Point ""+point+"" lies in the 3rd octant""); } else if (point[0] < 0 && point[1] < 0 && point[2] < 0) { System.out.println(""Point ""+point+"" lies in the 4th octant""); } else if (point[0] >= 0 && point[1] < 0 && point[2] < 0) { System.out.println(""Point ""+point+"" lies in the 5th octant""); } else if (point[0] >= 0 && point[1] < 0 && point[2] < 0) { System.out.println(""Point ""+point+"" lies in the 6th octant""); } else if (point[0] >= 0 && point[1] < 0 && point[2] < 0) { System.out.println(""Point ""+point+"" lies in the 7th octant""); } else if (point[0] >= 0 && point[1] < 0 && point[2] < 0) { System.out.println(""Point ""+point+"" lies in the 8th octant""); } else { System.err.println(""Invalid inputs for x, y and z.""); } } } }",17.241774082183838,0.5411255411255411,0.38912883067941956,0.19838896558681543,0.8750000000000001,0.4013722759107708
2090,Python,Java,def addOne ( x ) : NEW_LINE INDENT m = 1 ; NEW_LINE while ( x & m ) : NEW_LINE INDENT x = x ^ m NEW_LINE m <<= 1 NEW_LINE DEDENT x = x ^ m NEW_LINE return x NEW_LINE DEDENT n = 13 NEW_LINE print addOne ( n ) NEW_LINE,class GFG { static int addOne ( int x ) { int m = 1 ; while ( ( int ) ( x & m ) >= 1 ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } public static void main ( String [ ] args ) { System . out . println ( addOne ( 13 ) ) ; } },public class Main { public static int addOne(int x) { int m = 1; while (x & m) { x ^= m; m <<= 1; } return x; } public static void main(String[] args) { int n = 13; System.out.println(addOne(n)); } },2.946079969406128,0.7341169026819157,0.667229325694868,0.5676121710874713,1.0,0.6973285197612299
12740,Python,Java,"' NEW_LINE ' NEW_LINE def divisorSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += int ( n / i ) * i NEW_LINE DEDENT return int ( sum ) NEW_LINE DEDENT n = 4 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE n = 5 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE",import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } },"import java.io.*; public class DivisorSum { public static int sum = 0; public static void main(String[] args) throws IOException { int number = 4; System.out.println(""The sum of all divisors for "" + number + "" is: "" + divisorSum(number)); number++; System.out.println(""The sum of all divisors for "" + number + "" is: "" + divisorSum(number)); } public static int divisorSum(int n) { for (int i = 1; i <= n; i++) { sum += (n / i) * i; } return sum; } }",3.4407169818878174,0.608,0.5193047461316319,0.38233175824559834,1.0,0.5676322307719188
12813,Python,Java,"def SUM ( x , n ) : NEW_LINE INDENT total = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + ( ( x ** i ) / i ) NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE s = SUM ( x , n ) NEW_LINE print ( round ( s , 2 ) ) NEW_LINE","import static java . lang . Math . pow ; class GFG { static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public class Sum { public static double SUM (double x , int n ) { int total = 1; for (int i = 1; i < n + 1; i++) { total = total + (x * Math.pow(i, 1.0)); } return total; } public static void main (String[] args) { double s = SUM(2.0, 5); System.out.println(Math.round(s, 2)); } }",2.9013381004333496,0.6276935773597861,0.4982916604258046,0.3460970231616617,1.0,0.5422679162131632
12673,Python,Java,def AvgofSquareN ( n ) : NEW_LINE INDENT return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; NEW_LINE DEDENT n = 2 ; NEW_LINE print ( AvgofSquareN ( n ) ) ; NEW_LINE,import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },import java.util.*; public class AverageOfSquare { public static double avgOfSquare(int n){ return (n+1)*(2*n+1)/6; } public static void main(String[] args) { int n=2; System.out.println(avgOfSquare(n)); } },1.4321410655975342,0.5872912234828882,0.4894093529024069,0.38228679921011577,1.0,0.567600759447081
7057,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Knapsack { static int knapSack(int W, int[] wt, int[] val, int n) { if (n == 0 || W == 0) { return 0; } else if (wt[n - 1] > W) { return knapSack(W, wt, val, n - 1); } else { int result1 = val[n-1] + knapSack(W-wt[n-1], wt, val, n-1); int result2 = knapSack(W, wt, val, n-1); return Math.max(result1, result2); } } static void main(String[] args) { int[] val = {60, 100, 120}; int[] wt = {10, 20, 30}; int W = 50; System.out.println(knapSack(W, wt, val, val.length)); } }",5.739622354507446,0.7313444078687013,0.639312717243202,0.49133630082985613,0.9473684210526316,0.6281459368966887
2149,Python,Java,"def swap ( xp , yp ) : NEW_LINE INDENT xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE DEDENT x = [ 10 ] NEW_LINE swap ( x , x ) NEW_LINE print ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" , x [ 0 ] ) NEW_LINE","class GFG { static void swap ( int [ ] xp , int [ ] yp ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; } public static void main ( String [ ] args ) { int [ ] x = { 10 } ; swap ( x , x ) ; System . out . println ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" + x [ 0 ] ) ; } }","public class Swap { private static void swap(int[] xp, int[] yp) { int xSize = xp.length; int ySize = yp.length; if (xp != null && yp != null && xp.length == yp.length) { for (int i = 0; i < xSize; i++) { int temp = xp[i]; xp[i] = yp[i]; yp[i] = temp; } } else { throw new IllegalArgumentException(""Invalid input""); } } private static void print(int[] x) { for (int i = 0; i < x.length; i++) { System.out.print("" "" + x[i]); } System.out.println(); } public static void main(String[] args) { int[] x = {10}; print(""Before swap: "" + String.format(""%2d"", x[0])); swap(x, x); print(""After swap: "" + String.format(""%2d"", x[0])); } }",6.998086214065552,0.4474885844748858,0.37085158113256034,0.2873010743946003,0.6666666666666666,0.40111075207622016
8793,Python,Java,"def divideString ( string , n ) : NEW_LINE INDENT str_size = len ( string ) NEW_LINE if str_size % n != 0 : NEW_LINE INDENT print "" Invalid ▁ Input : ▁ String ▁ size ▁ is ▁ not ▁ divisible ▁ by ▁ n "" NEW_LINE return NEW_LINE DEDENT part_size = str_size / n NEW_LINE k = 0 NEW_LINE for i in string : NEW_LINE INDENT if k % part_size == 0 : NEW_LINE INDENT print   "" NEW_LINE DEDENT DEDENT DEDENT "" , NEW_LINE INDENT print i , NEW_LINE k += 1 NEW_LINE DEDENT string = "" a _ simple _ divide _ string _ quest "" NEW_LINE / * length od string is 28 * / NEW_LINE divideString ( string , 4 ) NEW_LINE","class GFG { static void divideString ( String str , int n ) { int str_size = str . length ( ) ; int part_size ; if ( str_size % n != 0 ) { System . out . println ( "" Invalid ▁ Input : ▁ String ▁ size "" + "" is ▁ not ▁ divisible ▁ by ▁ n "" ) ; return ; } part_size = str_size / n ; for ( int i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) System . out . println ( ) ; System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = "" a _ simple _ divide _ string _ quest "" ; divideString ( str , 4 ) ; } }","public static String divideString(String str, int n){ int stringSize = str.length(); if (stringSize % n != 0){ System.out.println(""Invalid input: String size is not divisible by n.""); return; } int partSize = stringSize / n; int k = 0; for (int i = 0; i < str.length(); i++) { if (k % partSize == 0) { System.out.println(""\nPart: "" + (k / partSize)); } System.out.print(str.charAt(i)); k++; } return str; }",3.4902751445770264,0.5371310625380489,0.4202218589675574,0.27604996094763934,0.8750000000000001,0.4557349726633475
2142,Python,Java,def swapBits ( x ) : NEW_LINE INDENT even_bits = x & 0xAAAAAAAA NEW_LINE odd_bits = x & 0x55555555 NEW_LINE even_bits >>= 1 NEW_LINE odd_bits <<= 1 NEW_LINE return ( even_bits odd_bits ) NEW_LINE DEDENT x = 23 NEW_LINE print ( swapBits ( x ) ) NEW_LINE,class GFG { static int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA ; int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } public static void main ( String [ ] args ) { int x = 23 ; System . out . println ( swapBits ( x ) ) ; } },public class SwapBits { public static int swapBits(int x) { int even_bits = x & 0xAAAAAAAA; int odd_bits = x & 0x555555555; even_bits >>= 1; odd_bits <<= 1; return (even_bits | odd_bits); } public static void main(String[] args) { int x = 23; System.out.println(swapBits(x)); } },4.484028339385986,0.9053212264615548,0.8698120123528006,0.817874494618186,1.0,0.8725121462327301
1683,Python,Java,"def equilibrium ( arr ) : NEW_LINE INDENT total_sum = sum ( arr ) NEW_LINE leftsum = 0 NEW_LINE for i , num in enumerate ( arr ) : NEW_LINE INDENT total_sum -= num NEW_LINE if leftsum == total_sum : NEW_LINE INDENT return i NEW_LINE DEDENT leftsum += num NEW_LINE DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( ' First ▁ equilibrium ▁ index ▁ is ▁ ' , equilibrium ( arr ) ) NEW_LINE","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( "" First ▁ equilibrium ▁ index ▁ is ▁ "" + equi . equilibrium ( arr , arr_size ) ) ; } }","public class Equilibrium { int balanceIndex = 0; int totalSum = 0, leftSum = 0; public static void main(String[] args) { int[] arr = {-7, 1, 5, 2, -4, 3, 0}; System.out.println(""First ▁ equilibrium ▁ index ▁ is ▁ "" + balanceIndex); } public static int equilibrium(int[] arr) { for (int i = 0; i < arr.length; i++) { totalSum -= arr[i]; if (leftSum == totalSum) { balanceIndex = i; break; } leftSum += arr[i]; } return balanceIndex; } }",5.940561294555664,0.5914226690450324,0.5075961967682208,0.3818395369743413,0.9473684210526316,0.5514982021978283
1862,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for x in range ( W + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT return K [ n ] [ W ] NEW_LINE DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print ( knapSack ( W , wt , val , n ) ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public static int[] knapSack(int W, int[][] wt, int[][] val, int n) { int[][] K = new int[n + 1][W + 1]; for (int i = 0; i <= n; i++) { for (int w = 0; w <= W; w++) { if (i == 0 || w == 0) { K[i][w] = 0; } else if (wt[i - 1] <= w) { K[i][w] = Math.max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]); } else { K[i][w] = K[i - 1][w]; } } } return K[n][W]; }",5.593933820724487,0.6017039055187529,0.567072000190942,0.4832572850913865,0.8421052631578948,0.590911678511339
2143,Python,Java,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( True if ( n > 0 and ( ( n & ( n - 1 ) ) > 0 ) ) else False ) ; NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if ( isPowerOfTwo ( n ) == True ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT i = 1 ; NEW_LINE pos = 1 ; NEW_LINE while ( ( i & n ) == 0 ) : NEW_LINE INDENT i = i << 1 ; NEW_LINE pos += 1 ; NEW_LINE DEDENT return pos ; NEW_LINE DEDENT n = 16 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 12 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 128 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT","class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }",boolean isPowerOfTwo(int n) { return (n > 0 && (n & (n - 1)) > 0); },1.88393235206604,3.795061734126192e-05,3.718810947642752e-05,3.340821079521229e-05,0.375,0.11252338574755663
1703,Python,Java,"def printRepeating ( arr , size ) : NEW_LINE INDENT count = [ 0 ] * size NEW_LINE print ( "" ▁ Repeating ▁ elements ▁ are ▁ "" , end = "" "" ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( count [ arr [ i ] ] == 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT count [ arr [ i ] ] = count [ arr [ i ] ] + 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int count [ ] = new int [ size ] ; int i ; System . out . println ( "" Repeated ▁ elements ▁ are ▁ : ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) System . out . print ( arr [ i ] + "" ▁ "" ) ; else count [ arr [ i ] ] ++ ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","public class PrintRepeating { public static void main(String[] args) { int[] arr = { 4, 2, 4, 5, 2, 3, 1 }; int size = arr.length; System.out.println("" ▁ Repeating ▁ elements ▁ are ▁ ""); for (int i = 0; i < size; i++) { int count[]; if (!(count = new int[size])) { System.err.println(""Size of the array must be a power of 2""); return; } boolean isRepeated = false; for (int j = 0; j < i; j++) { int k = arr[j]; if ((count[k] == 1) && !isRepeated) { isRepeated = true; } } if (isRepeated) { System.out.println(arr[i]); } else { count[arr[i]]++; } } } }",7.2362401485443115,0.6521739130434783,0.5600122185817005,0.4161394598287529,0.8333333333333333,0.541297621880127
7056,Python,Java,"INT_MAX = 32767 NEW_LINE def eggDrop ( n , k ) : NEW_LINE INDENT eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ 1 ] = 1 NEW_LINE eggFloor [ i ] [ 0 ] = 0 NEW_LINE DEDENT for j in range ( 1 , k + 1 ) : NEW_LINE INDENT eggFloor [ 1 ] [ j ] = j NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT for j in range ( 2 , k + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ j ] = INT_MAX NEW_LINE for x in range ( 1 , j + 1 ) : NEW_LINE INDENT res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) NEW_LINE if res < eggFloor [ i ] [ j ] : NEW_LINE INDENT eggFloor [ i ] [ j ] = res NEW_LINE DEDENT DEDENT DEDENT DEDENT return eggFloor [ n ] [ k ] NEW_LINE DEDENT n = 2 NEW_LINE k = 36 NEW_LINE print ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst ▁ case ▁ with "" + str ( n ) + "" eggs ▁ and ▁ "" + str ( k ) + "" ▁ floors ▁ is ▁ "" + str ( eggDrop ( n , k ) ) ) NEW_LINE","class EggDrop { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int eggDrop ( int n , int k ) { int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = Integer . MAX_VALUE ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } public static void main ( String args [ ] ) { int n = 2 , k = 10 ; System . out . println ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst "" + "" ▁ case ▁ with ▁ "" + n + "" ▁ eggs ▁ and ▁ "" + k + "" ▁ floors ▁ is ▁ "" + eggDrop ( n , k ) ) ; } }","public static int eggDrop(int n, int k) { int[][] eggFloor = new int[n + 1][k + 1]; for (int i = 1; i <= n; i++) { eggFloor[i][1] = 1; } for (int j = 1; j <= k; j++) { for (int i = 2; i <= n; i++) { eggFloor[i][j] = Integer.MAX_VALUE; for (int x = 1; x <= j; x++) { int res = 1 + Math.max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]); if (res < eggFloor[i][j]) { eggFloor[i][j] = res; } } } } return eggFloor[n][k]; }",7.063745021820068,0.4295519188519358,0.40916700250523813,0.3587991055977219,0.8235294117647058,0.49821819744781703
13544,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a / gcd ( a , b ) ) * b NEW_LINE DEDENT a = 15 NEW_LINE b = 20 NEW_LINE print ( ' LCM ▁ of ' , a , ' and ' , b , ' is ' , lcm ( a , b ) ) NEW_LINE","class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "" LCM ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + lcm ( a , b ) ) ; } }","public class GCD { static int gcd(int a, int b) { if (a == 0) { return b; } else { return gcd(b % a, a); } } static int lcm(int a, int b) { return (a / gcd(a, b)) * b; } public static void main(String[] args) { int a = 15; int b = 20; System.out.println(""LCM ▁ of "" + a + "", "" + b + "" is "" + lcm(a, b)); } }",4.48537540435791,0.8990297817387924,0.855227668040528,0.7777351787643214,0.9411764705882353,0.8267675663114955
1610,Python,Java,"NA = - 1 NEW_LINE def moveToEnd ( mPlusN , size ) : NEW_LINE INDENT i = 0 NEW_LINE j = size - 1 NEW_LINE for i in range ( size - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( mPlusN [ i ] != NA ) : NEW_LINE INDENT mPlusN [ j ] = mPlusN [ i ] NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def merge ( mPlusN , N , m , n ) : NEW_LINE INDENT i = n NEW_LINE j = 0 NEW_LINE k = 0 NEW_LINE while ( k < ( m + n ) ) : NEW_LINE INDENT if ( ( j == n ) or ( i < ( m + n ) and mPlusN [ i ] <= N [ j ] ) ) : NEW_LINE INDENT mPlusN [ k ] = mPlusN [ i ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mPlusN [ k ] = N [ j ] NEW_LINE k += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , "" ▁ "" , end = "" "" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT mPlusN = [ 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 ] NEW_LINE N = [ 5 , 7 , 9 , 25 ] NEW_LINE n = len ( N ) NEW_LINE m = len ( mPlusN ) - n NEW_LINE moveToEnd ( mPlusN , m + n ) NEW_LINE merge ( mPlusN , N , m , n ) NEW_LINE printArray ( mPlusN , m + n ) NEW_LINE","class MergeArrays { void moveToEnd ( int mPlusN [ ] , int size ) { int i , j = size - 1 ; for ( i = size - 1 ; i >= 0 ; i -- ) { if ( mPlusN [ i ] != - 1 ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } } void merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) || ( j == n ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { MergeArrays mergearray = new MergeArrays ( ) ; int mPlusN [ ] = { 2 , 8 , - 1 , - 1 , - 1 , 13 , - 1 , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = N . length ; int m = mPlusN . length - n ; mergearray . moveToEnd ( mPlusN , m + n ) ; mergearray . merge ( mPlusN , N , m , n ) ; mergearray . printArray ( mPlusN , m + n ) ; } }","NA = -1; public void moveToEnd(int[] mPlusN, int size) { for (int i = size - 1; i >= 0; i--) { if (mPlusN[i] != -1) { mPlusN[size - 1] = mPlusN[i]; size--; break; } } } public void merge(int[] mPlusN, int[] N, int m, int n) { int i = 0; int j = m + n - 1; for (int k = 0; k < m + n; k++) { if (j == m or i < m && mPlusN[i] <= N[j]) { mPlusN[k] = mPlusN[i]; i++; } else { mPlusN[k] = N[j--]; } } } public void printArray(int[] arr, int size) { for (int i = 0; i < size; i++) { System.out.print(arr[i] + "" ▁""); } System.out.println(); }",5.8673670291900635,0.47874485321959914,0.4327145971869771,0.3254069450793739,0.7058823529411764,0.4395495674379146
11743,Python,Java,"from math import pow NEW_LINE def nthTermOfTheSeries ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT nthTerm = pow ( n - 1 , 2 ) + n NEW_LINE DEDENT else : NEW_LINE INDENT nthTerm = pow ( n + 1 , 2 ) + n NEW_LINE DEDENT return nthTerm NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 8 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 12 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 102 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 9999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE DEDENT","import java . lang . Math ; class GFG { static long nthTermOfTheSeries ( int n ) { long nthTerm ; if ( n % 2 == 0 ) nthTerm = ( long ) Math . pow ( n - 1 , 2 ) + n ; else nthTerm = ( long ) Math . pow ( n + 1 , 2 ) + n ; return nthTerm ; } public static void main ( String [ ] args ) { int n ; n = 8 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 12 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 102 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 9999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; } }","public class Main { public static void main(String[] args) { System.out.println(nthTermOfTheSeries(8)); System.out.println(nthTermOfTheSeries(12)); System.out.println(nthTermOfTheSeries(102)); System.out.println(nthTermOfTheSeries(9999)); } public static int nthTermOfTheSeries(int n) { if (n % 2 == 0) { return pow(n - 1, 2) + n; } else { return pow(n + 1, 2) + n; } } public static int pow(int a, int b) { if (b == 0) { return 1; } else { return a * pow(a, b - 1); } } }",5.437047004699707,0.5416605143797757,0.44990210375126416,0.3343144970289799,1.0,0.534020147920286
13474,Python,Java,"def countSquares ( m , n ) : NEW_LINE INDENT if ( n < m ) : NEW_LINE INDENT temp = m NEW_LINE m = n NEW_LINE n = temp NEW_LINE DEDENT return ( ( m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = 4 NEW_LINE n = 3 NEW_LINE print ( "" Count ▁ of ▁ squares ▁ is ▁ "" , countSquares ( m , n ) ) NEW_LINE DEDENT","class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } public static void main ( String [ ] args ) { int m = 4 , n = 3 ; System . out . println ( "" Count ▁ of ▁ squares ▁ is ▁ "" + countSquares ( m , n ) ) ; } }","public class CountSquares { public static int countSquares(int m, int n) { if (n < m) { int temp = m; m = n; n = temp; } return (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2); } public static void main(String[] args) { if (__name__ == ""__main__"") { int m = 4; int n = 3; System.out.println("" Count ▁ of ▁ squares ▁ is ▁ ""); System.out.print(countSquares(m, n)); } } }",4.759314060211182,0.8333333333333334,0.8055153392903583,0.7582614059335835,1.0,0.8307829841535084
13562,Python,Java,"def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) ; NEW_LINE DEDENT print ( "" "" ) ; NEW_LINE return ; NEW_LINE DEDENT def printSequencesRecur ( arr , n , k , index ) : NEW_LINE INDENT if ( k == 0 ) : NEW_LINE INDENT printArray ( arr , index ) ; NEW_LINE DEDENT if ( k > 0 ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ index ] = i ; NEW_LINE printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; NEW_LINE DEDENT DEDENT DEDENT def printSequences ( n , k ) : NEW_LINE INDENT arr = [ 0 ] * n ; NEW_LINE printSequencesRecur ( arr , n , k , 0 ) ; NEW_LINE return ; NEW_LINE DEDENT n = 3 ; NEW_LINE k = 2 ; NEW_LINE printSequences ( n , k ) ; NEW_LINE","class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }","public class PrintArray { public static void main(String[] args) { int arr[]; int size = 3; printArr(arr, size); } private static void printArr(int arr[], int size) { for (int i = 0; i < size; i++) { System.out.print(""▁"" + arr[i]); } System.out.println(); } public static void printSequencesRecur(int arr[], int n, int k, int index) { if (k == 0) { printArr(arr, index); } else { for (int i = 1; i <= n; i++) { arr[index] = i; printSequencesRecur(arr, n, k - 1, index + 1); } } } public static void printSequences(int n, int k) { int arr[] = new int[n]; printSequencesRecur(arr, n, k, 0); } public static void main(String[] args) { int n = 3; int k = 2; printSequences(n, k); } }",8.987029075622559,0.8190045248868778,0.7717769460557784,0.6888553238473692,0.8571428571428572,0.7393415838360156
1955,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","public class Search { public static void main(String[] args) { String text = ""ABCEABCDABCEABCD""; String pattern = ""ABCD""; int i = 0; while (i < text.length() - pattern.length()) { for (int j = 0; j < pattern.length(); j++) { if (text.charAt(i + j) != pattern.charAt(j)) { break; } } if (j == pattern.length()) { System.out.println(""Pattern ""+pattern+"" found at index ""+i); } else if (j == 0) { i = i + 1; } else { i = i + j; } } } }",6.581078052520752,0.6145794530120556,0.5137933612929277,0.3647350143234368,1.0,0.5553145100264057
2018,Python,Java,"def fact ( n ) : NEW_LINE INDENT f = 1 NEW_LINE while n >= 1 : NEW_LINE INDENT f = f * n NEW_LINE n = n - 1 NEW_LINE DEDENT return f NEW_LINE DEDENT def findSmallerInRight ( st , low , high ) : NEW_LINE INDENT countRight = 0 NEW_LINE i = low + 1 NEW_LINE while i <= high : NEW_LINE INDENT if st [ i ] < st [ low ] : NEW_LINE INDENT countRight = countRight + 1 NEW_LINE DEDENT i = i + 1 NEW_LINE DEDENT return countRight NEW_LINE DEDENT def findRank ( st ) : NEW_LINE INDENT ln = len ( st ) NEW_LINE mul = fact ( ln ) NEW_LINE rank = 1 NEW_LINE i = 0 NEW_LINE while i < ln : NEW_LINE INDENT mul = mul / ( ln - i ) NEW_LINE countRight = findSmallerInRight ( st , i , ln - 1 ) NEW_LINE rank = rank + countRight * mul NEW_LINE i = i + 1 NEW_LINE DEDENT return rank NEW_LINE DEDENT st = "" string "" NEW_LINE print ( findRank ( st ) ) NEW_LINE","import java . io . * ; import java . util . * ; class GFG { static int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } static int findSmallerInRight ( String str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str . charAt ( i ) < str . charAt ( low ) ) ++ countRight ; return countRight ; } static int findRank ( String str ) { int len = str . length ( ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; for ( int i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } public static void main ( String [ ] args ) { String str = "" string "" ; System . out . println ( findRank ( str ) ) ; } }","public class Main { public static int fact(int n) { int f = 1; for (int i = n; i >= 1; i--) { f = f * i; } return f; } public static int findSmallerInRight(String st, int low, int high) { int countRight = 0; for (int i = low + 1; i <= high; i++) { if (st.charAt(i) < st.charAt(low)) { countRight++; } } return countRight; } public static int findRank(String st) { int ln = st.length(); int mul = fact(ln); int rank = 1; for (int i = 0; i < ln; i++) { mul /= (ln - i); rank += findSmallerInRight(st, i, ln - 1) * mul; } return rank; } public static void main(String[] args) { String st = ""string""; System.out.println(findRank(st)); }}",8.392451047897339,0.7473514159979184,0.6331964916229228,0.4748860985068092,1.0,0.6324202689547664
1656,Python,Java,"def findElement ( arr , n , key ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == key ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 12 , 34 , 10 , 6 , 40 ] NEW_LINE n = len ( arr ) NEW_LINE key = 40 NEW_LINE index = findElement ( arr , n , key ) NEW_LINE if index != - 1 : NEW_LINE INDENT print ( "" element ▁ found ▁ at ▁ position : ▁ "" + str ( index + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" element ▁ not ▁ found "" ) NEW_LINE DEDENT","class Main { static int findElement ( int arr [ ] , int n , int key ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = arr . length ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) System . out . println ( "" Element ▁ not ▁ found "" ) ; else System . out . println ( "" Element ▁ Found ▁ at ▁ Position : ▁ "" + ( position + 1 ) ) ; } }","public int findElement(int[] arr, int n, int key){ for(int i = 0; i < n; i++){ if(arr[i] == key){ return i; } } return -1; }",1.536850929260254,0.11721874050210239,0.10508153423238652,0.08371791107710858,0.6666666666666666,0.25860253775397596
12321,Python,Java,"import math NEW_LINE def distance ( x1 , y1 , z1 , x2 , y2 , z2 ) : NEW_LINE INDENT d = math . sqrt ( math . pow ( x2 - x1 , 2 ) + math . pow ( y2 - y1 , 2 ) + math . pow ( z2 - z1 , 2 ) * 1.0 ) NEW_LINE print ( "" Distance ▁ is ▁ "" ) NEW_LINE print ( d ) NEW_LINE DEDENT x1 = 2 NEW_LINE y1 = - 5 NEW_LINE z1 = 7 NEW_LINE x2 = 3 NEW_LINE y2 = 4 NEW_LINE z2 = 5 NEW_LINE distance ( x1 , y1 , z1 , x2 , y2 , z2 ) NEW_LINE","import java . io . * ; import java . lang . Math ; class GFG { static void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { double d = Math . pow ( ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) + Math . pow ( z2 - z1 , 2 ) * 1.0 ) , 0.5 ) ; System . out . println ( "" Distance ▁ is ▁ "" + d ) ; return ; } public static void main ( String [ ] args ) { float x1 = 2 ; float y1 = - 5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; } }","public class Distance { static double distance(double x1, double y1, double z1, double x2, double y2, double z2) { double d = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1)); return d; } public static void printDistance(double d) { System.out.println("" Distance ▁ is ▁ ""); System.out.println(d); } public static void main(String[] args) { double x1 = 2; double y1 = -5; double z1 = 7; double x2 = 3; double y2 = 4; double z2 = 5; printDistance(distance(x1, y1, z1, x2, y2, z2)); } }",5.058578968048096,0.6783165717825363,0.575093459175713,0.3939763776363787,1.0,0.5757834643454651
2133,Python,Java,import math NEW_LINE def getFirstSetBitPos ( n ) : NEW_LINE INDENT return math . log2 ( n & - n ) + 1 NEW_LINE DEDENT n = 12 NEW_LINE print ( int ( getFirstSetBitPos ( n ) ) ) NEW_LINE,class GFG { public static int getFirstSetBitPos ( int n ) { return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log10 ( 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( getFirstSetBitPos ( n ) ) ; } },import java.lang.Math; public class GetFirstSetBitPos { private static int getFirstSetBitPos(int n) { return Math.log2(n & (n - 1)) + 1; } public static void main(String[] args) { System.out.println(getFirstSetBitPos(12)); } },1.6052968502044678,0.6121762333304379,0.5293510290597429,0.42939859428511373,0.9333333333333333,0.5805790159995796
2190,Python,Java,"def maxDiff ( arr , arr_size ) : NEW_LINE INDENT max_diff = arr [ 1 ] - arr [ 0 ] NEW_LINE for i in range ( 0 , arr_size ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size ) : NEW_LINE INDENT if ( arr [ j ] - arr [ i ] > max_diff ) : NEW_LINE INDENT max_diff = arr [ j ] - arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return max_diff NEW_LINE DEDENT arr = [ 1 , 2 , 90 , 10 , 110 ] NEW_LINE size = len ( arr ) NEW_LINE print ( "" Maximum ▁ difference ▁ is "" , maxDiff ( arr , size ) ) NEW_LINE","class MaximumDiffrence { int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int i , j ; for ( i = 0 ; i < arr_size ; i ++ ) { for ( j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } public static void main ( String [ ] args ) { MaximumDifference maxdif = new MaximumDifference ( ) ; int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; System . out . println ( "" Maximum ▁ difference ▁ is ▁ "" + maxdif . maxDiff ( arr , 5 ) ) ; } }","public static int maxDiff(int[] arr, int arrSize) { int maxDiff = arr[1] - arr[0]; for (int i = 0; i < arrSize; i++) { for (int j = i + 1; j < arrSize; j++) { if (arr[j] - arr[i] > maxDiff) { maxDiff = arr[j] - arr[i]; } } } return maxDiff; }",2.7620601654052734,0.436798785508752,0.3916641174326432,0.30592835874683544,0.7499999999999999,0.4391498511227847
1715,Python,Java,"def find3Numbers ( A , arr_size , sum ) : NEW_LINE INDENT for i in range ( 0 , arr_size - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , arr_size ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] == sum : NEW_LINE INDENT print ( "" Triplet ▁ is "" , A [ i ] , "" , ▁ "" , A [ j ] , "" , ▁ "" , A [ k ] ) NEW_LINE return True NEW_LINE DEDENT DEDENT DEDENT DEDENT return False NEW_LINE DEDENT A = [ 1 , 4 , 45 , 6 , 10 , 8 ] NEW_LINE sum = 22 NEW_LINE arr_size = len ( A ) NEW_LINE find3Numbers ( A , arr_size , sum ) NEW_LINE","class FindTriplet { boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { System . out . print ( "" Triplet ▁ is ▁ "" + A [ i ] + "" , ▁ "" + A [ j ] + "" , ▁ "" + A [ k ] ) ; return true ; } } } } return false ; } public static void main ( String [ ] args ) { FindTriplet triplet = new FindTriplet ( ) ; int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = A . length ; triplet . find3Numbers ( A , arr_size , sum ) ; } }","public class FindThreeNumbers { public static void main(String[] args) { int[] a = {1, 4, 45, 6, 10, 8}; int sum = 22; find3Numbers(a, sum); } public static void find3Numbers(int[] a, int sum) { for (int i = 0; i < a.length - 2; i++) { for (int j = i + 1; j < a.length - 1; j++) { for (int k = j + 1; k < a.length; k++) { if (a[i] + a[j] + a[k] == sum) { System.out.println(""Triplet is: "" + a[i] + "", "" + a[j] + "", "" + a[k]); } } } } return; } }",5.782684803009033,0.6977185557579204,0.6305992045891518,0.505934128819258,0.8181818181818181,0.599608435628026
12963,Python,Java,"def countDigit ( n ) : NEW_LINE INDENT if n / 10 == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 1 + countDigit ( n // 10 ) NEW_LINE DEDENT n = 345289467 NEW_LINE print ( "" Number ▁ of ▁ digits ▁ : ▁ % ▁ d "" % ( countDigit ( n ) ) ) NEW_LINE","import java . util . * ; class GFG { static int countDigit ( long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "" Number ▁ of ▁ digits ▁ : ▁ "" + countDigit ( n ) ) ; } }","public class CountDigits { public static int countDigit(int n) { if (n / 10 == 0) { return 1; } else { int result = 1 + countDigit(n / 10); return result; } } public static void main(String[] args) { int n = 345289467; System.out.println(""Number of digits: "" + countDigit(n)); } }",2.817754030227661,0.7772170385241693,0.6968815698272204,0.5637174141034276,0.9411764705882353,0.6769551310488698
1788,Python,Java,"def binarySearch ( arr , l , r , x ) : NEW_LINE INDENT if r >= l : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE if arr [ mid ] == x : NEW_LINE INDENT return mid NEW_LINE DEDENT elif arr [ mid ] > x : NEW_LINE INDENT return binarySearch ( arr , l , mid - 1 , x ) NEW_LINE DEDENT else : NEW_LINE INDENT return binarySearch ( arr , mid + 1 , r , x ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT arr = [ 2 , 3 , 4 , 10 , 40 ] NEW_LINE x = 10 NEW_LINE result = binarySearch ( arr , 0 , len ( arr ) - 1 , x ) NEW_LINE if result != - 1 : NEW_LINE INDENT print ( "" Element ▁ is ▁ present ▁ at ▁ index ▁ % ▁ d "" % result ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" ) NEW_LINE DEDENT","class BinarySearch { int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , 0 , n - 1 , x ) ; if ( result == - 1 ) System . out . println ( "" Element ▁ not ▁ present "" ) ; else System . out . println ( "" Element ▁ found ▁ at ▁ index ▁ "" + result ) ; } }","public int binarySearch(int[] arr, int l, int r, int x){ if (r >= l){ int mid = l + (r - l) / 2; if (arr[mid] == x) { return mid; } else if (arr[mid] > x) { return binarySearch(arr, l, mid - 1, x); } else { return binarySearch(arr, mid + 1, r, x); } } else { return -1; } }",3.3748772144317627,0.35709888558545677,0.3327481889218424,0.29689512652689165,0.6666666666666666,0.40782658856882414
9263,Python,Java,PI = 3.14159265 NEW_LINE def area_cicumscribed ( c ) : NEW_LINE INDENT return ( c * c * ( PI / 4 ) ) NEW_LINE DEDENT c = 8.0 NEW_LINE print ( area_cicumscribed ( c ) ) NEW_LINE,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double c = 8.0 ; System . out . println ( area_cicumscribed ( c ) ) ; } },public class AreaC circumscribed { public static double pi; public static void main(String[] args) { double c = 8.0; double area = (c * c * (pi / 4)),1.3245949745178223,0.41167588361205804,0.36458629054471037,0.3017796758148582,0.9090909090909091,0.4839730457976734
12672,Python,Java,"def AvgofSquareN ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum / n NEW_LINE DEDENT n = 2 NEW_LINE print ( AvgofSquareN ( n ) ) NEW_LINE",import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },"public class AverageOfSquare { public static double avgOfSquare(int n) { int sum = 0; for (int i = 1; i <= n; i++) { sum += (i * i); } return (double) sum / n; } public static void main(String[] args) { int n = 2; System.out.println(""The average of the square of "" + n + "" is: "" + avgOfSquare(n)); } }",2.5858190059661865,0.6881720430107527,0.6176460766627035,0.5217547517908504,1.0,0.6652283262535952
2304,Python,Java,"def printTwoElements ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT if arr [ abs ( arr [ i ] ) - 1 ] > 0 : NEW_LINE INDENT arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ repeating ▁ element ▁ is "" , abs ( arr [ i ] ) ) NEW_LINE DEDENT DEDENT for i in range ( size ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT print ( "" and ▁ the ▁ missing ▁ element ▁ is "" , i + 1 ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 7 , 3 , 4 , 5 , 5 , 6 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE printTwoElements ( arr , n ) NEW_LINE","import java . io . * ; class GFG { static void printTwoElements ( int arr [ ] , int size ) { int i ; System . out . print ( "" The ▁ repeating ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { int abs_val = Math . abs ( arr [ i ] ) ; if ( arr [ abs_val - 1 ] > 0 ) arr [ abs_val - 1 ] = - arr [ abs_val - 1 ] ; else System . out . println ( abs_val ) ; } System . out . print ( "" And ▁ the ▁ missing ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) System . out . println ( i + 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = arr . length ; printTwoElements ( arr , n ) ; } }","public class PrintTwoElements { public static void main(String[] args) { int[] arr = {7, 3, 4, 5, 5, 6, 2}; printTwoElements(arr, 7); } public static void printTwoElements(int[] arr, int size) { for (int i = 0; i < size; i++) { if (arr[abs(arr[i] - 1)] > 0) { arr[abs(arr[i] - 1)] = -arr[abs(arr[i] - 1)]; } else { System.out.println("" The ▁ repeating ▁ element ▁ is "" + abs(arr[i])); } if (arr[i] > 0) { System.out.println("" and ▁ the ▁ missing ▁ element ▁ is "" + i + 1); } } Arrays.sort(arr); } }",5.43470311164856,0.6969036914150122,0.601180851388615,0.45195915745694065,1.0,0.6163714102198584
2148,Python,Java,"x = 10 NEW_LINE y = 5 NEW_LINE x = x ^ y ; NEW_LINE y = x ^ y ; NEW_LINE x = x ^ y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = ▁ "" , x , "" ▁ y ▁ = "" , y ) NEW_LINE","import java . io . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( "" After ▁ swap : ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","public class TranslateCode { public static void main(String[] args) { int x = 10; int y = 5; x = Math.pow(x, y); y = Math.pow(x, y); x = Math.pow(x, y); System.out.println(""After swapping: "" + ""X = "" + x + "", Y = "" + y); } }",1.8091728687286377,0.6766638651616924,0.5560697808869887,0.41504718152661596,1.0,0.5905330270686311
9291,Python,Java,"def area ( r ) : NEW_LINE INDENT return ( 0.5 ) * ( 3.14 ) * ( r * r ) NEW_LINE DEDENT def perimeter ( r ) : NEW_LINE INDENT return ( 3.14 ) * ( r ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT r = 10 NEW_LINE print ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" , area ( r ) ) NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" , perimeter ( r ) ) NEW_LINE DEDENT","import java . io . * ; class GFG { static float area ( float r ) { return ( float ) ( ( 0.5 ) * ( 3.14 ) * ( r * r ) ) ; } static float perimeter ( float r ) { return ( float ) ( ( 3.14 ) * ( r ) ) ; } public static void main ( String [ ] args ) { float r = 10 ; System . out . println ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" + area ( r ) ) ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Semicircle : "" + + perimeter ( r ) ) ; } }","public class AreaAndPerimeter { public static double area(double radius){ return 0.5 * Math.PI * radius * radius; } public static double perimeter(double radius){ return 3.14 * radius; } /** * @param args */ public static void main(String[] args) { if (__name__ == ""__main__""){ double r = 10; System.out.println("" The Area and Perimeter of a Semicircle with Radius "" + r); System.out.println(""The Area is: "" + area(r)); System.out.println(""The Perimeter is: "" + perimeter(r)); }else{ import AreaAndPerimeter; } }",3.593935966491699,0.6093562082086108,0.46467229943970517,0.3036536940570905,0.8571428571428571,0.46970044298282043
2076,Python,Java,"def swapBits ( x , p1 , p2 , n ) : NEW_LINE INDENT set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) NEW_LINE set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) NEW_LINE xor = ( set1 ^ set2 ) NEW_LINE xor = ( xor << p1 ) | ( xor << p2 ) NEW_LINE result = x ^ xor NEW_LINE return result NEW_LINE DEDENT res = swapBits ( 28 , 0 , 3 , 2 ) NEW_LINE print ( "" Result ▁ = "" , res ) NEW_LINE","class GFG { static int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; int result = x ^ xor ; return result ; } public static void main ( String [ ] args ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; System . out . println ( "" Result ▁ = ▁ "" + res ) ; } }","public class SwapBits { public static int swapBits(int x, int p1, int p2, int n) { int set1 = (x >> p1) & (((1 << n) - 1)); int set2 = (x >> p2) & (((1 << n) - 1)); int xor = (set1 ^ set2); xor = (xor << p1) | (xor << p2); return x ^ xor; } public static void main(String[] args) { int res = swapBits(28, 0, 3, 2); System.out.println(""Result ▁: "" + res); } }",4.586246967315674,0.9074219317163376,0.889149997372424,0.8381299231331072,1.0,0.8866909461931749
12300,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 and b == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a == b ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a > b ) : NEW_LINE INDENT return gcd ( a - b , b ) NEW_LINE DEDENT return gcd ( a , b - a ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","class Test { static int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public class GCD { public static int gcd(int a, int b) { if (a == 0 && b == 0) { return 0; } else if (a == 0) { return b; } else if (b == 0) { return a; } else if (a == b) { return a; } else if (a > b) { return gcd(a - b, b); } else { return gcd(a, b - a); } } public static void main(String[] args) { int a = 98; int b = 56; if (gcd(a, b)) { System.out.println("" GCD ▁ of "" + a + "", "" + b + "" is "" + gcd(a, b)); } else { System.out.println("" not ▁ found""); } } }",6.204406976699829,0.7428571428571429,0.6883978686891495,0.5773141125119003,0.9411764705882353,0.6864728199348008
2311,Python,Java,"def findFourElements ( A , n , X ) : NEW_LINE INDENT for i in range ( 0 , n - 3 ) : NEW_LINE INDENT for j in range ( i + 1 , n - 2 ) : NEW_LINE INDENT for k in range ( j + 1 , n - 1 ) : NEW_LINE INDENT for l in range ( k + 1 , n ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] + A [ l ] == X : NEW_LINE INDENT print ( "" % d , ▁ % d , ▁ % d , ▁ % d "" % ( A [ i ] , A [ j ] , A [ k ] , A [ l ] ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT A = [ 10 , 2 , 3 , 4 , 5 , 9 , 7 , 8 ] NEW_LINE n = len ( A ) NEW_LINE X = 23 NEW_LINE findFourElements ( A , n , X ) NEW_LINE","class FindFourElements { void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) { if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) System . out . print ( A [ i ] + "" ▁ "" + A [ j ] + "" ▁ "" + A [ k ] + "" ▁ "" + A [ l ] ) ; } } } } } public static void main ( String [ ] args ) { FindFourElements findfour = new FindFourElements ( ) ; int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = A . length ; int X = 91 ; findfour . findFourElements ( A , n , X ) ; } }","public static void findFourElements (int[] a, int n, int x) { for (int i = 0; i < n - 3; i++) { for (int j = i + 1; j < n - 2; j++) { for (int k = j + 1; k < n - 1; k++) { for (int l = k + 1; l < n; l++) { if (a[i] + a[j] + a[k] + a[l] == x) { System.out.println(a[i] + "", "" + a[j] + "", "" + a[k] + "", "" + a[l]); } } } } } }",4.752232789993286,0.5623779100191646,0.5116414283629045,0.4179600651509682,0.8,0.5325720456056777
836,Python,Java,"def Identity ( size ) : NEW_LINE INDENT for row in range ( 0 , size ) : NEW_LINE INDENT for col in range ( 0 , size ) : NEW_LINE INDENT if ( row == col ) : NEW_LINE INDENT print ( ""1 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ""0 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT size = 5 NEW_LINE Identity ( size ) NEW_LINE","class GFG { static int identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) System . out . print ( 1 + "" ▁ "" ) ; else System . out . print ( 0 + "" ▁ "" ) ; } System . out . println ( ) ; } return 0 ; } public static void main ( String args [ ] ) { int size = 5 ; identity ( size ) ; } }","public class Identity { public static void main(String[] args) { int size = 5; for (int row = 0; row < size; row++) { for (int col = 0; col < size; col++) { if (row == col) { System.out.print(""1 ▁ ""); } else { System.out.print(""0 ▁ ""); } } System.out.println(); } } }",3.754901885986328,0.6053943939267256,0.49900755962087934,0.35166281330336124,0.9473684210526316,0.5303744956281423
7322,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","public class Search { public static void main(String[] args) { int index = 0; String text = ""ABCEABCDABCEABCD""; String pat = ""ABCD""; for (int i = 0; i <= text.length() - pat.length(); i++) { int j = 0; while ((j < pat.length()) && (text.charAt(i + j) == pat.charAt(j))) { j++; } if (j == 0) { index = i; } else { index += j; } } System.out.println(""Pattern ▁ found ▁ at ▁ index ▁ ""); System.out.println(index); } }",5.1007606983184814,0.5914884309824179,0.49988015213212666,0.34480749798309357,1.0,0.5413652485881655
747,Python,Java,"def printSorted ( arr , start , end ) : NEW_LINE INDENT if start > end : NEW_LINE INDENT return NEW_LINE DEDENT printSorted ( arr , start * 2 + 1 , end ) NEW_LINE print ( arr [ start ] , end = "" ▁ "" ) NEW_LINE printSorted ( arr , start * 2 + 2 , end ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 2 , 5 , 1 , 3 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printSorted ( arr , 0 , arr_size - 1 ) NEW_LINE DEDENT","class GFG { private static void printSorted ( int [ ] arr , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; System . out . print ( arr [ start ] + "" ▁ "" ) ; printSorted ( arr , start * 2 + 2 , end ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; printSorted ( arr , 0 , arr . length - 1 ) ; } }","public static void printSorted(int[] arr, int start, int end) { if (start > end) { return; } printSorted(arr, start * 2 + 1, end); System.out.println(""\n"" + arr[start]); printSorted(arr, start * 2 + 2, end); } public static void main(String[] args) { int[] arr = { 4, 2, 5, 1, 3 }; System.out.println(); printSorted(arr, 0, arr.length - 1); }",2.6510801315307617,0.8853931588676106,0.8255021240104844,0.7423337204112802,0.8750000000000001,0.7821336042878961
13565,Python,Java,"MAX = 11 ; NEW_LINE def isMultipleof5 ( n ) : NEW_LINE INDENT s = str ( n ) ; NEW_LINE l = len ( s ) ; NEW_LINE if ( s [ l - 1 ] == '5' or s [ l - 1 ] == '0' ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT return False ; NEW_LINE DEDENT n = 19 ; NEW_LINE if ( isMultipleof5 ( n ) == True ) : NEW_LINE INDENT print ( n , "" is ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( n , "" is ▁ not ▁ a ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT","class GFG { static int MAX = 11 ; static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . println ( n + "" ▁ is ▁ multiple ▁ "" + "" of ▁ 5"" ) ; else System . out . println ( n + "" ▁ is ▁ not ▁ a ▁ "" + "" multiple ▁ of ▁ 5"" ) ; } }","import java.util.*; public class Program { int max = 11; public static boolean isMultipleof5(int n) { String s = String.valueOf(n); int l = s.length(); if (s.charAt(l - 1) == '5' || s.charAt(l - 1) == '0') { return true; } else { return false; } } public static void main(String[] args) { int n = 19; if (isMultipleof5(n) == true) { System.out.println(n + "" is a multiple of 5""); } else { System.out.println(n + "" is not a multiple of 5""); } } }",4.444681406021118,0.6555751638747023,0.547210092336729,0.4117512509862694,0.9600000000000001,0.5762258756903886
1701,Python,Java,"def findPeakUtil ( arr , low , high , n ) : NEW_LINE INDENT mid = low + ( high - low ) / 2 NEW_LINE mid = int ( mid ) NEW_LINE if ( ( mid == 0 or arr [ mid - 1 ] <= arr [ mid ] ) and ( mid == n - 1 or arr [ mid + 1 ] <= arr [ mid ] ) ) : NEW_LINE INDENT return mid NEW_LINE DEDENT elif ( mid > 0 and arr [ mid - 1 ] > arr [ mid ] ) : NEW_LINE INDENT return findPeakUtil ( arr , low , ( mid - 1 ) , n ) NEW_LINE DEDENT else : NEW_LINE INDENT return findPeakUtil ( arr , ( mid + 1 ) , high , n ) NEW_LINE DEDENT DEDENT def findPeak ( arr , n ) : NEW_LINE INDENT return findPeakUtil ( arr , 0 , n - 1 , n ) NEW_LINE DEDENT arr = [ 1 , 3 , 20 , 4 , 1 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is "" , findPeak ( arr , n ) ) NEW_LINE","import java . util . * ; import java . lang . * ; import java . io . * ; class PeakElement { static int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } static int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = arr . length ; System . out . println ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" + findPeak ( arr , n ) ) ; } }","public static int findPeekUtil(int arr[], int low, int high, int n) { int mid = (low + high) / 2; mid = (int) Math.round(mid); if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) { return mid; } else if (arr[mid - 1] > arr[mid]) { return findPeakUtil(arr, low, (mid - 1), n); } else { return findPeakUtil(arr, (mid + 1), high, n); } } public static int findPeak(int arr[], int n) { return findPeekUtil(arr, 0, n - 1, n); } int[] arr = new int[]{1, 3, 20, 4, 1, 0}; int n = arr.length; System.out.println(""Index of peak point is: "" + findPeak(arr, n)); ",5.7457427978515625,0.792179962922992,0.7277159205140638,0.6361070641963418,0.75,0.6702749449374392
2147,Python,Java,"x = 10 NEW_LINE y = 5 NEW_LINE x = x * y NEW_LINE y = x // y ; NEW_LINE x = x // y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = "" , x , "" ▁ y ▁ = "" , y ) ; NEW_LINE","import java . io . * ; class GFG { public static void main ( String [ ] args ) { int x = 10 ; int y = 5 ; x = x * y ; y = x / y ; x = x / y ; System . out . println ( "" After ▁ swaping : "" + "" ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","Here is the translated code from Python to Java without any comments in the translated code: int x = 10; int y = 5; x = x * y; y = x / y; x = x / y; System.out.println("" After swapping, x is "" + x + "" and y is "" + y);",1.4401121139526367,0.5035750328991805,0.4601231500706454,0.4068953263704897,0.2857142857142857,0.37054101417362845
3997,Python,Java,"def printNSE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] > arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNSE ( arr ) NEW_LINE","class Main { static void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNSE ( arr , n ) ; } }","public class PrintNSE { public static void main(String[] args) { int[] array = { 11, 13, 21, 3 }; printNSE(array); } private static void printNSE(int[] arr) { for (int i = 0; i < arr.length; i++) { int next = -1; for (int j = i + 1; j < arr.length; j++) { if (arr[i] > arr[j]) { next = arr[j]; break; } } System.out.print(String.format(""%d ▁ - - ▁ %d"", arr[i], next)); } } }",4.612620115280151,0.7715036796447935,0.6687039580910218,0.5016073740065427,0.9411764705882353,0.6334781029810503
2144,Python,Java,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( n and ( not ( n & ( n - 1 ) ) ) ) NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if not isPowerOfTwo ( n ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT n = n >> 1 NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 0 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 12 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 128 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT DEDENT","class GFG { static boolean isPowerOfTwo ( int n ) { return n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int count = 0 ; while ( n > 0 ) { n = n >> 1 ; ++ count ; } return count ; } public static void main ( String [ ] args ) { int n = 0 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","public class Main { def isPowerOfTwo ( n ) : return ( n and ( not ( n & ( n - 1 ) ) ) ) # Java translation public static int isPowerOfTwo(int n) { return (n && !(n & (n-1))); } def findPosition ( n ) : if not isPowerOfTwo ( n ): return -1 count = 0 while ( n > 1 ) { n >>= 1 count += 1 } return count # Java translation public static int findPosition(int n) { if (!isPowerOfTwo(n)) { return -1; } int count = 0; while (n > 1) { n >>= 1 count++; } return count; } if __name__ == ""__main__"" : n = 12 pos = findPosition(n) if pos == -1 : print(""Invalid number"") else : print (""n^2 ="", n, ""Position: "",pos) # Java translation if (__name__ == ""__main__"" ) { int n = 12; int pos = findPosition(n); if (pos == -1) { System.out.println(""Invalid number""); } else { System.out.println(""n^2 = "" + n + "", Position: "" + pos); } } }",8.446159839630127,0.5711123529962442,0.44155768271342605,0.30470240907024443,0.8421052631578948,0.4659232652965395
9367,Python,Java,"def mirror_point ( a , b , c , d , x1 , y1 , z1 ) : NEW_LINE INDENT k = ( - a * x1 - b * y1 - c * z1 - d ) / float ( ( a * a + b * b + c * c ) ) NEW_LINE x2 = a * k + x1 NEW_LINE y2 = b * k + y1 NEW_LINE z2 = c * k + z1 NEW_LINE x3 = 2 * x2 - x1 NEW_LINE y3 = 2 * y2 - y1 NEW_LINE z3 = 2 * z2 - z1 NEW_LINE print "" x3 ▁ = "" , x3 , NEW_LINE print "" y3 ▁ = "" , y3 , NEW_LINE print "" z3 ▁ = "" , z3 , NEW_LINE DEDENT a = 1 NEW_LINE b = - 2 NEW_LINE c = 0 NEW_LINE d = 0 NEW_LINE x1 = - 1 NEW_LINE y1 = 3 NEW_LINE z1 = 4 NEW_LINE mirror_point ( a , b , c , d , x1 , y1 , z1 ) NEW_LINE","import java . io . * ; class GFG { static void mirror_point ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; System . out . print ( "" x3 ▁ = ▁ "" + x3 + "" ▁ "" ) ; System . out . print ( "" y3 ▁ = ▁ "" + y3 + "" ▁ "" ) ; System . out . print ( "" z3 ▁ = ▁ "" + z3 + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int a = 1 ; int b = - 2 ; int c = 0 ; int d = 0 ; int x1 = - 1 ; int y1 = 3 ; int z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; } }","public class MirrorPoint { public static Point mirror(double a, double b, double c, double d, double x1, double y1, double z1) { double k = -a * x1 - b * y1 - c * z1 - d; double xx = a * k + x1; double yy = b * k + y1; double zz = c * k + z1; xx = 2 * xx - x1; yy = 2 * yy - y1; zz = 2 * zz - z1; return new Point(x1, y1, z1); } public static void main(String[] args) { double a = 1; double b = -2; double c = 0; double d = 0; Point p1 = new Point(-1, 3, 4); Point p2 = mirror(a, b, c, d, *p1.x*, *p1.y*), (*p1.z*); System.out.println(""New x-coordinate: "" + (int) p2.getX()); System.out.println(""New y-coordinate: "" + (int) p2.getY()); System.out.println(""New z-coordinate: "" + (int) p2.getZ()); } private static final class Point { private double x; private double y; private double z; public Point(double x, double y, double z) { this.x = x; this.y = y; this.z = z; } public double getX() { return x; } public void setX(double x) { this.x = x; } public double getY() { return y; } public void setY(double y) { this.y = y; } public double getZ() { return z; } public void setZ(double z) { this.z = z; } } }",15.315022945404053,0.4668587896253602,0.36548732284266894,0.2399253990987856,0.7499999999999999,0.3929477793691499
