example_id,start_language,target_language,source_code,reference_code,translated_code,inference_time,bleu_1,bleu_2,bleu_4,keyword_match,codebleu
2048,Java,C++,"import java . io . * ; class GFG { static int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) System . out . println ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ; int minute_angle = ( int ) ( 6 * m ) ; int angle = Math . abs ( hour_angle - minute_angle ) ; angle = Math . min ( 360 - angle , angle ) ; return angle ; } public static void main ( String [ ] args ) { System . out . println ( calcAngle ( 9 , 60 ) + "" ▁ degree "" ) ; System . out . println ( calcAngle ( 3 , 30 ) + "" ▁ degree "" ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int min ( int x , int y ) { return ( x < y ) ? x : y ; } int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) printf ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } float hour_angle = 0.5 * ( h * 60 + m ) ; float minute_angle = 6 * m ; float angle = abs ( hour_angle - minute_angle ) ; angle = min ( 360 - angle , angle ) ; return angle ; } int main ( ) { cout << calcAngle ( 9 , 60 ) << endl ; cout << calcAngle ( 3 , 30 ) << endl ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; int calcAngle(double h, double m) { if (h < 0 || m < 0 || h > 12 || m > 60) { cout << ""Wrong input"" << endl; } if (h == 12) h = 0; if (m == 60){ m = 0; h += 1; if (h > 12) h -= 12; } int hour_angle = (int)(0.5 * (h * 60 + m)); int minute_angle = (int)(6 * m); int angle = abs(hour_angle - minute_angle); angle = min(360 - angle, angle); return angle; } int main() { cout << calcAngle(9, 60) << "" degree"" << endl; cout << calcAngle(3, 30) << "" degree"" << endl; return 0; } ",6.466876029968262,0.8481675392670157,0.7820316081900538,0.6793636646621172,0.888888888888889,0.7422212319301487
13186,Java,C++,"class GFG { static long moduloMultiplication ( long a , long b , long mod ) { long res = 0 ; a %= mod ; while ( b > 0 ) { if ( ( b & 1 ) > 0 ) { res = ( res + a ) % mod ; } a = ( 2 * a ) % mod ; } return res ; } public static void main ( String [ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L ; System . out . print ( moduloMultiplication ( a , b , m ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; long long moduloMultiplication ( long long a , long long b , long long mod ) { a %= mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; } return res ; } int main ( ) { long long a = 426 ; long long b = 964 ; long long m = 235 ; cout << moduloMultiplication ( a , b , m ) ; return 0 ; }","class GFG { static long moduloMultiplication(long a , long b , long mod ) { long res = 0 ; a %= mod ; while (b > 0) { if ((b & 1) != 0) {res = (res + a) % mod;} a = (2 * a) % mod ; } return res; } public static void main(string[ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L; cout << moduloMultiplication(a , b , m ); <｜begin▁of▁sentence｜>} } ",4.558545827865601,0.7652173913043478,0.709529769832934,0.5472651978227507,0.5454545454545454,0.546722002112289
2200,Java,C++,"class Main { static int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( "" The ▁ maximum ▁ element ▁ is ▁ "" + findMaximum ( arr , 0 , n - 1 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ maximum ▁ element ▁ is ▁ "" << findMaximum ( arr , 0 , n - 1 ) ; return 0 ; }","#include<iostream> using namespace std; class Main { static int findMaximum(int arr[], int low, int high) { if (low == high) return arr[low]; if ((high == low + 1) && arr[low] >= arr[high]) return arr[low]; if ((high == low + 1) && arr[low] < arr[high]) return arr[high]; int mid = (low + high) / 2; if (arr[mid] > arr[mid+1] && arr[mid] > arr[mid-1]) return arr[mid]; if (arr[mid] > arr[mid+1] && arr[mid] < arr[mid-1]) return findMaximum(arr, low, mid-1); else return findMaximum(arr, mid+1, high); } public: static void main(string args[]) { int arr[] = {1,3,50,10,9,7,6}; int n = sizeof(arr)/sizeof(arr[0]); cout << ""The maximum element is "" << findMaximum(arr, 0, n-1) << endl; } }; ",7.388911247253418,0.825165162951994,0.7856524629789517,0.7251226086578597,0.6666666666666666,0.7075858260605017
9260,Java,C++,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } },#include <bits/stdc++.h> NEW_LINE using namespace std ; #define PI  3.14159265 NEW_LINE float length_rope ( float r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } int main ( ) { float r = 7 ; cout << ceil ( length_rope ( r ) ) << endl ; return 0 ; },"#include <iostream> #define PI 3.14159265 using namespace std; double length_rope(double r) { return (2 * PI * r + 6 * r); } int main() { double r = 7; cout << length_rope(r) << endl; return <｜begin▁of▁sentence｜>0; // <s means status code, in this case it should be 0 if the program ends successfully> } ",5.466382026672363,0.6707317073170732,0.6036125312858603,0.462254501961018,0.5,0.47357815137271264
13513,Java,C++,"import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int phi ( int n ) { int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) System . out . println ( "" phi ( "" + n + "" ) ▁ = ▁ "" + phi ( n ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int phi ( unsigned int n ) { unsigned int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } int main ( ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) cout << "" phi ( "" << n << "" ) ▁ = ▁ "" << phi ( n ) << endl ; return 0 ; }","#include <iostream> using namespace std; int gcd(int a, int b){ if (a == 0) return b; return gcd(b % a, a); } int phi(int n){ int result = 1; for (int i = 2; i < n; i++) if (gcd(i, n) == 1) result++; return result; } int main(){ for (int n=1; n<=10; n++) cout << ""phi(""<<n<<"") = ""<< phi(n) << endl; return <｜begin▁of▁sentence｜>0; } ",3.9934113025665283,0.8689788584181735,0.8245544980618528,0.743599275722646,1.0,0.8205194930058521
2000,Java,C++,"import java . io . * ; class GFG { static int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } int main ( ) { cout << pow ( 5 , 3 ) ; return 0 ; }","#include <iostream> using namespace std; class GFG { static int pow(int a, int b){ if (b == 0) return 1; int answer = a; int increment = a; for (int i = 1; i < b; i++) { for (int j = 1; j < a; j++) { answer += increment; } increment = answer; } return answer; } public: static void main(string args[]){ cout << pow(5, 3); } }; int main(){ GFG::main({}); } ",3.7717678546905518,0.7642276422764228,0.725389222549056,0.6341981075819814,0.6666666666666666,0.6439386753073869
1682,Java,C++,"class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( equi . equilibrium ( arr , arr_size ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << equilibrium ( arr , arr_size ) ; return 0 ; }","#include<iostream> using namespace std; class EquilibriumIndex { int equilibrium(int arr[], int n) { for (int i = 0; i < n; ++i) { int leftsum = 0, rightsum = 0; for (int j = 0; j < i; j++) leftsum += arr[j]; for (int j = i + 1; j < n; j++) rightsum += arr[j]; if (leftsum == rightsum) return i; } return -1; } }; int main() { EquilibriumIndex equi; int arr[] = {-7, 1, 5, 2, -4, 3, 0}; int arr_size = sizeof(arr) / sizeof(arr[0]); cout << equi.equilibrium(arr, arr_size); return 0; } ",7.21506667137146,0.9095714604609411,0.869033977496729,0.7604130455062547,0.888888888888889,0.7989557985210449
13511,Java,C++,"class GFG { static int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( "" Modular ▁ multiplicative ▁ "" + "" inverse ▁ is ▁ "" + modInverse ( a , m ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m , a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } int main ( ) { int a = 3 , m = 11 ; cout << "" Modular ▁ multiplicative ▁ inverse ▁ is ▁ "" << modInverse ( a , m ) ; return 0 ; }","#include <iostream> using namespace std; class GFG { static int modInverse(int a, int m) { int m0 = m, y = 0, x = 1; if (m == 1) return 0; while (a > 1) { int q = a / m; int t = m; m = a % m; a = t; t = y; y = x - q * y; x = t; } if (x < 0) x += m0; return x; } public: static void main(int args[]) { int a = 3, m = 11; cout << ""Modular multiplicative inverse is "" << modInverse(a, m); } }; ",4.701569080352783,0.9115646258503401,0.8655814227032871,0.7947453714943102,0.6666666666666666,0.756321760046017
1994,Java,C++,"import java . io . * ; class GFG { public static int counter = 2 ; static boolean isLucky ( int n ) { int next_position = n ; if ( counter > n ) return true ; if ( n % counter == 0 ) return false ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } public static void main ( String [ ] args ) { int x = 5 ; if ( isLucky ( x ) ) System . out . println ( x + "" ▁ is ▁ a ▁ lucky ▁ no . "" ) ; else System . out . println ( x + "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define bool  int NEW_LINE bool isLucky ( int n ) { static int counter = 2 ; int next_position = n ; if ( counter > n ) return 1 ; if ( n % counter == 0 ) return 0 ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } int main ( ) { int x = 5 ; if ( isLucky ( x ) ) cout << x << "" ▁ is ▁ a ▁ lucky ▁ no . "" ; else cout << x << "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ; }","#include<iostream> using namespace std; class GFG { public: static int counter; static bool isLucky(int n) { int next_position = n; if (counter > n) return true; if (n % counter == 0) return false; next_position -= next<｜begin▁of▁sentence｜>next_position / counter; counter++; return isLucky(next_position); } }; int GFG::counter = 2; int main() { int x = 5; if (GFG::isLucky(x)) cout << x << "" is a lucky no."" << endl; else cout << x << "" is not a lucky no."" << endl; } ",4.3837950229644775,0.7703703703703704,0.6781759426405072,0.5407572295105044,0.8571428571428571,0.6356729178002102
1824,Java,C++,"import java . util . * ; import java . lang . * ; import java . io . * ; class ActivitySelection { public static void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; System . out . print ( "" Following ▁ activities ▁ are ▁ selected ▁ : ▁ n "" ) ; i = 0 ; System . out . print ( i + "" ▁ "" ) ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { System . out . print ( j + "" ▁ "" ) ; i = j ; } } } public static void main ( String [ ] args ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = s . length ; printMaxActivities ( s , f , n ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; cout << "" Following ▁ activities ▁ are ▁ selected ▁ "" << endl ; i = 0 ; cout << "" ▁ "" << i ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { cout << "" ▁ "" << j ; i = j ; } } } int main ( ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = sizeof ( s ) / sizeof ( s [ 0 ] ) ; printMaxActivities ( s , f , n ) ; return 0 ; }","#include <iostream> using namespace std; class ActivitySelection { public: static void printMaxActivities(int s[], int f[], int n){ cout << ""Following activities are selected : ""; int i = 0, j; cout << i <<"" ""; for (j=1; j<n; j++) { if (s[j] >= f[i]) { cout << j <<"" ""; i = j; } } } }; int main() { int s[] = {1, 3, 0, 5, 8, 5}; int f[] = {2, 4, 6, 7, 9, 9}; int n = sizeof(s)/sizeof(s[0]); ActivitySelection::printMaxActivities(s, f, n); return 0; } ",5.442920923233032,0.8885329143158686,0.8215374833118193,0.7173324292645102,0.7692307692307693,0.7329019312543879
13031,Java,C++,"public class Power_3 { static boolean check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } public static void main ( String args [ ] ) { int n = 9 ; if ( check ( n ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","#include <iostream> NEW_LINE using namespace std ; bool check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } int main ( ) { int n = 9 ; if ( check ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","#include<iostream> using namespace std; class Power_3{ static bool check (int n){ if(n <= 0 ) return false ; return 1162261467 % n == 0 ; } public: static void main (string args[]){ int n = 9; if(check(n)) cout << ""Yes"" << endl; else cout << ""No"" << endl; } }; ",5.863095045089722,0.7558139534883721,0.7119269241154164,0.6359514966915628,0.7142857142857143,0.6594517619698083
2001,Java,C++,"import java . io . * ; class GFG { static int multiply ( int x , int y ) { if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } static int pow ( int a , int b ) { if ( b > 0 ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int multiply ( int x , int y ) { if ( y ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } int pow ( int a , int b ) { if ( b ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } int main ( ) { cout << pow ( 5 , 3 ) ; getchar ( ) ; return 0 ; }","#include<iostream> using namespace std; int multiply(int x, int y){ if (y > 0) return x + multiply(x, y-1); else return 0; } int pow(int a, int b){ if (b > 0) return multiply(a, pow(a, b-1)); else return 1; } int main() { cout << pow(5,3); return 0; } ",2.905730962753296,0.8261986833671773,0.7844418471585197,0.7078399873268613,1.0,0.7954879911288029
1705,Java,C++,"class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) xor ^= i ; set_bit_no = ( xor & ~ ( xor - 1 ) ) ; for ( i = 0 ; i < size ; i ++ ) { int a = arr [ i ] & set_bit_no ; if ( a != 0 ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { int a = i & set_bit_no ; if ( a != 0 ) x = x ^ i ; else y = y ^ i ; } System . out . println ( "" The ▁ two ▁ reppeated ▁ elements ▁ are ▁ : "" ) ; System . out . println ( x + "" ▁ "" + y ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int Xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) Xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) Xor ^= i ; set_bit_no = Xor & ~ ( Xor - 1 ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { if ( i & set_bit_no ) x = x ^ i ; else y = y ^ i ; } cout << "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ "" << y << "" ▁ "" << x ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include <iostream> using namespace std; class RepeatElement { public: void printRepeating(int arr[], int size) { int xor_res = arr[0]; int set_bit_no, i, n=size-2, x = 0, y = 0; for (i = 1; i < size; i++) xor_res ^= arr[i]; for (i = 1; i <= n; i++) xor_res ^= i; set_bit_no = xor_res & ~(xor_res - 1); for (i = 0; i < size; i++) { int a = arr[i] & set_bit_no; if (a != 0) x ^= arr[i]; else y ^= arr[i]; } for (i = 1; i <= n; i++) { int a = i & set_bit<｜begin▁of▁sentence｜>et_bit_no; if (a != 0) x ^= i; else y ^= i; } cout << ""The two repeated elements are : \n""; cout << x << "" and "" << y << endl; } }; int main() { RepeatElement repeat; int arr[] = {4, 2, 4, 5, 2, 3, 1}; int arr_size = sizeof(arr)/sizeof(arr[0]); repeat.printRepeating(arr, arr_size); } ",11.249171733856201,0.8134328358208955,0.7322536632599348,0.6046157825339342,0.7692307692307692,0.6540002785429846
6659,Java,C++,"class GFG { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { System . out . print ( wt [ i - 1 ] + "" ▁ "" ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } public static void main ( String arg [ ] ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; printknapSack ( W , wt , val , n ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; cout << res << endl ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { cout << "" ▁ "" << wt [ i - 1 ] ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; printknapSack ( W , wt , val , n ) ; return 0 ; }","#include<iostream> #include<algorithm> // for std::max using namespace std; class GFG { static int max(int a, int b){ return (a > b)? a : b;} static void printknapSack(int W, int wt[], int val[], int n) { int i, w; int K[n+1][W+1]; for(i=0; i<=n; i++){ for(w=0; w<=W; w++){ if(i==0 || w==0) K[i][w] = 0; else if (wt[i-1] <= w) K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); else K[i][w] = K[i-1][w]; } } int res = K[n][W]; cout << res << endl; w = W; for(i=n; i>0 && res > 0; i--){ if(res == K[i-1][w]) continue; else { cout<< wt[i-1] << "" ""; res = res - val[i-1]; w = w - wt[i-1]; } } } public: static void main(string arg[]) { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val)/sizeof(val[0]); printknapSack(W, wt, val, n); } }; ",14.339133024215698,0.8062611715273311,0.7603054392847307,0.6807607908706478,0.8,0.7165325536094533
2095,Java,C++,"class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String arg [ ] ) { int n = 7 ; System . out . print ( "" The ▁ number ▁ after ▁ unsetting ▁ "" + "" the ▁ rightmost ▁ set ▁ bit ▁ "" + fun ( n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int fun ( unsigned int n ) { return n & ( n - 1 ) ; } int main ( ) { int n = 7 ; cout << "" The ▁ number ▁ after ▁ unsetting ▁ the "" ; cout << "" ▁ rightmost ▁ set ▁ bit ▁ "" << fun ( n ) ; return 0 ; }","#include<iostream> using namespace std; int fun(int n){ return n & (n - 1); } int main(){ int n = 7; cout<<""The number after unsetting the rightmost set bit is ""<<fun(n)<<endl; return 0; } ",2.2320950031280518,0.7901683782656941,0.6990743529594715,0.6017107703906356,1.0,0.7211975392734449
1861,Java,C++,"class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","class Knapsack { static int max(int a, int b){ return (a > b)? a : b; } static int knapSack(int W, int wt[], int val[], int n) { if(n == 0 || W == 0) return 0; if(wt[n-1] > W) return knapSack(W, wt, val, n-1); else return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)); } public: static void main(int args[]) { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val)/sizeof(val[0]); cout << knapSack(W, wt, val, n); } }; ",5.644068002700806,0.8274510990250591,0.7921686591350092,0.729948480882314,0.6666666666666666,0.7109639366176197
1843,Java,C++,"public class GFG { static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . print ( minCost ( cost , 2 , 2 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define R  3 NEW_LINE #define C  3 NEW_LINE int min ( int x , int y , int z ) ; int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int minCost ( int cost [ R ] [ C ] , int m , int n ) { if ( n < 0 m < 0 ) return INT_MAX ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << minCost ( cost , 2 , 2 ) << endl ; return 0 ; }","#include <iostream> #include <vector> #include <limits> using namespace std; int minVal ( int x , int y , int z ) { return (x<y)? ((x<z)?x:z): ((y<z)?y:z); } int minCost( vector<vector<int>> &cost, int m, int n) { if (m < 0 || n < 0) return INT_MAX; else if (m == 0 && n == 0) return cost[m][n]; else return cost[m][n] + minVal(minCost(cost, m-1, n-1), minCost(cost, m-1, n), minCost(cost, m, n-1)); } int main() { vector<vector<int>> cost = {{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}; cout << minCost(cost, 2, 2); return 0; } ",6.260608911514282,0.7761754498994615,0.7209279734164816,0.6341314732460516,1.0,0.7438920312722361
1867,Java,C++,"class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int lps ( char seq [ ] , int i , int j ) { if ( i == j ) { return 1 ; } if ( seq [ i ] == seq [ j ] && i + 1 == j ) { return 2 ; } if ( seq [ i ] == seq [ j ] ) { return lps ( seq , i + 1 , j - 1 ) + 2 ; } return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { String seq = "" GEEKSFORGEEKS "" ; int n = seq . length ( ) ; System . out . printf ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d "" , lps ( seq . toCharArray ( ) , 0 , n - 1 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int x , int y ) { return ( x > y ) ? x : y ; } int lps ( char * seq , int i , int j ) { if ( i == j ) return 1 ; if ( seq [ i ] == seq [ j ] && i + 1 == j ) return 2 ; if ( seq [ i ] == seq [ j ] ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } int main ( ) { char seq [ ] = "" GEEKSFORGEEKS "" ; int n = strlen ( seq ) ; cout << "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ "" << lps ( seq , 0 , n - 1 ) ; return 0 ; }","#include <iostream> #include <algorithm> using namespace std; int max(int x, int y){ return (x > y)? x : y; } int lps(string seq, int i, int j) { if (i == j) return 1; if (seq[i] == seq[j] && i + 1 == j) return 2; if (seq[i] == seq[j]) return lps(seq, i+1, j-1) + 2; return max(lps(seq, i, j-1), lps(seq, i+1, j)); } int main() { string seq = ""GEEKSFORGEEKS""; int n = seq.length(); cout << ""The length of the LPS is: "" << lps(seq, 0, n-1); return 0; } ",5.92464017868042,0.832142988739553,0.7795917666638593,0.7104142510502408,0.8571428571428571,0.7544328328780256
1949,Java,C++,"public class NaiveSearch { public static void search ( String txt , String pat ) { int M = pat . length ( ) ; int N = txt . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } } public static void main ( String [ ] args ) { String txt = "" AABAACAADAABAAABAA "" ; String pat = "" AABA "" ; search ( txt , pat ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( char * pat , char * txt ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } } int main ( ) { char txt [ ] = "" AABAACAADAABAAABAA "" ; char pat [ ] = "" AABA "" ; search ( pat , txt ) ; return 0 ; }","#include<iostream> #include<string> using namespace std; class NaiveSearch { public: static void search(string txt, string pat) { int M = pat.length(); int N = txt.length(); for (int i = 0; i <= N - M; i++) { int j; for (j = 0; j < M; j++) if (txt[i + j] != pat[j]) break; if (j == M) cout << ""Pattern found at index ""<< i << endl; } } }; int main() { string txt ="" AABAACAADAABAAABAA ""; string pat ="" AABA ""; NaiveSearch::search(txt, pat); } ",8.112550973892212,0.8077832597719182,0.7076664362140288,0.5825516558983468,0.6666666666666666,0.6077861591288427
13418,Java,C++,"import java . io . * ; import static java . lang . Math . * ; class Quadratic { static void findRoots ( int a , int b , int c ) { if ( a == 0 ) { System . out . println ( "" Invalid "" ) ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { System . out . println ( ""Roots are real and different NEW_LINE""); System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + ""NEW_LINE"" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ; } else if ( d == 0 ) { System . out . println ( ""Roots are real and same NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) ) ; } { System . out . println ( ""Roots are complex NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + "" ▁ + ▁ i "" + sqrt_val + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) + "" ▁ - ▁ i "" + sqrt_val ) ; } } public static void main ( String args [ ] ) { int a = 1 , b = - 7 , c = 12 ; findRoots ( a , b , c ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void findRoots ( int a , int b , int c ) { if ( a == 0 ) { cout << "" Invalid "" ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ different ▁ STRNEWLINE "" ; cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << "" STRNEWLINE "" << ( double ) ( - b - sqrt_val ) / ( 2 * a ) ; } else if ( d == 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ same ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) ; } { cout << "" Roots ▁ are ▁ complex ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) << "" ▁ + ▁ i "" << sqrt_val << "" STRNEWLINE "" << - ( double ) b / ( 2 * a ) << "" ▁ - ▁ i "" << sqrt_val ; } } int main ( ) { int a = 1 , b = -7 , c = 12 ; findRoots ( a , b , c ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; class Quadratic { public: static void findRoots(int a, int b, int c) { if (a == 0){ cout << "" Invalid"" << endl; return; } int d = b*b - 4*a*c; double sqrt_val = sqrt(abs(d)); if (d > 0){ cout << ""Roots are real and different"" << endl; cout << (-double(b) + sqrt_val) / (2 * a)<<endl<<(-double(b) - sqrt_val) / (2 * a)<<endl; } else if (d == 0){ cout << ""Roots are real and same"" << endl; cout << -double(b) / (2 * a) << endl << -double(b) / (2 * a) << endl; } else { cout << ""Roots are complex"" << endl; cout << -double(b) / (2*a) << "" + i"" << sqrt_val <<endl<<-double(b) / (2 * a) << "" - i"" << sqrt_val << endl; } } }; int main() { int a = 1, b = -7, c = 12; Quadratic::findRoots(a, b, c); } ",11.802380084991455,0.773972602739726,0.6783273856911572,0.5729619611646352,0.8,0.6410733728152446
1687,Java,C++,"class Main { static int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = arr . length ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) System . out . println ( "" Ceiling ▁ of ▁ "" + x + "" ▁ doesn ' t ▁ exist ▁ in ▁ array "" ) ; else System . out . println ( "" ceiling ▁ of ▁ "" + x + "" ▁ is ▁ "" + arr [ index ] ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return -1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == -1 ) cout << "" Ceiling ▁ of ▁ "" << x << "" ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" ; else cout << "" ceiling ▁ of ▁ "" << x << "" ▁ is ▁ "" << arr [ index ] ; return 0 ; }","#include<iostream> using namespace std; int ceilSearch(int arr[], int low, int high, int x){ int i; if (x <= arr[low]) return low; for (i=low; i<high; i++) { if (arr[i] == x) return i; if (arr[i] < x && arr[i+1] >= x) return i+1; } return -1; } int main(void) { int arr[] = {1, 2, 8, 10, 10, 12, 19}; int n = sizeof(arr)/sizeof(arr[0]); int x = 3; int index = ceilSearch(arr, 0, n-1, x); if (index == -1) cout << ""Ceiling of ""<<x<<"" doesn't exist in array""; else cout << ""ceiling of ""<<x<<"" is ""<<arr[index]; } ",6.094547986984253,0.8362201891940038,0.7934262998539326,0.7277140902852651,0.9090909090909091,0.7821271359269583
8588,Java,C++,"import java . io . * ; class GFG { static boolean isPalRec ( String str , int s , int e ) { if ( s == e ) return true ; if ( ( str . charAt ( s ) ) != ( str . charAt ( e ) ) ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } static boolean isPalindrome ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } public static void main ( String args [ ] ) { String str = "" geeg "" ; if ( isPalindrome ( str ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPalRec ( char str [ ] , int s , int e ) { if ( s == e ) return true ; if ( str [ s ] != str [ e ] ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } bool isPalindrome ( char str [ ] ) { int n = strlen ( str ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } int main ( ) { char str [ ] = "" geeg "" ; if ( isPalindrome ( str ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","#include <iostream> #include <string> using namespace std; bool isPalRec(const string& str, int s, int e) { if (s == e) return true; if ((str.at(s)) != (str.at(e))) return false; if (s < e + 1) return isPalRec(str, s+1, e-1); return true; } bool isPalindrome(const string& str){ int n = str.length(); if (n == 0) return true; return isPalRec(str, 0, n - 1); } int main(void) { string str=""geeg""; if (isPalindrome(str)) cout<<""Yes""; else cout<< ""No""; return 0; } ",7.452253818511963,0.7948717948717948,0.7372853881569494,0.6458998675631257,0.7692307692307692,0.6828991380634186
7323,Java,C++,"public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256  NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { bool flag = true ; for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) { flag = false ; break ; } if ( flag ) cout << i << "" ▁ "" ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; const int d = 256; void search( string pat, string txt, int q ) { int M = pat.length(); int N = txt.length(); int i, j; int h = 1; for (i=0; i<M-1; i++) h = (h*d) % q; int p = 0, t = 0; for (i=0; i<M; i++) { p = (d*p + pat[i]) % q; t = (d*t + txt[i]) % q; } for (i=0; i<=N-M; i++) { if ( p == t ){ for (j=0; j<M; j++){ if (txt[i+j]!=pat[j]) break; } if (j==M) cout << ""Pattern found at index "" << i << endl; } if ( i < N-M ){ t = (d*(t - txt[i]*h) + txt[i+M]) % q; if (t<0) t = (t+q); } } } int main() { string txt = "" GEEKS FOR GEEKS ""; string pat = "" GEEK""; int q = 101; search(pat, txt, q); return 0; } ",9.614895105361938,0.7260536967862193,0.6492496685339544,0.5419576629284397,0.7999999999999999,0.6193703640499078
1944,Java,C++,"import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; n = 13 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; int count ( int n ) { int table [ n + 1 ] , i ; for ( int j = 0 ; j < n + 1 ; j ++ ) table [ j ] = 0 ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } int main ( void ) { int n = 20 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; n = 13 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; return 0 ; }","#include <iostream> #include <vector> int count( int n ) { std::vector<int> table (n+1, 0); int i; table[0] = 1; for(i=3; i<=n; i++) table[i] += table[i-3]; for(i=5; i<=n; i++) table[i] += table[i-5]; for(i=10; i<=n; i++) table[i] += table[i-10]; return table[n]; } int main() { int n = 20; std::cout << ""Count for ""<< n <<"" is ""<< count(n) <<std::endl; n = 13; std::cout << ""Count for ""<< n <<"" is ""<< count(n) <<std::endl; } ",7.0630881786346436,0.6575786312814244,0.5704204726710681,0.444476884430336,0.8571428571428571,0.5682766762440923
13895,Java,C++,import java . io . * ; class GFG { static int countBits ( int number ) { return ( int ) ( Math . log ( number ) / Math . log ( 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int num = 65 ; System . out . println ( countBits ( num ) ) ; } },#include <iostream> NEW_LINE #include <cmath> NEW_LINE unsigned countBits ( unsigned int number ) { return ( int ) log2 ( number ) + 1 ; } int main ( ) { unsigned int num = 65 ; std :: cout << countBits ( num ) << ' ' ; return 0 ; },#include <iostream> #include <cmath> using namespace std; int countBits(int number){ return (int)(log(number) / log(2)) + 1; } int main(){ int num = 65; cout << countBits(num); return 0; } ,3.4369161128997803,0.8064516129032258,0.7362345061302968,0.5855952881750762,1.0,0.7099167017225534
1010,Java,C++,"import java . util . Arrays ; class GFG { static void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } static void printArray ( int arr [ ] ) { System . out . print ( Arrays . toString ( arr ) ) ; } public static void main ( String [ ] args ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = price . length ; int S [ ] = new int [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int S [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S , n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; class GFG { static void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; j >= 0 && price[i] >= price[j]; j--) S[i]++; } } static void printArray(vector<int>& arr) { cout << ""[""; for (size_t i = 0; i < arr.size(); ++i) { if (i != 0) cout << "", ""; cout << arr[i]; } cout << ""]\n""; } public: static void main(vector<int> args) { int price[] = {10, 4, 5, 90, 120, 80}; int n = sizeof(price)/sizeof(price[0]); int S[n]; calculateSpan(price, n, S); vector<int> vecS(S, S + n); printArray(vecS); } }; ",7.384825229644775,0.764,0.6984664785705518,0.5968147794010693,0.5454545454545454,0.5814067092171121
12814,Java,C++,"class GFG { static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } int main ( ) { int x = 2 ; int n = 5 ; cout << fixed << setprecision ( 2 ) << sum ( x , n ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; double sum(int x, int n) { double i, total = 1.0, multi = x; for (i=1; i<=n; i++) { total = total + multi / i; multi = multi * x; } return total; } int main() { int x = 2, n = 5; printf(""%.2f"", sum(x, n)); return 0; } ",3.1986119747161865,0.8048114287235629,0.753439713047139,0.6784720180815583,1.0,0.7749304126570908
7012,Java,C++,"import java . io . * ; class GFG { static int NUM_LINE = 2 ; static int NUM_STATION = 4 ; static int min ( int a , int b ) { return a < b ? a : b ; } static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) { int T1 [ ] = new int [ NUM_STATION ] ; int T2 [ ] = new int [ NUM_STATION ] ; int i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; System . out . println ( carAssembly ( a , t , e , x ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NUM_LINE  2 NEW_LINE #define NUM_STATION  4 NEW_LINE int min ( int a , int b ) { return a < b ? a : b ; } int carAssembly ( int a [ ] [ NUM_STATION ] , int t [ ] [ NUM_STATION ] , int * e , int * x ) { int T1 [ NUM_STATION ] , T2 [ NUM_STATION ] , i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } int main ( ) { int a [ ] [ NUM_STATION ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ NUM_STATION ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; cout << carAssembly ( a , t , e , x ) ; return 0 ; }","#include <iostream> using namespace std; int NUM_LINE = 2; int NUM_STATION = 4; int min(int a, int b){ return (a<b)?a:b; } int carAssembly(int a[][], int t[][], int e[], int x[]) { int T1[NUM_STATION]; int T2[NUM_STATION]; T1[0] = e[0] + a[0][0]; T2[0] = e[1] + a[1][0]; for(int i = 1; i < NUM_STATION; ++i) { T1[i] = min(T1[i-1]+a[0][i], T2[i-1]+t[1][i]+a[0][i]); T2[i] = min(T2[i-1]+a[1][i], T1[i-1]+t[0][i]+a[1][i]); } return min(T1[NUM_STATION-1]+x[0], T2[NUM_STATION-1]+x[1]); } int main() { int a[][4] = {{4,5,3,2},{2,10,1,4}}; int t[][4] = {{0,7,4,5},{0,9,2,8}}; int e[2]= {10,12}; int x[2]= {18,7}; cout << carAssembly(a, t, e, x) << endl; } ",12.973527908325195,0.7519276752697464,0.6847192471857122,0.5778635575432794,1.0,0.7045044902802956
2066,Java,C++,"class GFG { static final int INT_SIZE = 32 ; static int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & x ) == 0 ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define INT_SIZE  32 NEW_LINE int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } int main ( ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; const int INT_SIZE = 32; int getSingle(int arr[], int n) { int result = 0; int x, sum; for (int i = 0; i < INT_SIZE; i++) { sum = 0; x = (1 << i); for (int j = 0; j < n; j++) { if ((arr[j] & x) == 0) sum++; } if ((sum % 3) != 0) result |= x; } return result; } int main() { int arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7}; int n = sizeof(arr)/sizeof(arr[0]); cout << ""The element with single occurrence is ""<< getSingle(arr, n) << endl; } ",5.946206331253052,0.8980430176025594,0.8507048993074395,0.7920129874824616,0.888888888888889,0.8210757579043897
1584,Java,C++,"import java . util . * ; import java . io . * ; class GFG { static int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ; int min = Integer . MAX_VALUE ; for ( int i = l + 1 ; i <= h && i <= l + arr [ l ] ; i ++ ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) min = jumps + 1 ; } return min ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = arr . length ; System . out . print ( "" Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ▁ end ▁ is ▁ "" + minJumps ( arr , 0 , n - 1 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int minJumps ( int arr [ ] , int n ) { if ( n == 1 ) return 0 ; int res = INT_MAX ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( i + arr [ i ] >= n - 1 ) { int sub_res = minJumps ( arr , i + 1 ) ; if ( sub_res != INT_MAX ) res = min ( res , sub_res + 1 ) ; } } return res ; } int main ( ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Minimum ▁ number ▁ of ▁ jumps ▁ to "" ; cout << "" ▁ reach ▁ the ▁ end ▁ is ▁ "" << minJumps ( arr , n ) ; return 0 ; }","#include <iostream> #include <climits> using namespace std; int minJumps(int arr[], int l, int h){ if (h == l) return 0; if (arr[l] == 0) return INT_MAX; int min = INT_MAX; for( int i = l + 1; i <= h && i <= l + arr[l]; i ++ ){ int jumps = minJumps(arr, i, h); if (jumps != INT_MAX && jumps + 1 < min) min = jumps + 1; } return min; } int main(){ int arr[] = {1, 3, 6, 3, 2, 3, 6, 8, 9, 5}; int n = sizeof(arr) / sizeof(arr[0]); cout << ""Minimum number of jumps to reach end is ""<< minJumps(arr, 0, n - 1); } ",6.257734060287476,0.8112244897959183,0.6916750990892739,0.5535270139188186,1.0,0.687468909743173
1531,Java,C++,"class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( "" ▁ Invalid ▁ Input ▁ "" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( "" There ▁ is ▁ no ▁ second ▁ largest "" + "" elementNEW_LINE""); else System . out . print ( "" The ▁ second ▁ largest ▁ element "" + "" ▁ is ▁ "" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { cout << "" ▁ Invalid ▁ Input ▁ "" ; return ; } first = second = INT_MIN ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) { second = arr [ i ] ; } } if ( second == INT_MIN ) cout << "" There ▁ is ▁ no ▁ second ▁ largest "" "" element STRNEWLINE "" ; else cout << "" The ▁ second ▁ largest ▁ element ▁ is ▁ "" << second ; } int main ( ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; print2largest ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; class GFG { public: static void print2largest(int arr[], int arr_size){ int i, first, second; if (arr_size < 2) { cout<<""Invalid Input""; return; } first = second = INT_MIN; for(i = 0; i < arr_size; i++) { if (arr[i] > first){ second = first; first = arr[i]; } else if (arr[i] > second && arr[i] != first) second = arr[i]; } if (second == INT_MIN) cout<<""There is no second largest element""; else cout<<""The second largest element is ""<<second; } public: static void main(string args[]){ int arr[]={12,35,1,10,34,1}; int n = sizeof(arr)/sizeof(arr[0]); print2largest(arr, n); } }; ",6.770252227783203,0.8271077226704614,0.7673210229688947,0.6906686020660956,0.8,0.7234680214462669
1015,Java,C++,"class Main { static void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNGE ( arr , n ) ; } }","#include <iostream> NEW_LINE using namespace std ; void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNGE ( arr , n ) ; return 0 ; }","#include <iostream> using namespace std; void printNGE(int arr[], int n) { int next, i, j; for (i=0; i<n; i++) { next = -1; for (j=i+1; j<n; j++) { if (arr[i] < arr[j]) { next = arr[j]; break; } } cout << arr[i] << "" -- "" << next << endl; } } int main() { int arr[] = {11, 13, 21, 3}; int n = sizeof(arr)/sizeof(arr[0]); printNGE(arr, n); return 0; } ",5.911366939544678,0.8764155032650087,0.8537703219258816,0.8071361449995106,1.0,0.8649953014996574
2174,Java,C++,"import java . io . * ; class NextGreatest { static void nextGreatest ( int arr [ ] ) { int size = arr . length ; int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = - 1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } static void printArray ( int arr [ ] ) { for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; nextGreatest ( arr ) ; System . out . println ( "" The ▁ modified ▁ array : "" ) ; printArray ( arr ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void nextGreatest ( int arr [ ] , int size ) { int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = -1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; nextGreatest ( arr , size ) ; cout << "" The ▁ modified ▁ array ▁ is : ▁ STRNEWLINE "" ; printArray ( arr , size ) ; return ( 0 ) ; }","#include <iostream> int main() { void nextGreatest(int* arr, int size); void printArray(int* arr, int size); int arr[] = {16, 17, 4, 3, 5, 2}; int size = sizeof(arr) / sizeof(arr[0]); nextGreatest(arr, size); std::cout << ""The modified array: ""; printArray(arr, size); } void nextGreatest(int* arr, int size) { int max_from_right = arr[size - 1]; arr[size - 1] = -1; for (int i = size - 2; i >= 0; --i) { int temp = arr[i]; arr[i] = max_from_right; if (max_from_right < temp) max_from_right = temp; } } void printArray(int* arr, int size) { for (int i = 0; i < size; ++i) std::cout << arr[i] << "" ""; std::cout<<std::endl; } ",7.405213832855225,0.847926267281106,0.7850584548981688,0.6973367760824555,0.888888888888889,0.7548024099243855
11738,Java,C++,"import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } int main ( ) { int n = 5 ; cout << "" Sum ▁ is ▁ "" << sum ( n ) ; return 0 ; }","#include <iostream> using namespace std; double sum(int n){ double i, s=0.0; for (i=1; i<=n; i++) s = s + 1/i; return s; } int main(){ int n = 5; cout << ""Sum ▁ is ▁"" << sum(n); return 0; } ",2.1827189922332764,0.7940908869758154,0.7413814649617912,0.6503721385686181,1.0,0.7552604969980325
1981,Java,C++,"class Main { static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = - 1 , m2 = - 1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = ar1 . length ; int n2 = ar2 . length ; if ( n1 == n2 ) System . out . println ( "" Median ▁ is ▁ "" + getMedian ( ar1 , ar2 , n1 ) ) ; else System . out . println ( "" arrays ▁ are ▁ of ▁ unequal ▁ size "" ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = -1 , m2 = -1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } int main ( ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = sizeof ( ar1 ) / sizeof ( ar1 [ 0 ] ) ; int n2 = sizeof ( ar2 ) / sizeof ( ar2 [ 0 ] ) ; if ( n1 == n2 ) cout << "" Median ▁ is ▁ "" << getMedian ( ar1 , ar2 , n1 ) ; else cout << "" Doesn ' t ▁ work ▁ for ▁ arrays "" << "" ▁ of ▁ unequal ▁ size "" ; getchar ( ) ; return 0 ; }","#include <iostream> using namespace std; int getMedian(int ar1[], int ar2[], int n) { int i = 0, j = 0, count; int m1 = -1, m2 = -1; for (count = 0; count <= n; count++) { if (i == n) { m1 = m2; m2 = ar2[0]; break; } else if (j == n) { m1 = m2; m2 = ar1[0]; break; } if (ar1[i] <= ar2[j]) { m1 = m2; m2 = ar1[i]; i++; } else { m1 = m2; m2 = ar2[j]; j++; } } return (m1 + m2) / 2; } int main(void) { int ar1[] = {1, 12, 15, 26, 38}; int ar2[] = {2, 13, 17, 30, 45}; int n1 = sizeof(ar1)/sizeof(ar1[0]); int n2 = sizeof(ar2)/sizeof(ar2[0]); if (n1 == n2) cout << ""Median is: ""<< getMedian(ar1, ar2, n1); else cout << ""Arrays are of unequal size""; return 0; } ",9.823097229003906,0.8639950751819537,0.8363710229923071,0.7933761384494649,0.923076923076923,0.8322863738377022
13443,Java,C++,"class GFG { static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( seriesSum ( 1 , 1 , N ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } int main ( ) { int N = 5 ; cout << seriesSum ( 1 , 1 , N ) << endl ; return 0 ; }","#include<iostream> using namespace std; class GFG { static int seriesSum (int calculated , int current , int N ) { int i , cur = 1 ; if (current == N + 1) return 0 ; for(i = calculated ; i < calculated + current; i ++) cur *= i; return cur + seriesSum(i, current+1,N); } public: static void main (string[] args ){ int N = 5; cout << seriesSum( 1 , 1 , N ); } }; int main() { GFG gfg; gfg.main({}); } ",3.8566720485687256,0.7661290322580645,0.7403545340491071,0.6891601240921889,0.6666666666666666,0.6824120868645321
2291,Java,C++,"import java . util . * ; import java . util . Arrays ; class GFG { public static List < Integer > findDisappearedNumbers ( int [ ] nums ) { for ( int i = 0 ; i < nums . length ; i ++ ) { int index = Math . abs ( nums [ i ] ) ; if ( nums [ index - 1 ] > 0 ) { nums [ index - 1 ] *= - 1 ; } } List < Integer > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { res . add ( i + 1 ) ; } } return res ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 4 , 5 , 6 } ; System . out . println ( findDisappearedNumbers ( a ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMissingNo ( int a [ ] , int n ) { int total = ( n + 1 ) * ( n + 2 ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) total -= a [ i ] ; return total ; } int main ( ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int miss = getMissingNo ( arr , n ) ; cout << miss ; }","#include <vector> #include <cmath> #include <iostream> using namespace std; class Solution { public: static vector<int> findDisappearedNumbers(vector<int>& nums) { for (size_t i = 0; i < nums.size(); i++) { int index = abs(nums[i]); if (nums[index - 1] > 0) { nums[index - 1] *= -1; } } vector<int> res; for (size_t i = 0; i < nums.size(); i++) { if (nums[i] > 0) { res.push_back(i + 1); } } return res; } }; int main() { vector<int> a = { 1, 2, 4, 5, 6 }; vector<int> result = Solution::findDisappearedNumbers(a); for (const auto &i: result) { cout << i << ' '; } return 0; } ",6.817030191421509,0.4365482233502538,0.30947267199963957,0.18351500103700083,0.5454545454545454,0.2920968643622642
4857,Java,C++,"import java . io . * ; class PancakeSort { static void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } static int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } static int pancakeSort ( int arr [ ] , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } return 0 ; } static void printArray ( int arr [ ] , int arr_size ) { for ( int i = 0 ; i < arr_size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = arr . length ; pancakeSort ( arr , n ) ; System . out . println ( "" Sorted ▁ Array : ▁ "" ) ; printArray ( arr , n ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } void pancakeSort ( int * arr , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; ++ i ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; pancakeSort ( arr , n ) ; cout << "" Sorted ▁ Array ▁ "" << endl ; printArray ( arr , n ) ; return 0 ; }","#include <iostream> using namespace std; void flip(int arr[], int i){ int temp, start = 0; while (start < i) { temp = arr[start]; arr[start] = arr[i]; arr[i] = temp; start++; i--; } } int findMax(int arr[], int n){ int mi, i; for (mi = 0, i = 0; i < n; ++i) if (arr[i] > arr[mi]) mi = i; return mi; } void pancakeSort(int arr[], int n) { for (int curr_size = n; curr_size > 1; --curr_size) { int mi = findMax(arr, curr_size); if (mi != curr_size - 1) { flip(arr, mi); flip(arr, curr_size - 1); } } } void printArray(int arr[], int arr_size){ for (int i = 0; i < arr_size; i++) cout << arr[i] << "" ""; cout<<endl; } int main(){ int arr[] = {23, 10, 20, 11, 12, 6, 7}; int n = sizeof(arr)/sizeof(arr[0]); pancakeSort(arr, n); cout<<""Sorted Array: ""; printArray(arr,n); } ",10.116150140762329,0.9397359729037225,0.9142490136956949,0.8728776713687475,1.0,0.9110143699581232
1844,Java,C++,"import java . util . * ; class MinimumCostPath { private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <limits.h> NEW_LINE #define R  3 NEW_LINE #define C  3 NEW_LINE using namespace std ; int min ( int x , int y , int z ) ; int minCost ( int cost [ R ] [ C ] , int m , int n ) { int i , j ; int tc [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << "" ▁ "" << minCost ( cost , 2 , 2 ) ; return 0 ; }","#include <algorithm> // for std::min #include <vector> // for std::vector #include<iostream> // For input/output operations using namespace std; class MinimumCostPath { private: static int min(int x, int y, int z) { return (x < y)? ((x < z)? x : z): ((y < z)? y : z); } static int minCost(vector<vector<int>>& cost, int m, int n){ vector<vector<int>> tc(m+1, vector<int>(n+1)); tc[0][0] = cost[0][0]; for (int i = 1; i <= m; ++i) tc[i][0] = tc[i-1][0] + cost[i][0]; for (int j = 1; j <= n; ++j) tc[0][j] = tc[0][j-1] + cost[0][j]; for (int i = 1; i <= m; ++i) { for (int j = 1; j <= n; ++j) { tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]; } } return tc[m][n]; } public: static void main(string args[]) { vector<vector<int>> cost = {{1,2,3},{4,8,2},{1,5,3}}; cout << minCost(cost, 2, 2); } }; ",10.936571836471558,0.7504512876556606,0.6771220797489566,0.5630552502997621,0.4615384615384615,0.5326002136713719
2012,Java,C++,import java . io . * ; class GFG { static int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } public static void main ( String [ ] args ) { int n = 578 ; System . out . println ( count ( n ) ) ; } },"#include <bits/stdc++.h> NEW_LINE using namespace std ; int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } int main ( ) { cout << count ( 578 ) << "" ▁ "" ; return 0 ; }",#include <iostream> using namespace std; class GFG { static int count(int n) { if (n < 3) return n; if (n >= 3 && n < 10) return n - 1; int po = 1; while (n / po > 9) po *= 10; int msd = n / po; if (msd != 3) return count(msd) * count(po - 1) + count(msd) + count(n % po); else return count(msd * po - 1); } public: static void main(string[ ] args) { int n = 578; cout << count(n) << endl; } }; ,4.440160036087036,0.8698630136986302,0.8233427264257837,0.7572999601259924,0.7142857142857143,0.744395686373909
13911,Java,C++,"import java . io . * ; class GFG { static int INT_MAX = 2147483647 ; static int isKthBitSet ( int x , int k ) { return ( ( x & ( 1 << ( k - 1 ) ) ) > 0 ) ? 1 : 0 ; } static int leftmostSetBit ( int x ) { int count = 0 ; while ( x > 0 ) { count ++ ; x = x >> 1 ; } return count ; } static int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } static int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) > 0 ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( findNthPalindrome ( n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isKthBitSet ( int x , int k ) { return ( x & ( 1 << ( k - 1 ) ) ) ? 1 : 0 ; } int leftmostSetBit ( int x ) { int count = 0 ; while ( x ) { count ++ ; x = x >> 1 ; } return count ; } int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } int main ( ) { int n = 9 ; cout << findNthPalindrome ( n ) ; }","#include <iostream> using namespace std; int INT_MAX = 2147483647; int isKthBitSet (int x, int k){ return ((x & (1 << (k - 1))) > 0) ? 1 : 0; } int leftmostSetBit(int x){ int count = 0; while(x>0){ count++; x=x>>1; } return count; } int isBinPalindrome(int x){ int l = leftmostSetBit(x); int r = 1; while (l>r) { if (isKthBitSet(x, l)!=isKthBitSet(x, r)) return 0; l--; r++; } return 1; } int findNthPalindrome(int n){ int pal_count = 0; int i = 0; for (i=1; i<=INT_MAX; i++) { if (isBinPalindrome(i)>0) { pal_count++; } if (pal_count == n) break; } return i; } int main() { int n = 9; cout << findNthPalindrome(n); return 0; } ",8.597493171691895,0.8915094339622641,0.8598857825161675,0.7986532673274002,1.0,0.8590572871291802
9298,Java,C++,"import java . io . * ; class GFG { static void CalPeri ( ) { int S = 5 , Perimeter ; Perimeter = 10 * S ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" + Perimeter ) ; } public static void main ( String [ ] args ) { CalPeri ( ) ; } }","#include <iostream> NEW_LINE using namespace std ; void CalPeri ( ) { int s = 5 , Perimeter ; Perimeter = 10 * s ; cout << "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" << Perimeter ; } int main ( ) { CalPeri ( ) ; return 0 ; }","#include <iostream> using namespace std; class GFG { static void CalPeri() { int S = 5, Perimeter; Perimeter = 10 * S; cout << ""The Perimeter of Decagon is : "" << Perimeter; } public: static void main(string[] args) { CalPeri(); } }; int main() { GFG::main({}); } ",5.236208200454712,0.65,0.5664680714297736,0.4417878508245152,0.5,0.4592514955771606
1704,Java,C++,"class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = ( int ) Math . sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; System . out . println ( "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ : "" ) ; System . out . print ( x + "" ▁ "" + y ) ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int fact ( int n ) ; void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; cout << "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" << x << "" ▁ & ▁ "" << y ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include<iostream> #include<cmath> using namespace std; class RepeatElement { public: void printRepeating(int arr[], int size) { int S = 0, P = 1, x, y, D; int n = size - 2, i; for (i=0; i<size; ++i){ S += arr[i]; P *= arr[i]; } S = S - n*(n+1)/2; P = P/fact(n); D = (int) sqrt((double)(S*S-4*P)); x = (D + S)/2; y = (S - D)/2; cout << "" The two repeating elements are : ""<<endl; cout << x <<"" "" << y << endl; } int fact(int n) { return (n==0)?1:n*fact(n-1); } }; int main() { RepeatElement repeat; int arr[] = {4, 2, 4, 5, 2, 3, 1}; int arr_size = sizeof(arr)/sizeof(arr[0]); repeat.printRepeating(arr, arr_size); } ",10.269426822662354,0.7867580860496262,0.7182440512632169,0.5846562324592279,0.7272727272727273,0.6274411809032777
13537,Java,C++,"import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; class gfg { public : double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } } ; int main ( ) { gfg g ; int n = 5 ; cout << "" Sum ▁ is ▁ "" << g . sum ( n ) ; return 0 ; }","#include <iostream> using namespace std; double sum(int n){ double i, s = 0.0; for(i=1; i<=n; i++) s = s + 1/i; return s; } int main(){ int n=5; cout << ""Sum is "" << sum(n); return 0; } ",2.504441976547241,0.6646087518365582,0.5976284255113662,0.4791427403957069,0.8,0.5753999182769949
13913,Java,C++,"class GFG { static int INT_SIZE = 32 ; static int constructNthNumber ( int group_no , int aux_num , int op ) { int a [ ] = new int [ INT_SIZE ] ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num > 0 ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } static int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 == 1 ) else aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . printf ( "" % d "" , getNthNumber ( n ) ) ; } }","#include <iostream> NEW_LINE #include <bits/stdc++.h> NEW_LINE using namespace std ; int constructNthNumber ( int group_no , int aux_num , int op ) { int INT_SIZE = 32 ; int a [ INT_SIZE ] = { 0 } ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { op = 2 ; aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) op = 0 ; else op = 1 ; aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } int main ( ) { int n = 9 ; cout << getNthNumber ( n ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; class GFG { public: static int INT_SIZE = 32; static int constructNthNumber(int group_no, int aux_num, int op) { vector<int> a(INT_SIZE); int num = 0, len_f; if (op == 2) { len_f = 2 * group_no; a[len_f - 1] = a[0] = 1; while (aux_num > 0) { a[group_no + len_f - 1] = a[group_no - 1] = aux_num & 1; aux_num = aux_num >> 1; len_f--; } } else if (op == 0) { len_f = 2 * group_no + 1; a[len_f - 1] = a[0] = 1; a[group_no] = 0; while (aux_num > 0) { a[group_no + len_f] = a[group_no - 1] = aux_num & 1; aux_num = aux_num >> 1; len_f++; } } else if (op == 3){ len_f = 2 * group_no + 1; a[len_f - 1] = a[0] = 1; a[group_no] = 1; while (aux_num > 0) { a[group_no + len_f] = a[group_no - 1] = aux_num & 1; aux_num = aux_num >> 1; len_f++; } } for (int i = 0; i < len_f; i++) num += (1 << i) * a[i]; return num; } static int getNthNumber(int n){ int group_no = 0, count_upto_group=0,count_temp=1,op,aux_num; while (count_temp < n) { group_no++; count_upto_group = count_temp; count_temp += 3 * pow(2,group_no - 1); } int group_offset = n- count_upto_group - 1; if ((group_offset + 1) <= pow(2,group_no - 1)){ aux_num = group_offset; } else { if(((group_offset+1)-pow(2,group_no-1))%2==1){ aux_num= (group_offset-pow(2,group_no-1))/2; }else{ op = 3; return constructNthNumber(group_no,aux_num,op); } } if((group_offset+1)<=pow(2,group_no - 1)){ aux_num = group_offset; } else { op = 3; return constructNthNumber(group_no,aux_num,op); } } }; int main(){ int n=9; cout<<GFG::getNthNumber(n)<<endl; } ",24.54573965072632,0.8530612244897959,0.7746667087603115,0.6577597371357626,0.8,0.7004318159950338
11721,Java,C++,"import java . util . * ; import java . text . DecimalFormat ; class GFG { static void midptellipse ( float rx , float ry , float xc , float yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25f * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; DecimalFormat df = new DecimalFormat ( "" # , # # # , # #0.00000"" ) ; while ( dx < dy ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5f ) * ( x + 0.5f ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } public static void main ( String args [ ] ) { midptellipse ( 10 , 15 , 50 , 50 ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void midptellipse ( int rx , int ry , int xc , int yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; while ( dx < dy ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } int main ( ) { midptellipse ( 10 , 15 , 50 , 50 ) ; return 0 ; }","#include <iostream> #include <iomanip> using namespace std; void midptellipse(float rx, float ry, float xc, float yc) { float dx, dy, d1, d2, x, y; x = 0; y = ry; d1 = (ry*ry) - (rx*rx*ry) + (0.25f * rx*rx); dx = 2*rx*rx*y; dy = 2*ry*ry*x; while(dx < dy){ cout << fixed << setprecision(6)<< x+xc <<"" , "" << y+yc << '\n' << -x + xc <<"" , "" << y + yc << '\n' << x + xc <<"" , "" << -y + yc << '\n' << -x + xc <<"" , "" << -y + yc << endl; if(d1 < 0){ x++; dx = dx + 2*ry*ry; d1 = d1 + dx + ry*ry; }else{ x++; y--; dx = dx + 2*ry*ry; dy = dy - 2*rx*rx; d1 = d1 + dx - dy + ry*ry; } } float d2_val=((ry * ry)*( (x+0.5f) *(x+0.5f))) + ((rx * rx)*((y-1)*(y-1))) - (rx * rx * ry * ry); while( y >= 0 ){ cout << fixed << setprecision(6)<< x+xc <<"" , "" << y + yc << '\n' << -x + xc <<"" , "" << y + yc << '\n' << x + xc <<"" , "" << -y + yc << '\n' << -x + xc <<"" , "" << -y + yc << endl; if(d2_val > 0){ y--; dy = dy - 2*rx*rx; d2_val = d2_val + rx * rx - dy; }else{ y--; x++; dx = dx + 2*ry*ry; dy = dy - 2*rx*rx; d2_val = d2_val + dx - dy + rx * rx; } } } int main() { midptellipse(10, 15, 50, 50); return 0; } ",17.98845601081848,0.7960532691470374,0.720231949909451,0.5903116722179255,1.0,0.7132181705525478
2065,Java,C++,"class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } int main ( ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; class GFG { public: static int getSingle(int arr[], int n) { int ones = 0, twos = 0; for (int i = 0; i < n; i++) { twos = twos | (ones & arr[i]); ones = ones ^ arr[i]; int common_bit_mask = ~(ones & twos); ones &= common_bit_mask; twos &= common_bit_mask; } return ones; } }; int main() { int arr[] = {3, 3, 2, 3}; int n = sizeof(arr) / sizeof(arr[0]); cout << ""The element with single occurrence is: ""<< GFG::getSingle(arr, n) << endl; } ",7.804692029953003,0.9012345679012346,0.8595931543900894,0.7868839373637002,0.6666666666666666,0.75081875615459
13427,Java,C++,"import java . io . * ; import java . math . * ; class GFG { static void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) System . out . println ( "" Even "" ) ; else System . out . println ( "" Odd "" ) ; } public static void main ( String args [ ] ) { System . out . print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) ; countDivisors ( 10 ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) cout << "" Even "" << endl ; else cout << "" Odd "" << endl ; } int main ( ) { cout << "" The ▁ count ▁ of ▁ divisor : ▁ "" ; countDivisors ( 10 ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; void countDivisors(int n) { int count = 0; for (int i = 1; i <= sqrt(n) + 1; i++) { if (n % i == 0) count += (n / i == i) ? 1 : 2; } if (count % 2 == 0) cout << ""Even""; else cout << ""Odd""; } int main() { cout << ""The count of divisor: ""; countDivisors(10); return 0; } ",4.0021140575408936,0.8785114897863805,0.8369832626165368,0.7793981721558764,1.0,0.8455787205091134
848,Java,C++,"class GFG { private static void search ( int [ ] [ ] mat , int n , int x ) { int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { System . out . print ( "" n ▁ Found ▁ at ▁ "" + i + "" ▁ "" + j ) ; return ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } System . out . print ( "" n ▁ Element ▁ not ▁ found "" ) ; return ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int search ( int mat [ 4 ] [ 4 ] , int n , int x ) { if ( n == 0 ) return -1 ; int smallest = mat [ 0 ] [ 0 ] , largest = mat [ n - 1 ] [ n - 1 ] ; if ( x < smallest x > largest ) return -1 ; int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { cout << "" n ▁ Found ▁ at ▁ "" << i << "" , ▁ "" << j ; return 1 ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } cout << "" n ▁ Element ▁ not ▁ found "" ; return 0 ; } int main ( ) { int mat [ 4 ] [ 4 ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; return 0 ; }","#include<iostream> using namespace std; class GFG { private: static void search(int **mat, int n, int x){ int i = 0 , j = n - 1; while (i < n && j >= 0) { if (mat[i][j] == x){ cout << "" Found at "" << i <<"" ""<< j; return; } if (mat[i][j] > x) --j; else ++i; } cout << "" Element not found""; } public: static void main(int argc, char** args){ int **mat = new int*[4]; for (int i = 0; i < 4; ++i) mat[i] = new int[4]; mat[0][0]=10;mat[0][1]=20;mat[0][2]=30;mat[0][3]=40; mat[1][0]=15;mat[1][1]=25;mat[1][2]=35;mat[1][3]=45; mat[2][0]=27;mat[2][1]=29;mat[2][2]=37;mat[2][3]=48; mat[3][0]=32;mat[3][1]=33;mat[3][2]=39;mat[3][3]=50; search(mat, 4, 29); } }; ",11.446705102920532,0.5216049382716049,0.442040713459311,0.3390714820048588,0.5555555555555556,0.40401670407006784
13539,Java,C++,"class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; System . out . print ( f1 + "" ▁ "" ) ; for ( i = 1 ; i < n ; i ++ ) { System . out . print ( f2 + "" ▁ "" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; cout << f1 << "" ▁ "" ; for ( i = 1 ; i < n ; i ++ ) { cout << f2 << "" ▁ "" ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } int main ( ) { printFibonacciNumbers ( 7 ) ; return 0 ; }","#include <iostream> using namespace std; class Test { public: static void printFibonacciNumbers (int n) { int f1 = 0, f2 = 1, i; if(n < 1) return; cout << f1 << "" ""; for(i=1; i<n; ++i){ cout<<f2<<"" ""; int next = f1 + f2; f1 = f2; f2 = next; } } static void main (string[] args) { printFibonacciNumbers(7); } }; ",4.006122827529907,0.8476190476190476,0.7973169292786186,0.7048897321165728,0.7692307692307693,0.7241920432508318
1954,Java,C++,"public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256 NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) break ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","#include<iostream> #include<string.h> using namespace std; const int d = 256; void search( string pat, string txt, int q ) { int M = pat.length(); int N = txt.length(); int i, j; int p = 0; int t = 0; int h = 1; for(i=0; i<M-1; i++) h = (h*d) % q; for(i=0; i<M; i++){ p = (d*p + pat[i]) % q; t = (d*t + txt[i]) % q; <｜begin▁of▁sentence｜> } for(i = 0; i <= N - M; i++) { if( p == t ){ for(j=0; j<M; j++){ if (txt[i+j] != pat[j]) break; } if(j==M) cout << ""Pattern found at index: ""<< i << endl; } if( i < N-M ){ t = (d*(t - txt[i]*h) + txt[i+M]) % q; if(t<0) t=(t+q); } } } int main() { string txt = "" GEEKS FOR GEEKS ""; string pat = "" GEEK""; int q = 101; search(pat, txt, q); return 0; } ",10.76298475265503,0.7978269165240592,0.7304385592142031,0.6380519717986222,0.8571428571428571,0.7037792374018925
13546,Java,C++,"class Test { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int a = 98 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","#include <iostream> using namespace std; class Test { static int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); } public: static void main() { int a = 98, b = 56; cout << ""GCD of "" << a << "" and "" << b << "" is ""<< gcd(a, b) << endl; } }; ",4.021986961364746,0.8686868686868687,0.8044147410723552,0.7064334720541088,0.5454545454545454,0.6581397940742397
2096,Java,C++,"class GFG { static int isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } public static void main ( String [ ] args ) { int test_no = 64 ; if ( isPowerOfFour ( test_no ) == 1 ) System . out . println ( test_no + "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ) ; else System . out . println ( test_no + "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ) ; } }","#include <iostream> NEW_LINE using namespace std ; #define bool  int NEW_LINE class GFG { public : bool isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } } ; int main ( ) { GFG g ; int test_no = 64 ; if ( g . isPowerOfFour ( test_no ) ) cout << test_no << "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ; else cout << test_no << "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ; getchar ( ) ; }","#include<iostream> using namespace std; class GFG { static bool isPowerOfFour(int n) { if (n == 0) return false; while (n != 1) { if (n % 4 != 0) return false; n = n / 4; } return true; } public: static void main(string args[]) { int test_no = 64; if (isPowerOfFour(test_no)) cout << test_no << "" is a power of 4"" << endl; else cout << test_no << "" is not a power of 4"" << endl; } }; ",4.048913955688477,0.78266808241895,0.692145534272462,0.5651242578256047,0.888888888888889,0.6622536471445899
7050,Java,C++,"class GFG { static int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } public static void main ( String args [ ] ) { int arr [ ] = new int [ ] { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = arr . length ; System . out . println ( "" Sum ▁ of ▁ maximum ▁ sum ▁ "" + "" increasing ▁ subsequence ▁ is ▁ "" + maxSumIS ( arr , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } int main ( ) { int arr [ ] = { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" "" subsequence ▁ is ▁ "" << maxSumIS ( arr , n ) << endl ; return 0 ; }","#include<iostream> #include<vector> #include<algorithm> using namespace std; class GFG { public: static int maxSumIS(vector<int> arr, int n) { vector<int> msis(arr.begin(), arr.end()); for (int i = 1; i < n; ++i) for (int j = 0; j < i; ++j) if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) msis[i] = msis[j] + arr[i]; return *max_element(msis.begin(), msis.end()); } }; int main() { vector<int> arr{1, 101, 2, 3, 100, 4, 5}; int n = arr.size(); cout << ""Sum of maximum sum increasing subsequence is "" << GFG::maxSumIS(arr, n) << endl; } ",6.305243730545044,0.6381429619051113,0.5499163525137027,0.45069201524228086,0.7272727272727273,0.5336662288514148
8947,Java,C++,"import java . io . * ; class GFG { static int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } public static void main ( String args [ ] ) { int A = 2 , B = 5 , C = 13 ; System . out . println ( "" Power ▁ is ▁ "" + exponentMod ( A , B , C ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } int main ( ) { int A = 2 , B = 5 , C = 13 ; cout << "" Power ▁ is ▁ "" << exponentMod ( A , B , C ) ; return 0 ; }","#include <iostream> using namespace std; long long exponentMod(long long A, long long B, int C){ if (A == 0) return 0; if (B == 0) return 1; long long y; if (B % 2 == 0){ y = exponentMod(A, B / 2, C); y = (y * y) % C; } else { y = A % C; y = (y * exponentMod(A, B - 1, C) % C) % C; } return ((y + C) % C); } int main() { int A = 2, B = 5, C = 13; cout << ""Power is ""<< exponentMod(A, B, C) << endl; return 0; } ",4.942965984344482,0.9333333333333333,0.9084069859003289,0.8604917931258348,1.0,0.9023442551880843
9368,Java,C++,"import java . util . * ; class solution { static void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" ) ; else if ( x < 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" ) ; else if ( x >= 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" ) ; else if ( x < 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" ) ; } public static void main ( String args [ ] ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = - 4 ; y = 2 ; z = - 8 ; octant ( x , y , z ) ; x = - 6 ; y = - 2 ; z = 8 ; octant ( x , y , z ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 1st ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 2nd ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 3rd ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 4th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 5th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 6th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 7th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 8th ▁ octant STRNEWLINE "" ; } int main ( ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = -4 , y = 2 , z = -8 ; octant ( x , y , z ) ; x = -6 , y = -2 , z = 8 ; octant ( x , y , z ) ; return 0 ; }","#include<iostream> using namespace std; void Octant(float x, float y, float z){ if(x >= 0 && y >= 0 && z >= 0) cout << ""Point lies in 1st octant"" << endl; else if (x < 0 && y >= 0 && z >= 0) cout << ""Point lies in 2nd octant"" << endl; else if (x < 0 && y < 0 && z >= 0) cout << ""Point lies in 3rd octant"" << endl; else if (x >= 0 && y < 0 && z >= 0) cout << ""Point lies in 4th octant"" << endl; else if (x >= 0 && y >= 0 && z < 0) cout << ""Point lies in 5th octant"" << endl; else if (x < 0 && y >= 0 && z < 0) cout << ""Point lies in 6th octant"" << endl; else if (x < 0 && y < 0 && z < 0) cout << ""Point lies in 7th octant"" << endl; else if (x >= 0 && y < 0 && z < 0) cout << ""Point lies in 8th octant"" << endl; } int main(){ float x = 2, y = 3, z = 4; Octant(x,y,z); x = -4; y = 2; z = -8; Octant(x,y,z); x = -6; y = -2; z = 8; Octant(x,y,z); } ",10.326190710067749,0.8258917053164277,0.7537986982121365,0.6814680753153555,0.9090909090909091,0.7497549254480216
2090,Java,C++,class GFG { static int addOne ( int x ) { int m = 1 ; while ( ( int ) ( x & m ) >= 1 ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } public static void main ( String [ ] args ) { System . out . println ( addOne ( 13 ) ) ; } },#include <bits/stdc++.h> NEW_LINE using namespace std ; int addOne ( int x ) { int m = 1 ; while ( x & m ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } int main ( ) { cout << addOne ( 13 ) ; return 0 ; },class GFG { static int addOne(int x) { int m = 1; while ((x & m) >= 1) { x = x ^ m; m <<= 1; } x = x ^ m; return x; } public: static void main(string[ ] args) { cout<< addOne(13); } }; ,4.943613052368164,0.7702702702702703,0.7407331989139836,0.6748153829194748,0.6,0.6523707680436324
12740,Java,C++,import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } },"#include <bits/stdc++.h> NEW_LINE using namespace std ; int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } int main ( ) { int n = 4 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; n = 5 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; return 0 ; }",#include <iostream> using namespace std; int divisorSum (int n){ int sum = 0; for(int i=1; i<=n; ++i) { sum += ((n/i)*i); } return sum; } int main() { int n =4 ; cout << divisorSum (n)<< endl; n = 5; cout << divisorSum (n)<< endl; return 0; } ,5.374976634979248,0.7535030320032985,0.7069479568345143,0.6219871876144636,1.0,0.7353910313301244
12813,Java,C++,"import static java . lang . Math . pow ; class GFG { static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","#include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <boost/format.hpp> NEW_LINE class gfg { public : double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( pow ( x , i ) / i ) ; return total ; } } ; int main ( ) { gfg g ; int x = 2 ; int n = 5 ; std :: cout << boost :: format ( "" % .2f "" ) % g . sum ( x , n ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; double sum (int x, int n) { double i, total = 1.0; for (i=1; i<=n; i++) total = total + (pow(x, i)/i); return total; } int main() { int x = 2; int n = 5; printf(""%.2f"", sum(x, n)); return 0; } ",2.5502591133117676,0.6463982167511805,0.5882516045120524,0.4909884314830237,0.8,0.5836919020381166
12673,Java,C++,import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } int main ( ) { int n = 10 ; cout << AvgofSquareN ( n ) ; return 0 ; },#include <iostream> float avgOfSquareN(int n) { return (float)(((n + 1) * (2*n + 1)) / 6); } int main() { int n = 2; std::cout << avgOfSquareN(n) << std::endl; return 0; } ,4.018829107284546,0.803030303030303,0.7372853881569494,0.6270880677580585,1.0,0.7389616474306409
7057,Java,C++,"class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","#include<iostream> using namespace std; class Knapsack { static int max(int a , int b ){ return (a > b) ? a : b;} static int knapSack(int W, int wt[], int val[], int n){ if (n == 0 || W == 0) return 0; if (wt[n-1] > W) return knapSack(W, wt, val, n-1); else return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)); } public: static void main (string args[]) { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val)/sizeof(val[0]); cout<< knapSack(W, wt, val, n) <<endl; } }; ",8.377099752426147,0.863404294394831,0.8203386962217087,0.7459397351833654,0.6666666666666666,0.7221578146283557
2149,Java,C++,"class GFG { static void swap ( int [ ] xp , int [ ] yp ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; } public static void main ( String [ ] args ) { int [ ] x = { 10 } ; swap ( x , x ) ; System . out . println ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" + x [ 0 ] ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void swap ( int * xp , int * yp ) { * xp = * xp ^ * yp ; * yp = * xp ^ * yp ; * xp = * xp ^ * yp ; } int main ( ) { int x = 10 ; swap ( & x , & x ) ; cout << "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" << x ; return 0 ; }","class GFG { static void swap(int* xp, int* yp) { *xp = *xp ^ *yp; *yp = *xp ^ *yp; *xp = *xp ^ *yp; } public: static void main(string[ ] args) { int* x = new int{10}; swap(&x, &x); cout << ""After swap(&x, &x): x = "" << x[0] << endl; } } ",4.918136835098267,0.7980769230769231,0.7258689521005839,0.6323837392321741,0.4444444444444444,0.5760019507958551
8793,Java,C++,"class GFG { static void divideString ( String str , int n ) { int str_size = str . length ( ) ; int part_size ; if ( str_size % n != 0 ) { System . out . println ( "" Invalid ▁ Input : ▁ String ▁ size "" + "" is ▁ not ▁ divisible ▁ by ▁ n "" ) ; return ; } part_size = str_size / n ; for ( int i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) System . out . println ( ) ; System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = "" a _ simple _ divide _ string _ quest "" ; divideString ( str , 4 ) ; } }","#include <iostream> NEW_LINE #include <string.h> NEW_LINE using namespace std ; class gfg { public : void divideString ( char str [ ] , int n ) { int str_size = strlen ( str ) ; int i ; int part_size ; if ( str_size % n != 0 ) { cout << "" Invalid ▁ Input : ▁ String ▁ size "" ; cout << "" ▁ is ▁ not ▁ divisible ▁ by ▁ n "" ; return ; } part_size = str_size / n ; for ( i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) cout << endl ; cout << str [ i ] ; } } } ; int main ( ) { gfg g ; char str [ ] = "" a _ simple _ divide _ string _ quest "" ; g . divideString ( str , 4 ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; class GFG { public: static void divideString(string str, int n) { int str_size = str.length(); if (str_size % n != 0) { cout << ""Invalid Input : String size is not divisible by n""; return; } int part_size = str_size / n; for (int i = 0; i < str_size; ++i) { if(i % part_size == 0) cout << endl; cout << str.at(i); } } }; int main() { string str = "" a_ simple_ divide_ string_ quest ""; GFG::divideString(str, 4); } ",4.812442302703857,0.6803918968204855,0.5986695667734545,0.4706975831770068,0.875,0.5919883082239048
2142,Java,C++,class GFG { static int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA ; int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } public static void main ( String [ ] args ) { int x = 23 ; System . out . println ( swapBits ( x ) ) ; } },#include <bits/stdc++.h> NEW_LINE using namespace std ; unsigned int swapBits ( unsigned int x ) { unsigned int even_bits = x & 0xAAAAAAAA ; unsigned int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } int main ( ) { unsigned int x = 23 ; cout << swapBits ( x ) ; return 0 ; },#include <iostream> using namespace std; class GFG { public: static int swapBits(int x) { int even_bits = x & 0xAAAAAAAA; int odd_bits = x & 0x55555555; even_bits >>= 1; odd_bits <<= 1; return (even_bits | odd_bits); } }; int main(void) { int x = 23; cout << GFG::swapBits(x) << endl; } ,4.492038011550903,0.8072289156626506,0.7223195405497528,0.5655972875761835,0.5,0.5459181013033284
1683,Java,C++,"class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( "" First ▁ equilibrium ▁ index ▁ is ▁ "" + equi . equilibrium ( arr , arr_size ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" First ▁ equilibrium ▁ index ▁ is ▁ "" << equilibrium ( arr , arr_size ) ; return 0 ; }","#include <iostream> using namespace std; class EquilibriumIndex { public: int equilibrium(int arr[], int n) { int sum = 0; int leftsum = 0; for (int i = 0; i < n; ++i) sum += arr[i]; for (int i = 0; i < n; ++i) { sum -= arr[i]; if (leftsum == sum) return i; leftsum += arr[i]; } return -1; } }; int main() { EquilibriumIndex equi = EquilibriumIndex(); int arr[] = {-7, 1, 5, 2, -4, 3, 0}; int arr_size = sizeof(arr)/sizeof(arr[0]); cout << ""First equilibrium index is: "" << equi.equilibrium(arr, arr_size) << endl; } ",5.407318115234375,0.8713450292397661,0.831835599380241,0.759651182187703,0.8,0.771755827531392
1862,Java,C++,"class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","#include<iostream> using namespace std; class Knapsack { static int max(int a , int b){ return (a > b) ? a : b ;} static int knapSack(int W, int wt[], int val[], int n){ int i, w; int K[n+1][W+1]; for(i=0;i<=n;i++) { for(w = 0 ; w <= W ; w ++ ){ if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i-1] <= w) K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); else K[i][w] = K[i-1][w]; } } return K[n][W]; } public: static void main(int args[]){ int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val)/sizeof(val[0]); cout<<knapSack(W, wt, val, n)<<endl; <｜begin▁of▁sentence｜>} ",9.1148841381073,0.8521510769632048,0.8093529760620746,0.7418229360641905,0.7142857142857143,0.7335617695306476
2143,Java,C++,"class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned i = 1 , pos = 1 ; while ( ! ( i & n ) ) { i = i << 1 ; ++ pos ; } return pos ; } int main ( void ) { int n = 16 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","#include<iostream> using namespace std; class GFG { static bool isPowerOfTwo(int n) { return (n > 0 && ((n & (n - 1)) == 0)); } static int findPosition(int n) { if (!isPowerOfTwo(n)) return -1; int i = 1, pos = 1; while ((i & n) == 0) { i = i << 1; ++pos; } return pos; } public: static void main(string args[]) { int n = 16; int pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; n = 12; pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; n = 128; pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; } }; ",8.910903930664062,0.8625123240010557,0.7650256219436593,0.6170173182156251,0.6666666666666666,0.6319121227509376
1703,Java,C++,"class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int count [ ] = new int [ size ] ; int i ; System . out . println ( "" Repeated ▁ elements ▁ are ▁ : ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) System . out . print ( arr [ i ] + "" ▁ "" ) ; else count [ arr [ i ] ] ++ ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int * count = new int [ sizeof ( int ) * ( size - 2 ) ] ; int i ; cout << "" ▁ Repeating ▁ elements ▁ are ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << "" ▁ "" ; else count [ arr [ i ] ] ++ ; } } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include <iostream> using namespace std; class RepeatElement { void printRepeating (int arr[], int size){ int count[size] = {0}; cout << ""Repeated elements are : ""; for(int i = 0; i < size; i++) { if (count[arr[i]] == 1) cout << arr[i]<<"" ""; else count[arr[i]] ++; } } public: static void main(string args[]){ RepeatElement repeat = RepeatElement(); int arr[] = {4,2,4,5,2,3,1}; int arr_size = sizeof(arr)/sizeof(arr[0]); repeat.printRepeating(arr, arr_size); } }; int main(){ RepeatElement::main({}); } ",6.207020998001099,0.7763975155279503,0.6931060256071355,0.5735245597290958,0.6666666666666666,0.601467191810367
7056,Java,C++,"class EggDrop { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int eggDrop ( int n , int k ) { int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = Integer . MAX_VALUE ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } public static void main ( String args [ ] ) { int n = 2 , k = 10 ; System . out . println ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst "" + "" ▁ case ▁ with ▁ "" + n + "" ▁ eggs ▁ and ▁ "" + k + "" ▁ floors ▁ is ▁ "" + eggDrop ( n , k ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int eggDrop ( int n , int k ) { int eggFloor [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = INT_MAX ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } int main ( ) { int n = 2 , k = 36 ; cout << "" Minimum number of trials "" STRNEWLINE TABSYMBOL TABSYMBOL "" in worst case with "" << n << "" ▁ eggs ▁ and ▁ "" << k << "" ▁ floors ▁ is ▁ "" << eggDrop ( n , k ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; class EggDrop { static int max(int a, int b) { return (a > b) ? a : b; } static int eggDrop(int n, int k) { vector<vector<int>> eggFloor(n + 1, vector<int>(k + 1)); int res; for (int i = 1; i <= n; i++){ eggFloor[i][1] = 1; eggFloor[i][0] = 0; } for (int j = 1; j <= k; j++) { eggFloor[1][j] = j; } for (int i = 2; i <= n; i++){ for (int j = 2; j <= k; j++) { eggFloor[i][j] = INT_MAX; for (int x = 1; x <= j; x++) { res = 1 + max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]); if (res < eggFloor[i][j]) { eggFloor[i][j] = res; } } } } return eggFloor[n][k]; } public: static void main(int argc, char* args[]) { int n = 2, k = 10; cout << ""Minimum number of trials in worst case with "" << n << "" eggs and "" << k << "" floors is "" << eggDrop(n, k) << endl; } }; ",13.140012979507446,0.8463855421686747,0.7866432205962421,0.6921046937130757,0.6666666666666666,0.684473285599153
13544,Java,C++,"class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "" LCM ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + lcm ( a , b ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; long long gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } long long lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } int main ( ) { int a = 15 , b = 20 ; cout << "" LCM ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << lcm ( a , b ) ; return 0 ; }","#include<iostream> using namespace std; class Test { static int gcd (int a , int b ){ if(a == 0) return b; return gcd(b % a, a); } static int lcm (int a , int b ){ return (a / gcd(a, b)) * b; } public: static void main( string[] args){ int a = 15 , b = 20 ; cout<<"" LCM of ""<< a <<"" and ""<< b <<"" is ""<< lcm (a, b)<<endl; } }; ",5.035494804382324,0.8515625,0.7549459619812606,0.6142126834255923,0.6,0.6099488783979146
1610,Java,C++,"class MergeArrays { void moveToEnd ( int mPlusN [ ] , int size ) { int i , j = size - 1 ; for ( i = size - 1 ; i >= 0 ; i -- ) { if ( mPlusN [ i ] != - 1 ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } } void merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) || ( j == n ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { MergeArrays mergearray = new MergeArrays ( ) ; int mPlusN [ ] = { 2 , 8 , - 1 , - 1 , - 1 , 13 , - 1 , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = N . length ; int m = mPlusN . length - n ; mergearray . moveToEnd ( mPlusN , m + n ) ; mergearray . merge ( mPlusN , N , m , n ) ; mergearray . printArray ( mPlusN , m + n ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NA  -1 NEW_LINE void moveToEnd ( int mPlusN [ ] , int size ) { int j = size - 1 ; for ( int i = size - 1 ; i >= 0 ; i -- ) if ( mPlusN [ i ] != NA ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } int merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( j == n ) || ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int mPlusN [ ] = { 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = sizeof ( N ) / sizeof ( N [ 0 ] ) ; int m = sizeof ( mPlusN ) / sizeof ( mPlusN [ 0 ] ) - n ; moveToEnd ( mPlusN , m + n ) ; merge ( mPlusN , N , m , n ) ; printArray ( mPlusN , m + n ) ; return 0 ; }","#include <iostream> using namespace std; class MergeArrays { public: void moveToEnd(int mPlusN[], int size) { int i, j = size - 1; for (i = size - 1; i >= 0; i--) { if (mPlusN[i] != -1) { mPlusN[j] = mPlusN[i]; j--; } } } void merge(int mPlusN[], int N[], int m, int n) { int i = n; int j = 0; int k = 0; while (k < (m + n)) { if ((i < (m + n) && mPlusN[i] <= N[j]) || (j == n)) { mPlusN[k] = mPlusN[i]; k++; i++; } else { mPlusN[k] = N[j]; k++; j++; } } } void printArray(int arr[], int size) { for (int i = 0; i < size; i++) cout << arr[i] << "" ""; cout << endl; } }; int main() { MergeArrays mergearray; int mPlusN[] = {2, 8, -1, -1, -1, 13, -1, 15, 20}; int N[] = {5, 7, 9, 25}; int n = sizeof(N) / sizeof(N[0]); int m = sizeof(mPlusN) / sizeof(mPlusN[0]) - n; mergearray.moveToEnd(mPlusN, m + n); mergearray.merge(mPlusN, N, m, n); mergearray.printArray(mPlusN, m + n); return 0; } ",14.530488967895508,0.9228571428571428,0.8876927186075425,0.8184840491301244,0.8750000000000001,0.835438834391087
11743,Java,C++,"import java . lang . Math ; class GFG { static long nthTermOfTheSeries ( int n ) { long nthTerm ; if ( n % 2 == 0 ) nthTerm = ( long ) Math . pow ( n - 1 , 2 ) + n ; else nthTerm = ( long ) Math . pow ( n + 1 , 2 ) + n ; return nthTerm ; } public static void main ( String [ ] args ) { int n ; n = 8 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 12 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 102 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 9999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int nthTermOfTheSeries ( int n ) { int nthTerm ; if ( n % 2 == 0 ) nthTerm = pow ( n - 1 , 2 ) + n ; else nthTerm = pow ( n + 1 , 2 ) + n ; return nthTerm ; } int main ( ) { int n ; n = 8 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 12 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 102 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 999 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 9999 ; cout << nthTermOfTheSeries ( n ) << endl ; return 0 ; }","#include <cmath> #include <iostream> class GFG { public: static long nthTermOfTheSeries(int n){ long nthTerm; if (n % 2 == 0) nthTerm = pow(n-1, 2) + n; else nthTerm = pow(n+1, 2) + n; return nthTerm; } }; int main() { int n = 8; std::cout << GFG::nthTermOfTheSeries(n) << std::endl; n = 12; std::cout << GFG::nthTermOfTheSeries(n) << std::endl; n = 102; std::cout << GFG::nthTermOfTheSeries(n) << std::endl; n = 999; std::cout << GFG::nthTermOfTheSeries(n) << std::endl; n = 9999; std::cout << GFG::nthTermOfTheSeries(n) << std::endl; } ",6.652842044830322,0.6514285714285715,0.5836862643342002,0.44856373908687436,0.7272727272727273,0.5321764355426302
13474,Java,C++,"class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } public static void main ( String [ ] args ) { int m = 4 , n = 3 ; System . out . println ( "" Count ▁ of ▁ squares ▁ is ▁ "" + countSquares ( m , n ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; int countSquares ( int m , int n ) { if ( n < m ) swap ( m , n ) ; return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } int main ( ) { int m = 4 , n = 3 ; cout << "" Count ▁ of ▁ squares ▁ is ▁ "" << countSquares ( m , n ) ; }","#include<iostream> using namespace std; class GFG { public: static int countSquares(int m, int n){ if (n < m) { int temp = m; m = n; n = temp; } return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2; } }; int main() { int m = 4, n = 3; cout << ""Count of squares is "" << GFG::countSquares(m, n); } ",3.7089672088623047,0.8067226890756303,0.7578107735408071,0.6863333392020418,0.6666666666666666,0.6804333374414292
13562,Java,C++,"class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }","#include <iostream> NEW_LINE using namespace std ; void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << "" ▁ "" << arr [ i ] ; cout << "" STRNEWLINE "" ; return ; } void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } void printSequences ( int n , int k ) { int * arr = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } int main ( ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; return 0 ; }","#include <iostream> using namespace std; void printArray(int arr[], int size){ for (int i = 0; i < size; i++) { cout << arr[i] << "" ""; } cout << endl; } void printSequencesRecur(int arr[], int n, int k, int index){ if (k == 0){ printArray(arr, index); } if (k > 0) { for (int i = 1; i <= n; ++i) { arr[index] = i; printSequencesRecur(arr, n, k-1, index+1); } } } void printSequences(int n, int k){ int* arr = new int[k]; printSequencesRecur(arr, n, k, 0); } int main() { int n = 3; int k = 2; printSequences(n, k); return 0; } ",6.4325270652771,0.893675078561615,0.8632828672274598,0.8019583017775728,1.0,0.8613708112443008
1955,Java,C++,"class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","#include<iostream> #include<string> using namespace std; class GFG { static void search( string pat , string txt ) { int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { int j; for (j=0; j<M; j++) if (txt[i+j]!=pat[j]) break; if (j == M) { cout << ""Pattern found at index ""<< i << endl; i = i + M; } else if(j == 0){ i = i + 1; } else{ i = i + j; } } } public: static void main( string args[]) { string txt="" ABCEABCDABCEABCD ""; string pat="" ABCD ""; search(pat,txt); } }; ",6.008945941925049,0.8103448275862069,0.7465954886012645,0.6422176725485045,0.7777777777777777,0.6828857041172864
2018,Java,C++,"import java . io . * ; import java . util . * ; class GFG { static int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } static int findSmallerInRight ( String str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str . charAt ( i ) < str . charAt ( low ) ) ++ countRight ; return countRight ; } static int findRank ( String str ) { int len = str . length ( ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; for ( int i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } public static void main ( String [ ] args ) { String str = "" string "" ; System . out . println ( findRank ( str ) ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <string.h> NEW_LINE using namespace std ; int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } int findSmallerInRight ( char * str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str [ i ] < str [ low ] ) ++ countRight ; return countRight ; } int findRank ( char * str ) { int len = strlen ( str ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; int i ; for ( i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } int main ( ) { char str [ ] = "" string "" ; cout << findRank ( str ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; class GFG { public: static int fact(int n) { return (n <= 1) ? 1 : n * fact(n - 1); } static int findSmallerInRight(string str, int low, int high) { int countRight = 0; for (int i = low + 1; i <= high; ++i) { if (str[i] < str[low]) ++countRight; } return countRight; <｜begin▁of▁sentence｜>}",4.236743211746216,0.3449975374296204,0.31542627216370217,0.26296417407684275,0.6666666666666666,0.3840749218537899
1656,Java,C++,"class Main { static int findElement ( int arr [ ] , int n , int key ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = arr . length ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) System . out . println ( "" Element ▁ not ▁ found "" ) ; else System . out . println ( "" Element ▁ Found ▁ at ▁ Position : ▁ "" + ( position + 1 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findElement ( int arr [ ] , int n , int key ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return -1 ; } int main ( ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) cout << "" Element ▁ not ▁ found "" ; else cout << "" Element ▁ Found ▁ at ▁ Position : ▁ "" << position + 1 ; return 0 ; }","#include<iostream> using namespace std; int findElement ( int arr [] , int n , int key ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return -1 ; } int main () { int arr[] ={12,34,10,6,40}; int n=sizeof(arr)/sizeof(arr[0]); int key = 40; int position = findElement ( arr , n , key ) ; if ( position == -1 ) cout << "" Element not found ""; else cout << "" Element Found at Position : "" << ( position + 1 ); } ",4.258113145828247,0.8029356099559575,0.7530618451611876,0.6629460698314389,1.0,0.7640622488820072
12321,Java,C++,"import java . io . * ; import java . lang . Math ; class GFG { static void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { double d = Math . pow ( ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) + Math . pow ( z2 - z1 , 2 ) * 1.0 ) , 0.5 ) ; System . out . println ( "" Distance ▁ is ▁ "" + d ) ; return ; } public static void main ( String [ ] args ) { float x1 = 2 ; float y1 = - 5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <iomanip> NEW_LINE #include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { float d = sqrt ( pow ( x2 - x1 , 2 ) + pow ( y2 - y1 , 2 ) + pow ( z2 - z1 , 2 ) * 1.0 ) ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 2 ) ; cout << "" ▁ Distance ▁ is ▁ "" << d ; return ; } int main ( ) { float x1 = 2 ; float y1 = -5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; class GFG { static void distance(float x1, float y1, float z1, float x2, float y2, float z2) { double d = sqrt(pow((x2 - x1), 2.0) + pow((y2 - y1), 2.0) + pow((z2 - z1), 2.0)) * 1.0; cout << ""Distance is "" << d << endl; } public: static void main(string[] args) { float x1 = 2, y1 = -5, z1 = 7, x2 = 3, y2 = 4, z2 = 5; distance(x1, y1, z1, x2, y2, z2); } }; ",4.3677380084991455,0.6732262881431046,0.5881078743055829,0.44416065852732456,0.4,0.43091246096912716
2133,Java,C++,class GFG { public static int getFirstSetBitPos ( int n ) { return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log10 ( 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( getFirstSetBitPos ( n ) ) ; } },#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; class gfg { public : unsigned int getFirstSetBitPos ( int n ) { return log2 ( n & - n ) + 1 ; } } ; int main ( ) { gfg g ; int n = 12 ; cout << g . getFirstSetBitPos ( n ) ; return 0 ; },#include<iostream> #include<cmath> using namespace std; class GFG { public: static int getFirstSetBitPos(int n) { return (int)(((log10(n & -n)) / log10(2)) + 1); } }; int main() { int n = 12; cout << GFG::getFirstSetBitPos(n) << endl; } ,4.82458233833313,0.6794871794871795,0.6087933726884439,0.4444307057180215,0.888888888888889,0.5777681606692817
2190,Java,C++,"class MaximumDiffrence { int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int i , j ; for ( i = 0 ; i < arr_size ; i ++ ) { for ( j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } public static void main ( String [ ] args ) { MaximumDifference maxdif = new MaximumDifference ( ) ; int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; System . out . println ( "" Maximum ▁ difference ▁ is ▁ "" + maxdif . maxDiff ( arr , 5 ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; for ( int i = 0 ; i < arr_size ; i ++ ) { for ( int j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } int main ( ) { int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Maximum ▁ difference ▁ is ▁ "" << maxDiff ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; class MaximumDifference { public: int maxDiff (int arr[], int arr_size) { int max_diff = arr[1] - arr[0]; for(int i = 0; i < arr_size; i++){ for(int j = i+1; j < arr_size; j++){ if (arr[j]-arr[i] > max_diff) max_diff = arr[j]-arr[i]; } } return max_diff; } }; int main() { MaximumDifference maxdif; int arr[] = {1,2,90,10,110}; cout<< ""Maximum difference is "" << maxdif.maxDiff(arr,5) << endl; return 0; } ",5.211343050003052,0.7176692884942162,0.6659025691131816,0.5684801278126066,0.8,0.6379360894688246
1715,Java,C++,"class FindTriplet { boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { System . out . print ( "" Triplet ▁ is ▁ "" + A [ i ] + "" , ▁ "" + A [ j ] + "" , ▁ "" + A [ k ] ) ; return true ; } } } } return false ; } public static void main ( String [ ] args ) { FindTriplet triplet = new FindTriplet ( ) ; int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = A . length ; triplet . find3Numbers ( A , arr_size , sum ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; bool find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { cout << "" Triplet ▁ is ▁ "" << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] ; return true ; } } } } return false ; } int main ( ) { int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = sizeof ( A ) / sizeof ( A [ 0 ] ) ; find3Numbers ( A , arr_size , sum ) ; return 0 ; }","#include <iostream> using namespace std; class FindTriplet { public: bool find3Numbers(int A[], int arr_size, int sum) { for (int i = 0; i < arr_size - 2; i++) { for (int j = i + 1; j < arr_size - 1; j++) { for (int k = j + 1; k < arr<｜begin▁of▁sentence｜>,</i>arr_size; k++) { if (A[i] + A[j] + A[k] == sum) { cout << ""Triplet is "" << A[i] << "", "" << A[j] << "", "" << A[k]; return true; } } } } return false; } }; int main() { FindTriplet triplet; int A[] = {1, 4, 45, 6, 10, 8}; int sum = 22; int arr_size = sizeof(A)/sizeof(A[0]); if (!triplet.find3Numbers(A, arr_size, sum)) { cout << ""No triplet with given sum exists""; } return 0; } ",6.805253982543945,0.8326180257510729,0.7879559940203853,0.714435501117094,0.8333333333333333,0.7501048507819658
12963,Java,C++,"import java . util . * ; class GFG { static int countDigit ( long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "" Number ▁ of ▁ digits ▁ : ▁ "" + countDigit ( n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int countDigit ( long long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } int main ( void ) { long long n = 345289467 ; cout << "" Number ▁ of ▁ digits ▁ : "" << countDigit ( n ) ; return 0 ; }","#include<iostream> using namespace std; int countDigit(long long n) { if (n / 10 == 0) return 1; else return 1 + countDigit(n / 10); } int main() { long long n = 345289467; cout << ""Number of digits: "" << countDigit(n) << endl; return 0; } ",2.667391061782837,0.9199167500399706,0.8636823335562924,0.7789393323376732,0.75,0.7702575326363712
1788,Java,C++,"class BinarySearch { int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , 0 , n - 1 , x ) ; if ( result == - 1 ) System . out . println ( "" Element ▁ not ▁ present "" ) ; else System . out . println ( "" Element ▁ found ▁ at ▁ index ▁ "" + result ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return -1 ; } int main ( void ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int result = binarySearch ( arr , 0 , n - 1 , x ) ; ( result == -1 ) ? cout << "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" : cout << "" Element ▁ is ▁ present ▁ at ▁ index ▁ "" << result ; return 0 ; }","#include<iostream> using namespace std; class BinarySearch{ public: int binarySearch(int arr[], int l, int r, int x){ if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; else if (arr[mid] > x) return binarySearch(arr, l, mid-1, x); else return binarySearch(arr, mid+1, r, x); } return -1; } }; int main() { BinarySearch ob; int arr[] = {2, 3, 4, 10, 40}; int n = sizeof(arr) / sizeof(arr[0]); int x = 10; int result = ob.binarySearch(arr, 0, n - 1, x); if (result == -1) cout << ""Element not present"" << endl; else cout << ""Element found at index: "" << result << endl; } ",5.96822190284729,0.8611535729229767,0.8113338525039826,0.7220768408946469,0.6,0.6854537886262528
9263,Java,C++,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double c = 8.0 ; System . out . println ( area_cicumscribed ( c ) ) ; } },#include <bits/stdc++.h> NEW_LINE #define PI  3.14159265 NEW_LINE using namespace std ; float area_circumscribed ( float c ) { return ( c * c * ( PI / 4 ) ) ; } int main ( ) { float c = 8 ; cout << area_circumscribed ( c ) ; return 0 ; },#include <iostream> using namespace std; const double PI = 3.14159265; double area_circumscribed(double c) { return (c * c * (PI / 4)); } int main() { double c = 8.0; cout << area_circumscribed(c); return 0; } ,2.7978456020355225,0.8448275862068966,0.7699749762199026,0.6656572543882734,0.5714285714285715,0.6373886495003628
12672,Java,C++,import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } int main ( ) { int n = 2 ; cout << AvgofSquareN ( n ) ; return 0 ; },#include <iostream> using namespace std; float avgOfSquareN(int n) { float sum = 0.0f; for (int i = 1; i <= n; i++) sum += static_cast<float>(i * i); return sum / n; } int main() { int n = 2; cout << avgOfSquareN(n) << endl; return <｜begin▁of▁sentence｜>0; } ,5.137033939361572,0.8148148148148148,0.7552286874651746,0.6417995849679489,1.0,0.7492597094775642
2304,Java,C++,"import java . io . * ; class GFG { static void printTwoElements ( int arr [ ] , int size ) { int i ; System . out . print ( "" The ▁ repeating ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { int abs_val = Math . abs ( arr [ i ] ) ; if ( arr [ abs_val - 1 ] > 0 ) arr [ abs_val - 1 ] = - arr [ abs_val - 1 ] ; else System . out . println ( abs_val ) ; } System . out . print ( "" And ▁ the ▁ missing ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) System . out . println ( i + 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = arr . length ; printTwoElements ( arr , n ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printTwoElements ( int arr [ ] , int size ) { int i ; cout << "" ▁ The ▁ repeating ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) - 1 ] > 0 ) arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] ; else cout << abs ( arr [ i ] ) << "" STRNEWLINE "" ; } cout << "" and ▁ the ▁ missing ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) cout << ( i + 1 ) ; } } int main ( ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printTwoElements ( arr , n ) ; }","#include <iostream> #include <cmath> using namespace std; void printTwoElements(int arr[], int size) { cout << ""The repeating element is ""; for (int i = 0; i < size; i++) { int abs_val = abs(arr[i]); if (arr[abs_val - 1] > 0) arr[abs_val - 1] = -arr[abs_val - 1]; else cout << abs_val << endl; } cout << ""And the missing element is ""; for (int i = 0; i < size; i++) { if (arr[i] > 0) cout << (i + 1) << endl; } } int main() { int arr[] = {7, 3, 4, 5, 5, 6, 2}; int n = sizeof(arr)/sizeof(arr[0]); printTwoElements(arr, n); return 0; } ",6.328773021697998,0.7832079489400262,0.722677613834457,0.619082121410939,0.9090909090909091,0.70608475771493
2148,Java,C++,"import java . io . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( "" After ▁ swap : ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; return 0 ; }","#include <iostream> using namespace std; int main() { int x = 10, y = 5; x = x ^ y; y = x ^ y; x = x ^ y; cout << ""After swap: x = "" << x << "", y = "" << y << endl; return 0; } ",2.16339111328125,0.9050624995388242,0.855271989586616,0.78465895215158,1.0,0.8492612665061059
9291,Java,C++,"import java . io . * ; class GFG { static float area ( float r ) { return ( float ) ( ( 0.5 ) * ( 3.14 ) * ( r * r ) ) ; } static float perimeter ( float r ) { return ( float ) ( ( 3.14 ) * ( r ) ) ; } public static void main ( String [ ] args ) { float r = 10 ; System . out . println ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" + area ( r ) ) ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Semicircle : "" + + perimeter ( r ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; float area ( float r ) { return ( 0.5 ) * ( 3.14 ) * ( r * r ) ; } float perimeter ( float r ) { return ( 3.14 ) * ( r ) ; } int main ( ) { int r = 10 ; cout << "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" << area ( r ) << endl ; cout << "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" << perimeter ( r ) << endl ; return 0 ; }","#include <iostream> class GFG { public: static float area(float r) { return (0.5 * 3.14 * (r*r)); } static float perimeter(float r) { return (3.14 * r); } }; int main() { float r = 10; std::cout << ""The Area of Semicircle: "" << GFG::area(r) << std::endl; std::cout << ""The Perimeter of Semicircle: "" << GFG::perimeter(r) << std::endl; } ",3.667768955230713,0.7699115044247787,0.6422247205271154,0.45689038724173914,0.6666666666666666,0.5198232710692173
2076,Java,C++,"class GFG { static int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; int result = x ^ xor ; return result ; } public static void main ( String [ ] args ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; System . out . println ( "" Result ▁ = ▁ "" + res ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int swapBits ( unsigned int x , unsigned int p1 , unsigned int p2 , unsigned int n ) { unsigned int set1 = ( x >> p1 ) & ( ( 1U << n ) - 1 ) ; unsigned int set2 = ( x >> p2 ) & ( ( 1U << n ) - 1 ) ; unsigned int Xor = ( set1 ^ set2 ) ; Xor = ( Xor << p1 ) | ( Xor << p2 ) ; unsigned int result = x ^ Xor ; return result ; } int main ( ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; cout << "" Result ▁ = ▁ "" << res ; return 0 ; }","#include<iostream> using namespace std; class GFG { public: static int swapBits(int x, int p1, int p2, int n) { int set1 = (x >> p1) & ((1 << n) - 1); int set2 = (x >> p2) & ((1 << n) - 1); int xorr = set1 ^ set2; // ""xor"" is a reserved keyword in C++, so we use the name ""xorr"". xorr = (xorr << p1) | (xorr << p2); int result = x ^ xorr; return result; } }; int main() { int res = GFG::swapBits(28, 0, 3, 2); cout << ""Result = "" << res << endl; } ",7.554880142211914,0.7515151515151515,0.6701314252629162,0.5209864754776238,0.5714285714285715,0.5361191042629081
12300,Java,C++,"class Test { static int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int a = 0 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","#include <iostream> using namespace std; class Test { static int gcd (int a , int b ){ if(a == 0 && b == 0) return 0; if(a == 0) return b; if(b == 0) return a; if(a == b) return a; if(a > b) return gcd (a-b, b); return gcd (a, b-a); } public: static void main (string[] args ){ int a = 98 , b = 56; cout << ""GCD of ""<< a <<"" and ""<< b <<"" is "" << gcd( a , b) << endl ; <｜begin▁of▁sentence｜>} // This line seems to be missing in your Java code. It's likely intended to close the main function, so it should be included here. The closing brace '}' for class Test would also have been present if not done by mistake.",5.566756010055542,0.6428571428571429,0.6021937915964949,0.5404862842378881,0.5454545454545454,0.5419767626028853
2311,Java,C++,"class FindFourElements { void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) { if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) System . out . print ( A [ i ] + "" ▁ "" + A [ j ] + "" ▁ "" + A [ k ] + "" ▁ "" + A [ l ] ) ; } } } } } public static void main ( String [ ] args ) { FindFourElements findfour = new FindFourElements ( ) ; int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = A . length ; int X = 91 ; findfour . findFourElements ( A , n , X ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) cout << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] << "" , ▁ "" << A [ l ] ; } } } } int main ( ) { int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int X = 91 ; findFourElements ( A , n , X ) ; return 0 ; }","#include <iostream> using namespace std; class FindFourElements { void findFourElements(int A[], int n, int X){ for (int i = 0; i < n - 3; ++i) { for (int j = i + 1; j < n - 2; ++j) { for (int k = j + 1; k < n - 1; ++k) { for (int l = k + 1; l < n; ++l) { if(A[i] + A[j] + A[k] + A[l] == X){ cout << A[i]<<"" ""<< A[j]<<"" ""<< A[k]<<"" ""<< A[l]<<endl; } } } } } } public: static void main(string args[]) { FindFourElements findfour = new FindFourElements(); int A[] = {10, 20, 30, 40, 1, 2}; int n = A.length; int X = 91; findfour.findFourElements(A, n, X); } } ",7.107815980911255,0.8722466960352423,0.8265175508959901,0.7401131101173604,0.6153846153846154,0.7026945616975369
836,Java,C++,"class GFG { static int identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) System . out . print ( 1 + "" ▁ "" ) ; else System . out . print ( 0 + "" ▁ "" ) ; } System . out . println ( ) ; } return 0 ; } public static void main ( String args [ ] ) { int size = 5 ; identity ( size ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int Identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) cout << 1 << "" ▁ "" ; else cout << 0 << "" ▁ "" ; } cout << endl ; } return 0 ; } int main ( ) { int size = 5 ; Identity ( size ) ; return 0 ; }","#include<iostream> using namespace std; class GFG { public: static int identity (int num){ for(int row = 0; row < num ; row++){ for(int col = 0; col < num ; col++){ if (row == col) cout << 1 << "" \u2581 ""; else cout << 0 << "" \u2581 ""; } cout<<endl; } return 0; } }; int main(){ int size = 5; GFG::identity(size); } ",4.309406995773315,0.8425925925925926,0.7786858665608265,0.6442402007232507,0.7692307692307693,0.6817373712755063
7322,Java,C++,"class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","#include <iostream> #include <string.h> class GFG { static void search(std::string pat, std::string txt){ int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { int j; for (j=0; j<M; j++) if(txt[i + j] != pat[j]) break; if(j == M){ std::cout << ""Pattern found at index "" << i << '\n'; i = i+M; <｜begin▁of▁sentence｜>} else if (j==0) { i++; } else { i += j; } } } public: static void main(std::string args[]) { std::string txt = "" ABCEABCDABCEABCD ""; std::string pat = "" ABCD ""; search(pat, txt); } }; ",6.0475170612335205,0.6961325966850829,0.6124852010840436,0.4920071925985882,0.7777777777777777,0.577738368152345
747,Java,C++,"class GFG { private static void printSorted ( int [ ] arr , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; System . out . print ( arr [ start ] + "" ▁ "" ) ; printSorted ( arr , start * 2 + 2 , end ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; printSorted ( arr , 0 , arr . length - 1 ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printSorted ( int arr [ ] , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; cout << arr [ start ] << "" ▁ "" ; printSorted ( arr , start * 2 + 2 , end ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; int arr_size = sizeof ( arr ) / sizeof ( int ) ; printSorted ( arr , 0 , arr_size - 1 ) ; getchar ( ) ; return 0 ; }","#include <iostream> using namespace std; class GFG { private: static void printSorted(int arr[], int start, int end) { if (start > end) return; printSorted(arr, start*2+1, end); cout << arr[start] << "" ""; printSorted(arr, start*2+2, end); } public: static void main(string args[]) { int arr[] = {4, 2, 5, 1, 3}; printSorted(arr, 0, sizeof(arr)/sizeof(int)-1); } }; ",5.121853828430176,0.8024932477706187,0.7527028051130014,0.6543643341515777,0.6666666666666666,0.6580550339061043
13565,Java,C++,"class GFG { static int MAX = 11 ; static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . println ( n + "" ▁ is ▁ multiple ▁ "" + "" of ▁ 5"" ) ; else System . out . println ( n + "" ▁ is ▁ not ▁ a ▁ "" + "" multiple ▁ of ▁ 5"" ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; # define MAX  11 NEW_LINE bool isMultipleof5 ( int n ) { char str [ MAX ] ; int len = strlen ( str ) ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } int main ( ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) cout << n << "" ▁ is ▁ multiple ▁ of ▁ 5"" << endl ; else cout << n << "" ▁ is ▁ not ▁ multiple ▁ of ▁ 5"" << endl ; return 0 ; }","#include<iostream> #include<string> using namespace std; class GFG { static int MAX ; static bool isMultipleof5(int n) { string str = to_string(n); if (str[str.length() - 1] == '5' || str[str.length() - 1] == '0') return true; return false; } public: static void main(string args[]) { int n = 19; if (isMultipleof5(n)) cout << n << "" is multiple of 5"" << endl; else cout << n << "" is not a multiple of 5"" << endl; } }; int GFG::MAX=11; //Initialization for MAX. You don't need to do it in Java because JVM automatically initializes class variables. int main() { string args[] = {}; GFG::main(args); } ",5.322540760040283,0.6,0.5145915557738419,0.4179358892641444,0.625,0.48005512248490106
1701,Java,C++,"import java . util . * ; import java . lang . * ; import java . io . * ; class PeakElement { static int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } static int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = arr . length ; System . out . println ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" + findPeak ( arr , n ) ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" << findPeak ( arr , n ) ; return 0 ; }","#include <iostream> using namespace std; int findPeakUtil(int arr[], int low, int high, int n){ int mid = low + (high - low)/2; if ((mid == 0 || arr[mid-1] <= arr[mid]) && (mid == n-1 || arr[mid+1] <= arr[mid])) return mid; else if(mid > 0 && arr[mid-1] > arr[mid]) return findPeakUtil(arr, low, mid - 1, n); else return findPeakUtil(arr, mid + 1, high, n); } int findPeak(int arr[], int n){ return findPeakUtil(arr, 0, n-1, n); } int main(){ int arr[] = {1,3,20,4,1,0}; int n = sizeof(arr) / sizeof(arr[0]); cout << ""Index of a peak point is: ""<< findPeak(arr, n) << ""\n""; } ",6.375409841537476,0.8115326441340832,0.7701793439741751,0.7020201271458929,1.0,0.7914140890021251
2147,Java,C++,"import java . io . * ; class GFG { public static void main ( String [ ] args ) { int x = 10 ; int y = 5 ; x = x * y ; y = x / y ; x = x / y ; System . out . println ( "" After ▁ swaping : "" + "" ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x * y ; y = x / y ; x = x / y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; }","#include <iostream> //imports iostream library using namespace std; int main() { //public static void main(String[] args) int x = 10; //int x = Integer.parseInt(""10""); int y = 5; //int y = Integer.parseInt(""5""); x = x * y; //x = x * y y = x / y; //y = x / y x = x / y; //x = x / y cout << ""After swapping: "" << "" x = "" << x << "", y = "" << y << endl; //System.out.println("" After ▁ swaping : ""+"" ▁ x ▁ = ▁ "" + x +"", ▁ y ▁ = ▁ ""+ y) return 0; } ",6.265180826187134,0.43870967741935485,0.4029634672373453,0.3098436253135828,0.4,0.33689053771950794
3997,Java,C++,"class Main { static void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNSE ( arr , n ) ; } }","#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNSE ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; class MainClass { public: static void printNSE(int arr[], int n){ int next, i, j; for (i=0; i<n; i++){ next = -1; for (j=i+1; j<n; j++){ if (arr[i] > arr[j]){ next = arr[j]; break; } } cout<< arr[i] <<"" - ""<< next <<endl; } } }; int main() { int arr[] = {11, 13, 21, 3}; int n = sizeof(arr)/sizeof(arr[0]); MainClass::printNSE(arr,n); } ",6.58775782585144,0.8146570194756164,0.7766912459247662,0.706198910418219,0.7142857142857143,0.7086249515784676
2144,Java,C++,"class GFG { static boolean isPowerOfTwo ( int n ) { return n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int count = 0 ; while ( n > 0 ) { n = n >> 1 ; ++ count ; } return count ; } public static void main ( String [ ] args ) { int n = 0 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned count = 0 ; while ( n ) { n = n >> 1 ; ++ count ; } return count ; } int main ( void ) { int n = 0 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","#include <iostream> using namespace std; class GFG { static bool isPowerOfTwo(int n) { return n > 0 && ((n & (n - 1)) == 0); } static int findPosition(int n) { if (!isPowerOfTwo(n)) return -1; int count = 0; while (n > 0) { n = n >> 1; ++count; } return count; } public: static void main(string args[]) { int n = 0; int pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; n = 12; pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; n = 128; pos = findPosition(n); if (pos == -1) cout << ""n = "" << n << "", Invalid number"" << endl; else cout << ""n = "" << n << "", Position "" << pos << endl; } }; ",8.947914600372314,0.8487770190281848,0.7535267568171018,0.6137626288258943,0.6666666666666666,0.629633840178126
9367,Java,C++,"import java . io . * ; class GFG { static void mirror_point ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; System . out . print ( "" x3 ▁ = ▁ "" + x3 + "" ▁ "" ) ; System . out . print ( "" y3 ▁ = ▁ "" + y3 + "" ▁ "" ) ; System . out . print ( "" z3 ▁ = ▁ "" + z3 + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int a = 1 ; int b = - 2 ; int c = 0 ; int d = 0 ; int x1 = - 1 ; int y1 = 3 ; int z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; } }","#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <iomanip> NEW_LINE using namespace std ; void mirror_point ( float a , float b , float c , float d , float x1 , float y1 , float z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 1 ) ; cout << "" ▁ x3 ▁ = ▁ "" << x3 ; cout << "" ▁ y3 ▁ = ▁ "" << y3 ; cout << "" ▁ z3 ▁ = ▁ "" << z3 ; } int main ( ) { float a = 1 ; float b = -2 ; float c = 0 ; float d = 0 ; float x1 = -1 ; float y1 = 3 ; float z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; return 0 ; }","#include<iostream> using namespace std; class GFG { static void mirror_point(int a , int b , int c , int d , int x1 , int y1 , int z1 ) { float k = (-a*x1 -b*y1 -c*z1 -d) / (float)(a*a + b*b + c*c); float x2= a*k + x1; float y2= b*k + y1; float z2= c*k + z1; float x3= 2*x2-x1; float y3= 2*y2-y1; float z3= 2*z2-z1; cout << ""x3 = "" << x3 <<"" ""; cout << ""y3 = "" << y3 <<"" ""; cout << ""z3 = "" << z3 <<"" ""; } public: static void main( string args[] ) { int a = 1; int b = -2; int c = 0; int d = 0; int x1= -1; int y1= 3; int z1= 4; mirror_point(a ,b ,c ,d ,x1 ,y1 ,z1 ); } }; ",7.336321115493774,0.6307138391312977,0.5390846373246991,0.3799576366359879,0.6,0.4459703456451915
