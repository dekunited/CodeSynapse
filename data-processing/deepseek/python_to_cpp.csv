example_id,start_language,target_language,source_code,reference_code,translated_code,inference_time,bleu_1,bleu_2,bleu_4,keyword_match,codebleu
2048,Python,C++,"def calcAngle ( h , m ) : NEW_LINE INDENT if ( h < 0 or m < 0 or h > 12 or m > 60 ) : NEW_LINE INDENT print ( ' Wrong ▁ input ' ) NEW_LINE DEDENT if ( h == 12 ) : NEW_LINE INDENT h = 0 NEW_LINE DEDENT if ( m == 60 ) : NEW_LINE INDENT m = 0 NEW_LINE h += 1 ; NEW_LINE if ( h > 12 ) : NEW_LINE INDENT h = h - 12 ; NEW_LINE DEDENT DEDENT hour_angle = 0.5 * ( h * 60 + m ) NEW_LINE minute_angle = 6 * m NEW_LINE angle = abs ( hour_angle - minute_angle ) NEW_LINE angle = min ( 360 - angle , angle ) NEW_LINE return angle NEW_LINE DEDENT h = 9 NEW_LINE m = 60 NEW_LINE print ( ' Angle ▁ ' , calcAngle ( h , m ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int min ( int x , int y ) { return ( x < y ) ? x : y ; } int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) printf ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } float hour_angle = 0.5 * ( h * 60 + m ) ; float minute_angle = 6 * m ; float angle = abs ( hour_angle - minute_angle ) ; angle = min ( 360 - angle , angle ) ; return angle ; } int main ( ) { cout << calcAngle ( 9 , 60 ) << endl ; cout << calcAngle ( 3 , 30 ) << endl ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; double calcAngle(int h, int m) { if (h < 0 || m < 0 || h > 12 || m > 60) { cout << ""Wrong input"" << endl; return -1.0; // Returning a default error value } if(h == 12) { h = 0; } if(m == 60) { m = 0; h += 1; if (h > 12){ h -= 12; } double hour_angle = 0.5 * (h * 60 + m); double minute_angle = 6 * m; double angle = abs(hour_angle - minute_angle); if(360 - angle < angle){ return 360 - angle; // Return the smaller of two possible angles. } else { return angle; } } int main() { int h = 9, m = 60; cout << ""Angle is: "" << calcAngle(h, m) << endl; return 0; } ",8.255122900009155,0.7623762376237624,0.6633086206215234,0.49809462981523256,0.8000000000000002,0.5886662408706629
13186,Python,C++,"def moduloMultiplication ( a , b , mod ) : NEW_LINE INDENT a = a % mod ; NEW_LINE while ( b ) : NEW_LINE INDENT if ( b & 1 ) : NEW_LINE INDENT res = ( res + a ) % mod ; NEW_LINE DEDENT a = ( 2 * a ) % mod ; NEW_LINE DEDENT return res ; NEW_LINE DEDENT a = 10123465234878998 ; NEW_LINE b = 65746311545646431 ; NEW_LINE m = 10005412336548794 ; NEW_LINE print ( moduloMultiplication ( a , b , m ) ) ; NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; long long moduloMultiplication ( long long a , long long b , long long mod ) { a %= mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; } return res ; } int main ( ) { long long a = 426 ; long long b = 964 ; long long m = 235 ; cout << moduloMultiplication ( a , b , m ) ; return 0 ; }","#include <iostream> using namespace std; long long moduloMultiplication(long long a , long long b , long long mod) { a = a % mod; long long res = 0; // initialize result as 0 while (b) { if (b & 1) res = (res + a) % mod; a = (2 * a) % mod; b >>= 1; <｜begin▁of▁sentence｜>}",4.021177291870117,0.6608906516364649,0.5977158623015191,0.5225558316174215,0.6666666666666666,0.565789082132195
2200,Python,C++,"def findMaximum ( arr , low , high ) : NEW_LINE INDENT if low == high : NEW_LINE INDENT return arr [ low ] NEW_LINE DEDENT if high == low + 1 and arr [ low ] >= arr [ high ] : NEW_LINE INDENT return arr [ low ] ; NEW_LINE DEDENT if high == low + 1 and arr [ low ] < arr [ high ] : NEW_LINE INDENT return arr [ high ] NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return findMaximum ( arr , low , mid - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findMaximum ( arr , mid + 1 , high ) NEW_LINE DEDENT DEDENT arr = [ 1 , 3 , 50 , 10 , 9 , 7 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ maximum ▁ element ▁ is ▁ % d "" % findMaximum ( arr , 0 , n - 1 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ maximum ▁ element ▁ is ▁ "" << findMaximum ( arr , 0 , n - 1 ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; int findMaximum(vector<int>& arr, int low, int high){ if (low == high) { return arr[low]; } if ((high == low + 1) && (arr[low] >= arr[high])) { return arr[low]; } if ((high == low + 1) && (arr[low] < arr[high])) { return arr[high]; } int mid = (low + high) / 2; if((arr[mid] > arr[mid+1]) && (arr[mid] > arr[mid-1])) { return arr[mid]; } if((arr[mid] > arr[mid+1]) && (arr[mid] < arr[mid-1])){ return findMaximum(arr, low, mid - 1); }else{ return findMaximum(arr, mid + 1, high); } } int main() { vector<int> arr = {1,3,50,10,9,7,6}; int n = arr.size(); cout<<""The maximum element is "" << findMaximum(arr, 0, n-1) <<endl; } ",7.602782964706421,0.8121631685171198,0.7393344844878195,0.6144467470925107,1.0,0.7301127229647575
9260,Python,C++,PI = 3.14159265 NEW_LINE def length_rope ( r ) : NEW_LINE INDENT return ( ( 2 * PI * r ) + 6 * r ) NEW_LINE DEDENT r = 7 NEW_LINE print ( length_rope ( r ) ) NEW_LINE,#include <bits/stdc++.h> NEW_LINE using namespace std ; #define PI  3.14159265 NEW_LINE float length_rope ( float r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } int main ( ) { float r = 7 ; cout << ceil ( length_rope ( r ) ) << endl ; return 0 ; },#include <iostream> #define PI 3.14159265 #define NEW_LINE std::endl #define INDENT //no indentation here #define DEDENT //no dedentation here double length_rope(double r) { return (2 * PI * r) + (6 * r); } int main() { double r = 7; std::cout << length_rope(r) << NEW_LINE; return 0; } ,7.96354603767395,0.7012987012987013,0.607539776171812,0.4431707729801519,0.6666666666666666,0.5102195410861063
13513,Python,C++,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def phi ( n ) : NEW_LINE INDENT result = 1 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if ( gcd ( i , n ) == 1 ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT for n in range ( 1 , 11 ) : NEW_LINE INDENT print ( "" phi ( "" , n , "" ) ▁ = ▁ "" , phi ( n ) , sep = "" "" ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int phi ( unsigned int n ) { unsigned int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } int main ( ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) cout << "" phi ( "" << n << "" ) ▁ = ▁ "" << phi ( n ) << endl ; return 0 ; }","#include<iostream> using namespace std; int gcd ( int a , int b ) { if ( a == 0 ) return b; return gcd ( b % a , a ); } int phi ( int n ) { int result = 1; for(int i=2; i<n; ++i) if(gcd(i, n)==1) result+=1; return result; } int main() { for (int n = 1; n <= 10 ; ++n ) cout << ""phi ("" << n << "") = "" << phi(n) << endl; return <｜begin▁of▁sentence｜>42",4.091495990753174,0.8464901015955005,0.8058299721453743,0.7226778398568715,1.0,0.8058744878998101
2000,Python,C++,"def pow ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT answer = a NEW_LINE increment = a NEW_LINE for i in range ( 1 , b ) : NEW_LINE INDENT for j in range ( 1 , a ) : NEW_LINE INDENT answer += increment NEW_LINE DEDENT increment = answer NEW_LINE DEDENT return answer NEW_LINE DEDENT print ( pow ( 5 , 3 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } int main ( ) { cout << pow ( 5 , 3 ) ; return 0 ; }","#include<iostream> using namespace std; int pow(int a , int b ){ if (b == 0){ return 1 ; } int answer = a ; int increment = a ; for (int i = 1 ; i < b ;i++ ){ for (int j = 1 ;j<a;j++){ answer += increment ; } increment = answer ; } return answer ; } int main(){ cout << pow(5,3)<<endl; } ",3.2739417552948,0.8461238451627283,0.7961424699549058,0.6957447122266966,1.0,0.7870212985586876
1682,Python,C++,"def equilibrium ( arr ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT leftsum += arr [ j ] NEW_LINE DEDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT rightsum += arr [ j ] NEW_LINE DEDENT if leftsum == rightsum : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( equilibrium ( arr ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << equilibrium ( arr , arr_size ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; int equilibrium(const vector<int>& arr){ int leftsum = 0, rightsum = 0, n = arr.size(); for(int i=0; i<n; ++i){ leftsum = 0; rightsum = 0; for(int j=0; j<i; ++j) leftsum += arr[j]; for(int j=i+1; j<n; ++j) rightsum += arr[j]; if (leftsum == rightsum) return i; } return -1; } int main(){ vector<int> arr = {-7, 1, 5, 2, -4, 3, 0}; cout << equilibrium(arr)<<endl; return <｜begin▁of▁sentence｜>0; } ",8.367204189300537,0.7755784297961125,0.6918746251112661,0.5618516490622432,0.888888888888889,0.6599628210102368
13511,Python,C++,"def modInverse ( a , m ) : NEW_LINE INDENT m0 = m NEW_LINE y = 0 NEW_LINE x = 1 NEW_LINE if ( m == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT while ( a > 1 ) : NEW_LINE INDENT q = a // m NEW_LINE t = m NEW_LINE m = a % m NEW_LINE a = t NEW_LINE t = y NEW_LINE y = x - q * y NEW_LINE x = t NEW_LINE DEDENT if ( x < 0 ) : NEW_LINE INDENT x = x + m0 NEW_LINE DEDENT return x NEW_LINE DEDENT a = 3 NEW_LINE m = 11 NEW_LINE print ( "" Modular ▁ multiplicative ▁ inverse ▁ is "" , modInverse ( a , m ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m , a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } int main ( ) { int a = 3 , m = 11 ; cout << "" Modular ▁ multiplicative ▁ inverse ▁ is ▁ "" << modInverse ( a , m ) ; return 0 ; }","#include <iostream> using namespace std; int modInverse (int a, int m){ int m0 = m, y = 0, x = 1; if(m == 1) return 0; while(a > 1){ int q = a / m; int t = m; m = a % m; a = t; t = y; y = x - q * y; x = t; } if(x < 0) x += m0; return x; } int main(){ int a = 3, m = 11; cout<<""Modular multiplicative inverse is ""<<modInverse(a,m)<<endl; return 0; } ",4.707891941070557,0.9508336923796606,0.9184954271417053,0.8669827132360032,1.0,0.9068878992652021
1994,Python,C++,"def isLucky ( n ) : NEW_LINE INDENT next_position = n NEW_LINE if isLucky . counter > n : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % isLucky . counter == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT next_position = next_position - next_position / isLucky . counter NEW_LINE isLucky . counter = isLucky . counter + 1 NEW_LINE return isLucky ( next_position ) NEW_LINE DEDENT isLucky . counter = 2 NEW_LINE x = 5 NEW_LINE if isLucky ( x ) : NEW_LINE INDENT print x , "" is ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT else : NEW_LINE INDENT print x , "" is ▁ not ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define bool  int NEW_LINE bool isLucky ( int n ) { static int counter = 2 ; int next_position = n ; if ( counter > n ) return 1 ; if ( n % counter == 0 ) return 0 ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } int main ( ) { int x = 5 ; if ( isLucky ( x ) ) cout << x << "" ▁ is ▁ a ▁ lucky ▁ no . "" ; else cout << x << "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ; }","#include <iostream> using namespace std; int counter = 2; // initialized outside all functions int isLucky(int n) { if (counter > n) { return 1; } if (n % counter == 0) { return 0; } int next_position = n - n / counter; counter += 1; return isLucky(next_position); } int main() { counter = 2; // resetting the variable since it's a global one. int x = 5; if (isLucky(x)) { cout << x << "" is a Lucky number""<< endl; } else { cout << x << "" is not a Lucky number""<< endl; } } ",5.488477945327759,0.6950354609929078,0.6020061025585459,0.4638876419810415,0.8,0.564721349386729
1824,Python,C++,"def printMaxActivities ( s , f ) : NEW_LINE INDENT n = len ( f ) NEW_LINE print "" The ▁ following ▁ activities ▁ are ▁ selected "" NEW_LINE i = 0 NEW_LINE print i , NEW_LINE for j in xrange ( n ) : NEW_LINE INDENT if s [ j ] >= f [ i ] : NEW_LINE INDENT print j , NEW_LINE i = j NEW_LINE DEDENT DEDENT DEDENT s = [ 1 , 3 , 0 , 5 , 8 , 5 ] NEW_LINE f = [ 2 , 4 , 6 , 7 , 9 , 9 ] NEW_LINE printMaxActivities ( s , f ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; cout << "" Following ▁ activities ▁ are ▁ selected ▁ "" << endl ; i = 0 ; cout << "" ▁ "" << i ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { cout << "" ▁ "" << j ; i = j ; } } } int main ( ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = sizeof ( s ) / sizeof ( s [ 0 ] ) ; printMaxActivities ( s , f , n ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; void printMaxActivities ( vector<int> s , vector<int> f ) { cout << "" The following activities are selected \n""; int i = 0, n = f.size(); cout<<i<<endl; for (int j = 0; j < n; j++) { if (s[j] >= f[i]) { cout << j << endl; i = j; } } } int main() { vector<int> s = {1, 3, 0, 5, 8, 5}; vector<int> f = {2, 4, 6, 7, 9, 9}; printMaxActivities(s, f); } ",7.641211032867432,0.7371950110176863,0.6452345305847617,0.506449425607777,0.888888888888889,0.6211812645921104
13031,Python,C++,"def check ( n ) : NEW_LINE INDENT return 1162261467 % n == 0 NEW_LINE DEDENT n = 9 NEW_LINE if ( check ( n ) ) : NEW_LINE INDENT print ( "" Yes "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" No "" ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; bool check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } int main ( ) { int n = 9 ; if ( check ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","#include <iostream> bool check (int n ){ return 1162261467 % n == 0; } int main() { int n = 9; if(check(n)) { std::cout << ""Yes"" << std::endl; } else { std::cout << ""No"" << std::endl; } return 0; } ",2.5245540142059326,0.7297297297297297,0.6556224521047258,0.557275630723901,1.0,0.6900929415067306
2001,Python,C++,"def multiply ( x , y ) : NEW_LINE INDENT if ( y ) : NEW_LINE INDENT return ( x + multiply ( x , y - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT def pow ( a , b ) : NEW_LINE INDENT if ( b ) : NEW_LINE INDENT return multiply ( a , pow ( a , b - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT DEDENT print ( pow ( 5 , 3 ) ) ; NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int multiply ( int x , int y ) { if ( y ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } int pow ( int a , int b ) { if ( b ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } int main ( ) { cout << pow ( 5 , 3 ) ; getchar ( ) ; return 0 ; }","#include<iostream> using namespace std; int multiply ( int x , int y ) { if ( y ) return x + multiply ( x , y - 1 ); else return 0 ; } int pow ( int a, int b) { if(b) return multiply ( a, pow (a, b-1)); else return 1; } int main() { cout << pow (5,3); return 0; } ",2.8536760807037354,0.8539483397693819,0.8282873595082751,0.7747878933631461,1.0,0.8423515253542022
1705,Python,C++,"def printRepeating ( arr , size ) : NEW_LINE INDENT xor = arr [ 0 ] NEW_LINE n = size - 2 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT xor ^= arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT xor ^= i NEW_LINE DEDENT set_bit_no = xor & ~ ( xor - 1 ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( arr [ i ] & set_bit_no ) : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i & set_bit_no ) : NEW_LINE INDENT x = x ^ i NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ i NEW_LINE DEDENT DEDENT print ( "" The ▁ two ▁ repeating "" , "" elements ▁ are "" , y , x ) NEW_LINE DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int Xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) Xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) Xor ^= i ; set_bit_no = Xor & ~ ( Xor - 1 ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { if ( i & set_bit_no ) x = x ^ i ; else y = y ^ i ; } cout << "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ "" << y << "" ▁ "" << x ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include<iostream> using namespace std; void printRepeating(int arr[], int size){ int xor1 = arr[0]; int n = size-2; for (int i = 1; i < size; i++) { xor1 ^= arr[i]; } int set_bit_no = xor1 & ~(xor1 - 1); int x = 0, y = 0; for (int i = 0; i < size; i++) { if (arr[i] & set_bit_no) x = x ^ arr[i]; else y = y ^ arr[i]; } for (int i = 1; i <= n+1; i++) { if (i & set_bit_no) x = x ^ i; else y = y ^ i; } cout << ""The two repeating elements are "" << y << "", "" << x; } int main() { int arr[] = {4,2,4,5,2,3,1}; int size=sizeof(arr)/sizeof(arr[0]); printRepeating(arr,size); return 0; } ",8.078680992126465,0.7515050975362758,0.6982502396120762,0.6081595066518618,1.0,0.7257116546563032
6659,Python,C++,"def printknapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for w in range ( W + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT res = K [ n ] [ W ] NEW_LINE print ( res ) NEW_LINE w = W NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if res <= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if res == K [ i - 1 ] [ w ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT print ( wt [ i - 1 ] ) NEW_LINE res = res - val [ i - 1 ] NEW_LINE w = w - wt [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE printknapSack ( W , wt , val , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; cout << res << endl ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { cout << "" ▁ "" << wt [ i - 1 ] ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; printknapSack ( W , wt , val , n ) ; return 0 ; }","#include<iostream> #include<vector> #include<algorithm> using namespace std; void printknapsack(int W, int wt[], int val[], int n) { vector<vector<int>> K(n+1, vector<int>(W+1)); for (int i = 0; i <= n; i++){ for (int w = 0; w <= W; w++){ if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i-1] <= w) K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); else K[i][w] = K[i-1][w]; } } int res = K[n][W]; cout << res << ""\n""; int w = W; for (int i = n; i > 0; i--) { if (res <= 0) break; if (res == K[i-1][w]) continue; else{ cout << wt[i-1] << ""\n""; res = res - val[i-1]; w = w - wt[i-1]; } } } int main() { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = sizeof(val)/sizeof(val[0]); printknapsack(W, wt, val, n); return 0; } ",13.679188013076782,0.7974070926167931,0.7370581276207525,0.6494928868393441,0.923076923076923,0.7315680977106178
2095,Python,C++,"def fun ( n ) : NEW_LINE INDENT return n & ( n - 1 ) NEW_LINE DEDENT n = 7 NEW_LINE print ( "" The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit "" , fun ( n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int fun ( unsigned int n ) { return n & ( n - 1 ) ; } int main ( ) { int n = 7 ; cout << "" The ▁ number ▁ after ▁ unsetting ▁ the "" ; cout << "" ▁ rightmost ▁ set ▁ bit ▁ "" << fun ( n ) ; return 0 ; }","#include <iostream> using namespace std; int fun(int n) { return n & (n - 1); } int main() { int n = 7; cout << ""The number after unsetting the rightmost set bit: "" << fun(n) << endl; return 0; } ",3.1598100662231445,0.7901683782656941,0.6990743529594715,0.6017107703906356,1.0,0.7211975392734449
1861,Python,C++,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","#include <iostream> #include <vector> #include <algorithm> using namespace std; int knapSack( int W, vector<int>& wt, vector<int>& val, int n ) { if (n == 0 || W == 0) return 0; if (wt[n-1] > W) return knapSack(W, wt, val, n-1); else return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)); } int main() { vector<int> val = {60, 100, 120}; vector<int> wt = {10, 20, 30}; int W = 50; int n = val.size(); cout << knapSack(W, wt, val, n); return 0; } ",6.064915180206299,0.689070223645555,0.6250657534717021,0.540867491760976,1.0,0.6786072442326831
1843,Python,C++,"R = 3 NEW_LINE C = 3 NEW_LINE import sys NEW_LINE def min ( x , y , z ) : NEW_LINE INDENT if ( x < y ) : NEW_LINE INDENT return x if ( x < z ) else z NEW_LINE DEDENT else : NEW_LINE INDENT return y if ( y < z ) else z NEW_LINE DEDENT DEDENT def minCost ( cost , m , n ) : NEW_LINE INDENT if ( n < 0 or m < 0 ) : NEW_LINE INDENT return sys . maxsize NEW_LINE DEDENT elif ( m == 0 and n == 0 ) : NEW_LINE INDENT return cost [ m ] [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) NEW_LINE DEDENT DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define R  3 NEW_LINE #define C  3 NEW_LINE int min ( int x , int y , int z ) ; int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int minCost ( int cost [ R ] [ C ] , int m , int n ) { if ( n < 0 m < 0 ) return INT_MAX ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << minCost ( cost , 2 , 2 ) << endl ; return 0 ; }","#include <iostream> #include <vector> #include <climits> using namespace std; int min(int x, int y, int z) { return (x<y)? ((x<z)?x:z):((y<z)?y:z); } int minCost(vector<vector<int>> cost, int m, int n) { if (n < 0 || m < 0) return INT_MAX; else if (m == 0 && n == 0) return cost[m][n]; else return cost[m][n] + min(minCost(cost, m-1, n-1), minCost(cost, m-1, n), minCost(cost, m, n-1)); } int main() { vector<vector<int>> cost = {{1,2,3},{4,8,2},{1,5,3}}; cout << minCost(cost, 2, 2); return 0; } ",10.068905115127563,0.7153946199085477,0.6604033561510737,0.5737092959720221,1.0,0.7015965071804154
1867,Python,C++,"def max ( x , y ) : NEW_LINE INDENT if ( x > y ) : NEW_LINE INDENT return x NEW_LINE DEDENT return y NEW_LINE DEDENT def lps ( seq , i , j ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] and i + 1 == j ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] ) : NEW_LINE INDENT return lps ( seq , i + 1 , j - 1 ) + 2 NEW_LINE DEDENT return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT seq = "" GEEKSFORGEEKS "" NEW_LINE n = len ( seq ) NEW_LINE print ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is "" , lps ( seq , 0 , n - 1 ) ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int x , int y ) { return ( x > y ) ? x : y ; } int lps ( char * seq , int i , int j ) { if ( i == j ) return 1 ; if ( seq [ i ] == seq [ j ] && i + 1 == j ) return 2 ; if ( seq [ i ] == seq [ j ] ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } int main ( ) { char seq [ ] = "" GEEKSFORGEEKS "" ; int n = strlen ( seq ) ; cout << "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ "" << lps ( seq , 0 , n - 1 ) ; return 0 ; }","#include <iostream> #include <string.h> using namespace std; int max(int x, int y) { return (x > y)? x : y; } int lps(string seq, int i, int j) { if (i == j) return 1; if (seq[i] == seq[j] && i + 1 == j) return 2; if (seq[i] == seq[j]) return lps(seq, i+1, j-1) + 2; return max(lps(seq, i, j-1), lps(seq, i+1, j)); } int main() { string seq = ""GEEKSFORGEEKS""; int n = seq.length(); cout << ""The length of the LPS is "" << lps(seq, 0, n-1); return <｜begin▁of▁sentence｜>0; } ",8.057500839233398,0.832913167570041,0.7774344047937746,0.7022103553115414,0.8571428571428571,0.7486901058609361
1949,Python,C++,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE for i in range ( N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE while ( j < M ) : NEW_LINE INDENT if ( txt [ i + j ] != pat [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if ( j == M ) : NEW_LINE INDENT print ( "" Pattern ▁ found ▁ at ▁ index ▁ "" , i ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT txt = "" AABAACAADAABAAABAA "" NEW_LINE pat = "" AABA "" NEW_LINE search ( pat , txt ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( char * pat , char * txt ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } } int main ( ) { char txt [ ] = "" AABAACAADAABAAABAA "" ; char pat [ ] = "" AABA "" ; search ( pat , txt ) ; return 0 ; }","#include<iostream> #include<string.h> using namespace std; void search ( string pat , string txt ){ int M = pat.length(); int N = txt.length(); for(int i=0 ; i <= N-M ; ++i){ int j = 0; while(j < M){ if(txt[i + j] != pat[j]) { break; } ++j; } if (j == M) { cout << "" Pattern found at index "" << i << endl; } } } int main() { string txt = ""AABAACAADAABAAABAA""; string pat = ""AABA""; search(pat, txt); return <｜begin▁of▁sentence｜>0; } ",5.123463869094849,0.7673331482430957,0.6630059381510498,0.5012130491468451,0.8571428571428571,0.6079919915456486
13418,Python,C++,"import math NEW_LINE def findRoots ( a , b , c ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT print ( "" Invalid "" ) NEW_LINE return - 1 NEW_LINE DEDENT d = b * b - 4 * a * c NEW_LINE sqrt_val = math . sqrt ( abs ( d ) ) NEW_LINE if d > 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ different ▁ "" ) NEW_LINE print ( ( - b + sqrt_val ) / ( 2 * a ) ) NEW_LINE print ( ( - b - sqrt_val ) / ( 2 * a ) ) NEW_LINE DEDENT elif d == 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ same "" ) NEW_LINE print ( - b / ( 2 * a ) ) NEW_LINE print ( "" Roots ▁ are ▁ complex "" ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ + ▁ i "" , sqrt_val ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ - ▁ i "" , sqrt_val ) NEW_LINE DEDENT DEDENT a = 1 NEW_LINE b = - 7 NEW_LINE c = 12 NEW_LINE findRoots ( a , b , c ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void findRoots ( int a , int b , int c ) { if ( a == 0 ) { cout << "" Invalid "" ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ different ▁ STRNEWLINE "" ; cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << "" STRNEWLINE "" << ( double ) ( - b - sqrt_val ) / ( 2 * a ) ; } else if ( d == 0 ) { cout << "" Roots ▁ are ▁ real ▁ and ▁ same ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) ; } { cout << "" Roots ▁ are ▁ complex ▁ STRNEWLINE "" ; cout << - ( double ) b / ( 2 * a ) << "" ▁ + ▁ i "" << sqrt_val << "" STRNEWLINE "" << - ( double ) b / ( 2 * a ) << "" ▁ - ▁ i "" << sqrt_val ; } } int main ( ) { int a = 1 , b = -7 , c = 12 ; findRoots ( a , b , c ) ; return 0 ; }","#include <iostream> #include<cmath> using namespace std; void findRoots(int a, int b, int c) { if (a == 0){ cout << "" Invalid""; return; } double d = pow(b,2) - 4*a*c; double sqrt_val = abs(d); sqrt_val = sqrt(sqrt_val); if (d > 0){ cout << "" Roots are real and different \n""; cout<<(- b + sqrt_val) / (2 * a) <<'\n'; cout<<(- b - sqrt_val) / (2 * a) << '\n'; } else if(d == 0){ cout << "" Roots are real and same \n""; cout << -b / (2*a); cout << "" Roots are complex \n""; printf(""%.5f %s i %.5f\n"", - b / double(2 * a), "" + "", sqrt_val); printf(""%.5f %s i %.5f\n"",- b / double(2*a),"" - "",sqrt_val); } } int main() { int a = 1; int b = -7; int c = 12; findRoots(a,b,c); return 0; } ",10.33128809928894,0.7983361690836023,0.6894930271604963,0.5723679226772531,1.0,0.7006575458740771
1687,Python,C++,"def ceilSearch ( arr , low , high , x ) : NEW_LINE INDENT if x <= arr [ low ] : NEW_LINE INDENT return low NEW_LINE DEDENT i = low NEW_LINE for i in range ( high ) : NEW_LINE INDENT if arr [ i ] == x : NEW_LINE INDENT return i NEW_LINE DEDENT if arr [ i ] < x and arr [ i + 1 ] >= x : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 1 , 2 , 8 , 10 , 10 , 12 , 19 ] NEW_LINE n = len ( arr ) NEW_LINE x = 3 NEW_LINE index = ceilSearch ( arr , 0 , n - 1 , x ) ; NEW_LINE if index == - 1 : NEW_LINE INDENT print ( "" Ceiling ▁ of ▁ % d ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" % x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" ceiling ▁ of ▁ % d ▁ is ▁ % d "" % ( x , arr [ index ] ) ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return -1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == -1 ) cout << "" Ceiling ▁ of ▁ "" << x << "" ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" ; else cout << "" ceiling ▁ of ▁ "" << x << "" ▁ is ▁ "" << arr [ index ] ; return 0 ; }","#include <iostream> #include<vector> using namespace std; int ceilSearch(vector<int>& arr, int low, int high, int x) { if (x <= arr[low]) return low; for (int i = low + 1; i <= high; i++){ if (arr[i] == x) return i; else if(arr[i - 1] < x && arr[i] > x) return i; <｜begin▁of▁sentence｜>} return -1; } int main() { vector<int> arr = {1, 2, 8, 10, 10, 12, 19}; int n = arr.size(); int x = 3; int index = ceilSearch(arr, 0, n - 1, x); if (index == -1) { cout << ""Ceiling of "" << x << "" doesn't exist in array"" << endl; } else { cout << ""ceiling of "" << x << "" is "" << arr[index] << endl; } return 0; } ",7.087640762329102,0.842031071408807,0.7679683380059488,0.6420755451481412,1.0,0.7494528816036988
8588,Python,C++,"def isPalRec ( st , s , e ) : NEW_LINE INDENT if ( s == e ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( st [ s ] != st [ e ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( s < e + 1 ) : NEW_LINE INDENT return isPalRec ( st , s + 1 , e - 1 ) ; NEW_LINE DEDENT return True NEW_LINE DEDENT def isPalindrome ( st ) : NEW_LINE INDENT n = len ( st ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return isPalRec ( st , 0 , n - 1 ) ; NEW_LINE DEDENT st = "" geeg "" NEW_LINE if ( isPalindrome ( st ) ) : NEW_LINE INDENT print "" Yes "" NEW_LINE DEDENT else : NEW_LINE INDENT print "" No "" NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPalRec ( char str [ ] , int s , int e ) { if ( s == e ) return true ; if ( str [ s ] != str [ e ] ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } bool isPalindrome ( char str [ ] ) { int n = strlen ( str ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } int main ( ) { char str [ ] = "" geeg "" ; if ( isPalindrome ( str ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","bool isPalRec(string st, int s, int e) { if (s == e) return true; if (st[s] != st[e]) return false; if (s < e + 1) return isPalRec(st, s+1, e-1); return true; } bool isPalindrome(string st) { int n = st.length(); if (n == 0) return true; return isPalRec(st, 0, n - 1); } int main() { string st = ""geeg""; if (isPalindrome(st)) cout<<""Yes""; else cout<<""No""; return <｜begin▁of▁sentence｜>",5.418842077255249,0.7401029160173012,0.6828145034771101,0.5913505030843832,0.9090909090909091,0.6866726248863408
7323,Python,C++,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256  NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { bool flag = true ; for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) { flag = false ; break ; } if ( flag ) cout << i << "" ▁ "" ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; int main() { int d = 256; string txt = ""GEEKS FOR GEEKS""; string pat = ""GEEK""; int q = 101; int M = pat.length(); int N = txt.length(); int h = 1; for (int i = 0; i < M-1; ++i) { h = (h * d) % q; } int p = 0; int t = 0; for (int i = 0; i < M; ++i) { p = (d * p + pat[i]) % q; t = (d * t + txt[i]) % q; } for (int s = 0; s <= N - M; ++s) { if (p == t) { for (int i = 0; i < M; ++i){ if (txt[s + i] != pat[i]) break; } cout << ""Pattern found at index: "" << s << endl; } if (s < N - M) { t = (d * (t - txt[s] * h) + txt[s + M]) % q; if (t < 0) { t = t + q; } } } } ",10.867630958557129,0.6980359881042743,0.6165679439667351,0.48228946297538283,0.6666666666666666,0.5376026240827679
1944,Python,C++,"def count ( n ) : NEW_LINE INDENT table = [ 0 for i in range ( n + 1 ) ] NEW_LINE table [ 0 ] = 1 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 3 ] NEW_LINE DEDENT for i in range ( 5 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 5 ] NEW_LINE DEDENT for i in range ( 10 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 10 ] NEW_LINE DEDENT return table [ n ] NEW_LINE DEDENT n = 20 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE n = 13 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE","#include <iostream> NEW_LINE using namespace std ; int count ( int n ) { int table [ n + 1 ] , i ; for ( int j = 0 ; j < n + 1 ; j ++ ) table [ j ] = 0 ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } int main ( void ) { int n = 20 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; n = 13 ; cout << "" Count ▁ for ▁ "" << n << "" ▁ is ▁ "" << count ( n ) << endl ; return 0 ; }","#include<iostream> #include<vector> using namespace std; int count(int n){ vector<int> table (n+1); table[0] = 1; for (int i = 3 ; i <= n; i++) { table[i] += table[i-3]; } for (int i = 5 ; i <= n; i++) { table[i] += table[i-5]; } for (int i = 10 ; i <= n; i++) { table[i] += table[i-10]; } return table[n]; } int main(){ int n = 20; cout << ""Count for ""<< n <<"" is "" << count(n); n = 13; cout << ""\n Count for ""<< n <<"" is "" << count(n) ; } ",5.643570899963379,0.7173943603573161,0.6332937705189328,0.5192787629653796,0.8571428571428571,0.6206379912186228
13895,Python,C++,import math NEW_LINE def countBits ( number ) : NEW_LINE INDENT return int ( ( math . log ( number ) / math . log ( 2 ) ) + 1 ) ; NEW_LINE DEDENT num = 65 ; NEW_LINE print ( countBits ( num ) ) ; NEW_LINE,#include <iostream> NEW_LINE #include <cmath> NEW_LINE unsigned countBits ( unsigned int number ) { return ( int ) log2 ( number ) + 1 ; } int main ( ) { unsigned int num = 65 ; std :: cout << countBits ( num ) << ' ' ; return 0 ; },#include <cmath> #include <iostream> int countBits ( int number ) { return static_cast<int>((std::log(number)/std::log(2)) + 1); } int main() { int num = 65; std::cout << countBits(num) << std::endl; return 0; } ,1.985832929611206,0.7464788732394366,0.6612286594214148,0.49223384420535204,1.0,0.6445636909437464
1010,Python,C++,"def calculateSpan ( price , n , S ) : NEW_LINE INDENT S [ 0 ] = 1 NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE INDENT S [ i ] = 1 NEW_LINE j = i - 1 NEW_LINE while ( j >= 0 ) and ( price [ i ] >= price [ j ] ) : NEW_LINE INDENT S [ i ] += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT price = [ 10 , 4 , 5 , 90 , 120 , 80 ] NEW_LINE n = len ( price ) NEW_LINE S = [ None ] * n NEW_LINE calculateSpan ( price , n , S ) NEW_LINE printArray ( S , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int S [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S , n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; void calculateSpan(vector<int>& price, int n, vector<int>& S) { S[0] = 1; for (int i=1; i<n; ++i){ S[i] = 1; int j = i-1; while(j>=0 && price[i] >= price[j]) { S[i] += 1; j -= 1; } } } void printArray(vector<int>& arr, int n) { for (int i=0; i<n; ++i){ cout << arr[i]<<"" ""; } cout<<endl; } int main() { vector<int> price = {10, 4, 5, 90, 120, 80}; int n = price.size(); vector<int> S(n); calculateSpan(price, n, S); printArray(S, n); return 0; } ",8.713357210159302,0.7902439024390244,0.7014025710777589,0.5706698013032325,0.888888888888889,0.6661355275789294
12814,Python,C++,"def sum ( x , n ) : NEW_LINE INDENT total = 1.0 NEW_LINE multi = x NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + multi / i NEW_LINE multi = multi * x NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE print ( round ( sum ( x , n ) , 2 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } int main ( ) { int x = 2 ; int n = 5 ; cout << fixed << setprecision ( 2 ) << sum ( x , n ) ; return 0 ; }","#include <iostream> using namespace std; double sum(double x, int n) { double total = 1.0; double multi = x; for (int i = 1; i <= n; ++i){ total += multi / i; multi *= x; } return total; } int main() { int x = 2, n = 5; cout << round(sum((double)x,(double)n)) << endl; return 0; } ",5.209219217300415,0.8442876141872021,0.7501837472343608,0.5705035562811126,1.0,0.6993524893967789
7012,Python,C++,"def carAssembly ( a , t , e , x ) : NEW_LINE INDENT NUM_STATION = len ( a [ 0 ] ) NEW_LINE T1 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE T2 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE DEDENT T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] NEW_LINE T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] NEW_LINE INDENT for i in range ( 1 , NUM_STATION ) : NEW_LINE INDENT T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) NEW_LINE T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) NEW_LINE DEDENT return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) NEW_LINE DEDENT a = [ [ 4 , 5 , 3 , 2 ] , [ 2 , 10 , 1 , 4 ] ] NEW_LINE t = [ [ 0 , 7 , 4 , 5 ] , [ 0 , 9 , 2 , 8 ] ] NEW_LINE e = [ 10 , 12 ] NEW_LINE x = [ 18 , 7 ] NEW_LINE print ( carAssembly ( a , t , e , x ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NUM_LINE  2 NEW_LINE #define NUM_STATION  4 NEW_LINE int min ( int a , int b ) { return a < b ? a : b ; } int carAssembly ( int a [ ] [ NUM_STATION ] , int t [ ] [ NUM_STATION ] , int * e , int * x ) { int T1 [ NUM_STATION ] , T2 [ NUM_STATION ] , i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } int main ( ) { int a [ ] [ NUM_STATION ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ NUM_STATION ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; cout << carAssembly ( a , t , e , x ) ; return 0 ; }","#include<vector> #include<algorithm> using namespace std; int carAssembly ( vector<vector<int>> &a , vector<vector<int>> &t , vector<int> &e , vector<int> &x ) { int num_station = a[0].size(); vector<int> T1(num_station); vector<int> T2(num_station); T1[0] = e[0] + a[0][0]; T2[0] = e[1] + a[1][0]; for (int i = 1 ; i < num_station ; ++i) { T1[i] = min(T1[i-1]+a[0][i], T2[i-1]+t[1][i]+a[0][i]); T2[i] = min(T2[i-1]+a[1][i], T1[i-1]+t[0][i]+a[1][i]); } return min(T1[num_station-1]+x[0], T2[num_station-1]+x[1]); } int main() { vector<vector<int>> a = {{4,5,3,2},{2,10,1,4}}; vector<vector<int>> t = {{0,7,4,5},{0,9,2,8}}; vector<int> e = {10, 12}; vector<int> x = {18, 7}; cout<< carAssembly(a,t,e,x) << endl; return <｜begin▁of▁sentence｜>0; } ",10.857440948486328,0.6578597195106487,0.5722140789628769,0.4666519071407974,1.0,0.6266563349985581
2066,Python,C++,"INT_SIZE = 32 NEW_LINE def getSingle ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 0 , INT_SIZE ) : NEW_LINE INDENT sm = 0 NEW_LINE x = ( 1 << i ) NEW_LINE for j in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ j ] & x ) : NEW_LINE INDENT sm = sm + 1 NEW_LINE DEDENT DEDENT if ( ( sm % 3 ) != 0 ) : NEW_LINE INDENT result = result | x NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr = [ 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define INT_SIZE  32 NEW_LINE int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } int main ( ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","#include <iostream> #include<vector> using namespace std; const int INT_SIZE = 32; string NEW_LINE = ""\n""; int getSingle(vector<int> arr, int n) { int result = 0; for (int i = 0; i < INT_SIZE; ++i) { int sm = 0; int x = (1 << i); for (int j = 0; j < n; ++j) { if ((arr[j] & x)) sm++; } if ((sm % 3) != 0) result |= x; } return result; } int main() { vector<int> arr = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7}; int n = arr.size(); cout << ""The element with single occurrence is: "" << getSingle(arr, n) << endl; } ",6.20641303062439,0.8272359000420328,0.7463638169562147,0.6445000068008299,0.888888888888889,0.7178166714272476
1584,Python,C++,"def minJumps ( arr , l , h ) : NEW_LINE INDENT if ( h == l ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( arr [ l ] == 0 ) : NEW_LINE INDENT return float ( ' inf ' ) NEW_LINE DEDENT min = float ( ' inf ' ) NEW_LINE for i in range ( l + 1 , h + 1 ) : NEW_LINE INDENT if ( i < l + arr [ l ] + 1 ) : NEW_LINE INDENT jumps = minJumps ( arr , i , h ) NEW_LINE if ( jumps != float ( ' inf ' ) and jumps + 1 < min ) : NEW_LINE INDENT min = jumps + 1 NEW_LINE DEDENT DEDENT DEDENT return min NEW_LINE DEDENT arr = [ 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( ' Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ' , ' end ▁ is ' , minJumps ( arr , 0 , n - 1 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int minJumps ( int arr [ ] , int n ) { if ( n == 1 ) return 0 ; int res = INT_MAX ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( i + arr [ i ] >= n - 1 ) { int sub_res = minJumps ( arr , i + 1 ) ; if ( sub_res != INT_MAX ) res = min ( res , sub_res + 1 ) ; } } return res ; } int main ( ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Minimum ▁ number ▁ of ▁ jumps ▁ to "" ; cout << "" ▁ reach ▁ the ▁ end ▁ is ▁ "" << minJumps ( arr , n ) ; return 0 ; }","#include<bits/stdc++.h> using namespace std; double minJumps(vector<int>& arr, int l, int h){ if (h == l) { return 0; } if (arr[l] == 0) { return INFINITY; } double min = INFINITY; for (int i = l + 1; i < h + 1; i++) { if (i <= l + arr[l]) { double jumps = minJumps(arr, i, h); if (jumps != INFINITY && jumps + 1 < min) { min = jumps + 1; } } } return min; } int main() { vector<int> arr = {1, 3, 6, 3, 2, 3, 6, 8, 9, 5}; int n = arr.size(); cout << ""Minimum number of jumps to reach end is "" << minJumps(arr, 0, n - 1) << endl; return 0; } ",8.9602530002594,0.75,0.6015056485405027,0.42505175884520546,0.888888888888889,0.5642028978583105
1531,Python,C++,"def print2largest ( arr , arr_size ) : NEW_LINE INDENT if ( arr_size < 2 ) : NEW_LINE INDENT print ( "" ▁ Invalid ▁ Input ▁ "" ) NEW_LINE return NEW_LINE DEDENT first = second = - 2147483648 NEW_LINE for i in range ( arr_size ) : NEW_LINE INDENT if ( arr [ i ] > first ) : NEW_LINE INDENT second = first NEW_LINE first = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] > second and arr [ i ] != first ) : NEW_LINE INDENT second = arr [ i ] NEW_LINE DEDENT DEDENT if ( second == - 2147483648 ) : NEW_LINE INDENT print ( "" There ▁ is ▁ no ▁ second ▁ largest ▁ element "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ second ▁ largest ▁ element ▁ is "" , second ) NEW_LINE DEDENT DEDENT arr = [ 12 , 35 , 1 , 10 , 34 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print2largest ( arr , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { cout << "" ▁ Invalid ▁ Input ▁ "" ; return ; } first = second = INT_MIN ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) { second = arr [ i ] ; } } if ( second == INT_MIN ) cout << "" There ▁ is ▁ no ▁ second ▁ largest "" "" element STRNEWLINE "" ; else cout << "" The ▁ second ▁ largest ▁ element ▁ is ▁ "" << second ; } int main ( ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; print2largest ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; void print2largest (int arr[], int arr_size){ if(arr_size < 2){ cout << "" Invalid Input ""; return; } int first = INT_MIN, second = INT_MIN; for(int i=0;i<arr_size;i++) { if (arr[i] > first){ second = first; first = arr[i]; } else if (arr[i]>second && arr[i]!=first) { second = arr[i]; } } if(second == INT_MIN){ cout << "" There is no second largest element ""; } else{ cout<<"" The second largest element is ""<<second; } } int main() { int arr[] = {12, 35, 1, 10, 34, 1}; int n= sizeof(arr)/sizeof(arr[0]); print2largest(arr,n); return 0; } ",7.539198875427246,0.8441315864426021,0.7771264017799143,0.6892846122247243,1.0,0.7824992285573069
1015,Python,C++,"def printNGE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] < arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNGE ( arr ) NEW_LINE","#include <iostream> NEW_LINE using namespace std ; void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNGE ( arr , n ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; void printNGE(vector<int>& arr){ for (int i = 0; i < arr.size(); ++i){ int next = -1; for (int j = i+1; j < arr.size(); ++j) { if (arr[i] < arr[j]) { next = arr[j]; break; } } cout << to_string(arr[i]) + "" -- "" + to_string(next)<< ""\n""; } } int main(){ vector<int> arr={11, 13, 21, 3}; printNGE(arr); return <｜begin▁of▁sentence｜>0;",4.342446804046631,0.730924337039165,0.6388486645473844,0.4959144804364629,1.0,0.647140136305524
2174,Python,C++,"def nextGreatest ( arr ) : NEW_LINE INDENT size = len ( arr ) NEW_LINE max_from_right = arr [ size - 1 ] NEW_LINE arr [ size - 1 ] = - 1 NEW_LINE for i in range ( size - 2 , - 1 , - 1 ) : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = max_from_right NEW_LINE if max_from_right < temp : NEW_LINE INDENT max_from_right = temp NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT print arr [ i ] , NEW_LINE DEDENT DEDENT arr = [ 16 , 17 , 4 , 3 , 5 , 2 ] NEW_LINE nextGreatest ( arr ) NEW_LINE print "" Modified ▁ array ▁ is "" NEW_LINE printArray ( arr ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void nextGreatest ( int arr [ ] , int size ) { int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = -1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; nextGreatest ( arr , size ) ; cout << "" The ▁ modified ▁ array ▁ is : ▁ STRNEWLINE "" ; printArray ( arr , size ) ; return ( 0 ) ; }","#include <iostream> #include<vector> using namespace std; void nextGreatest(vector<int>& arr){ int size = arr.size(); int max_from_right=arr[size-1]; arr[size-1]=-1; for(int i=size-2;i>=0;i--) { int temp=arr[i]; arr[i]=max_from_right; if(max_from_right<temp){ max_from_right=temp; } } } void printArray(vector<int>& arr) { for (int i = 0; i <arr.size(); i++){ cout << arr[i] << "" ""; } cout<<endl; } int main() { vector<int> arr={16,17,4,3,5,2}; nextGreatest(arr); cout << ""Modified array is ""; printArray(arr); return 0; } ",6.959357738494873,0.593198375174832,0.5071828549910831,0.36265144877347805,1.0,0.5538560141414346
11738,Python,C++,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } int main ( ) { int n = 5 ; cout << "" Sum ▁ is ▁ "" << sum ( n ) ; return 0 ; }","#include <iostream> #include <math.h> using namespace std; double sum ( int n ) { double s = 0.0; for (int i=1 ; i<n+1 ; i++) s = s + 1.0/i; return s; } int main() { int n = 5; cout << ""Sum ▁ is ""<< fixed << setprecision(6) << sum (n); return 0; } ",2.9284307956695557,0.7647058823529411,0.7140055472954167,0.6228346864324457,1.0,0.7359842805027119
1981,Python,C++,"def getMedian ( ar1 , ar2 , n ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE m1 = - 1 NEW_LINE m2 = - 1 NEW_LINE count = 0 NEW_LINE while count < n + 1 : NEW_LINE INDENT count += 1 NEW_LINE if i == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ 0 ] NEW_LINE break NEW_LINE DEDENT elif j == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ 0 ] NEW_LINE break NEW_LINE DEDENT if ar1 [ i ] <= ar2 [ j ] : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ i ] NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ j ] NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return ( m1 + m2 ) / 2 NEW_LINE DEDENT ar1 = [ 1 , 12 , 15 , 26 , 38 ] NEW_LINE ar2 = [ 2 , 13 , 17 , 30 , 45 ] NEW_LINE n1 = len ( ar1 ) NEW_LINE n2 = len ( ar2 ) NEW_LINE if n1 == n2 : NEW_LINE INDENT print ( "" Median ▁ is ▁ "" , getMedian ( ar1 , ar2 , n1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Doesn ' t ▁ work ▁ for ▁ arrays ▁ of ▁ unequal ▁ size "" ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = -1 , m2 = -1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } int main ( ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = sizeof ( ar1 ) / sizeof ( ar1 [ 0 ] ) ; int n2 = sizeof ( ar2 ) / sizeof ( ar2 [ 0 ] ) ; if ( n1 == n2 ) cout << "" Median ▁ is ▁ "" << getMedian ( ar1 , ar2 , n1 ) ; else cout << "" Doesn ' t ▁ work ▁ for ▁ arrays "" << "" ▁ of ▁ unequal ▁ size "" ; getchar ( ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; double getMedian(vector<int> ar1, vector<int> ar2, int n){ int i = 0, j = 0, m1 = -1, m2 = -1, count = 0; while (count < n + 1) { count += 1; if (i == n) { m1 = m2; m2 = ar2[0]; break; } else if (j == n) { m1 = m2; m2 = ar1[0]; break; } if (ar1[i] <= ar2[j]) { m1 = m2; m2 = ar1[i]; ++i; } else { m1 = m2; m2 = ar2[j]; ++j; } } return (m1 + m2) / 2.0; } int main(){ vector<int> ar1{1, 12, 15, 26, 38}; vector<int> ar2{2, 13, 17, 30, 45}; int n1 = ar1.size(); int n2 = ar2.size(); if (n1 == n2) { cout << ""Median is: "" << getMedian(ar1, ar2, n1); } else { cout << ""Doesn't work for arrays of unequal size""; } return 0; } ",10.307692050933838,0.7686087349066794,0.6880047990158948,0.5930163145327937,0.8571428571428571,0.6722542773158127
13443,Python,C++,"def seriesSum ( calculated , current , N ) : NEW_LINE INDENT i = calculated ; NEW_LINE cur = 1 ; NEW_LINE if ( current == N + 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT while ( i < calculated + current ) : NEW_LINE INDENT cur *= i ; NEW_LINE i += 1 ; NEW_LINE DEDENT return cur + seriesSum ( i , current + 1 , N ) ; NEW_LINE DEDENT N = 5 ; NEW_LINE print ( seriesSum ( 1 , 1 , N ) ) ; NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } int main ( ) { int N = 5 ; cout << seriesSum ( 1 , 1 , N ) << endl ; return 0 ; }","#include <iostream> using namespace std; int seriesSum(int calculated, int current, int N) { if (current == N + 1) return 0; int cur = 1; for (int i = calculated; i < calculated + current; ++i) cur *= i; return cur + seriesSum(calculated+current, current+1, N); } int main() { cout << seriesSum(1, 1, 5) << endl; return 0; } ",3.213467836380005,0.862189199883743,0.8024667737781782,0.6946653648431244,1.0,0.7862657553901871
2291,Python,C++,"def getMissingNo ( A ) : NEW_LINE INDENT n = len ( A ) NEW_LINE total = ( n + 1 ) * ( n + 2 ) / 2 NEW_LINE sum_of_A = sum ( A ) NEW_LINE return total - sum_of_A NEW_LINE DEDENT A = [ 1 , 2 , 4 , 5 , 6 ] NEW_LINE miss = getMissingNo ( A ) NEW_LINE print ( miss ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMissingNo ( int a [ ] , int n ) { int total = ( n + 1 ) * ( n + 2 ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) total -= a [ i ] ; return total ; } int main ( ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int miss = getMissingNo ( arr , n ) ; cout << miss ; }","#include <iostream> using namespace std; int getMissingNo(int A[], int n) { int total = (n + 1) * (n + 2) / 2; int sum_of_A = 0; for(int i=0; i<n; i++){ sum_of_A += A[i]; } return total - sum_of_A; } int main() { int A[] = {1, 2, 4, 5, 6}; int n = sizeof(A)/sizeof(A[0]); // find the size of array int miss = getMissingNo(A,n); cout<<miss; } ",6.982054948806763,0.8046875,0.7509426490782931,0.6413331648159692,1.0,0.7489332153711784
4857,Python,C++,"def flip ( arr , i ) : NEW_LINE INDENT start = 0 NEW_LINE while start < i : NEW_LINE INDENT temp = arr [ start ] NEW_LINE arr [ start ] = arr [ i ] NEW_LINE arr [ i ] = temp NEW_LINE start += 1 NEW_LINE i -= 1 NEW_LINE DEDENT DEDENT def findMax ( arr , n ) : NEW_LINE INDENT mi = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if arr [ i ] > arr [ mi ] : NEW_LINE INDENT mi = i NEW_LINE DEDENT DEDENT return mi NEW_LINE DEDENT def pancakeSort ( arr , n ) : NEW_LINE INDENT curr_size = n NEW_LINE while curr_size > 1 : NEW_LINE INDENT mi = findMax ( arr , curr_size ) NEW_LINE if mi != curr_size - 1 : NEW_LINE INDENT flip ( arr , mi ) NEW_LINE flip ( arr , curr_size - 1 ) NEW_LINE DEDENT curr_size -= 1 NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT print ( "" % d "" % ( arr [ i ] ) , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT arr = [ 23 , 10 , 20 , 11 , 12 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE pancakeSort ( arr , n ) ; NEW_LINE print ( "" Sorted ▁ Array ▁ "" ) NEW_LINE printArray ( arr , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } void pancakeSort ( int * arr , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; ++ i ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; pancakeSort ( arr , n ) ; cout << "" Sorted ▁ Array ▁ "" << endl ; printArray ( arr , n ) ; return 0 ; }","#include<iostream> using namespace std; void flip (int arr[], int i){ int start = 0; while(start < i){ int temp = arr[start]; arr[start] = arr[i]; arr[i] = temp; start += 1; i -= 1; } } int findMax (int arr[], int n){ int mi = 0; for(int i=0; i<n; i++){ if(arr[i] > arr[mi]) { mi = i; } } return mi; } void pancakeSort (int arr[], int n) { int curr_size = n; while(curr_size > 1){ int mi = findMax(arr, curr_size); if(mi != curr_size-1){ flip(arr, mi); flip(arr, curr_size-1); } curr_size -= 1; } } void printArray (int arr[], int n) { for(int i=0; i<n; i++){ cout << "" "" << arr[i] << "" ""; } } int main() { int arr[] = {23, 10, 20, 11, 12, 6, 7}; int n = sizeof(arr)/sizeof(arr[0]); pancakeSort(arr, n); cout << "" Sorted Array ""; printArray(arr, n); } ",11.930531024932861,0.8793785020390691,0.832880242401755,0.7338123420021517,1.0,0.8136686394015062
1844,Python,C++,"R = 3 NEW_LINE C = 3 NEW_LINE def minCost ( cost , m , n ) : NEW_LINE INDENT tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ] NEW_LINE tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] NEW_LINE DEDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] NEW_LINE DEDENT DEDENT return tc [ m ] [ n ] NEW_LINE DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <limits.h> NEW_LINE #define R  3 NEW_LINE #define C  3 NEW_LINE using namespace std ; int min ( int x , int y , int z ) ; int minCost ( int cost [ R ] [ C ] , int m , int n ) { int i , j ; int tc [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } int main ( ) { int cost [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; cout << "" ▁ "" << minCost ( cost , 2 , 2 ) ; return 0 ; }","#include <vector> #include <algorithm> using namespace std; int minCost( vector<vector<int>> cost , int m , int n) { vector<vector<int>> tc(m+1, vector<int> (n+1)); tc[0][0] = cost[0][0]; for(int i = 1 ; i < m + 1; i++){ tc[i][0] = tc[i-1][0] + cost[i][0]; } for(int j = 1 ; j < n + 1; j++){ tc[0][j] = tc[0][j-1] + cost[0][j]; } for(int i=1;i<m+1;i++){ for(int j=1;j<n+1;j++){ tc[i][j] = min({tc[i-1][j-1], tc[i-1][j], tc[i][j-1]}) + cost[i][j]; } } return tc[m][n]; } int main(){ vector<vector<int>> cost = {{1,2,3},{4,8,2},{1,5,3}}; cout << minCost(cost, 2 , 2); return 0; } ",10.99369502067566,0.609784369667881,0.5309697660295866,0.4213386412649556,0.7499999999999999,0.5199370488854689
2012,Python,C++,def count ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT return n NEW_LINE DEDENT elif n >= 3 and n < 10 : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT po = 1 NEW_LINE while n / po > 9 : NEW_LINE INDENT po = po * 10 NEW_LINE DEDENT msd = n / po NEW_LINE if msd != 3 : NEW_LINE INDENT return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) NEW_LINE DEDENT else : NEW_LINE INDENT return count ( msd * po - 1 ) NEW_LINE DEDENT DEDENT n = 578 NEW_LINE print count ( n ) NEW_LINE,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } int main ( ) { cout << count ( 578 ) << "" ▁ "" ; return 0 ; }",#include <iostream> using namespace std; int count( int n ) { if (n < 3) return n; else if (n >= 3 && n < 10) return n - 1; int po = 1; while (n / po > 9) { po = po * 10; } int msd = n / po; if (msd != 3) return count(msd) * count(po - 1) + count(msd) + count(n % po); else return count(msd * po - 1); } int main() { int n = 578; cout << count(n) << endl; return <｜begin▁of▁sentence｜>0,4.285945892333984,0.9219858156028369,0.8815340777836213,0.8192241540476016,1.0,0.8734569078333212
13911,Python,C++,"INT_MAX = 2147483647 NEW_LINE def isKthBitSet ( x , k ) : NEW_LINE INDENT return 1 if ( x & ( 1 << ( k - 1 ) ) ) else 0 NEW_LINE DEDENT def leftmostSetBit ( x ) : NEW_LINE INDENT count = 0 NEW_LINE while ( x ) : NEW_LINE INDENT count += 1 NEW_LINE x = x >> 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def isBinPalindrome ( x ) : NEW_LINE INDENT l = leftmostSetBit ( x ) NEW_LINE r = 1 NEW_LINE while ( l > r ) : NEW_LINE INDENT if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT l -= 1 NEW_LINE r += 1 NEW_LINE DEDENT return 1 NEW_LINE DEDENT def findNthPalindrome ( n ) : NEW_LINE INDENT pal_count = 0 NEW_LINE i = 0 NEW_LINE for i in range ( 1 , INT_MAX + 1 ) : NEW_LINE INDENT if ( isBinPalindrome ( i ) ) : NEW_LINE INDENT pal_count += 1 NEW_LINE DEDENT if ( pal_count == n ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( findNthPalindrome ( n ) ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isKthBitSet ( int x , int k ) { return ( x & ( 1 << ( k - 1 ) ) ) ? 1 : 0 ; } int leftmostSetBit ( int x ) { int count = 0 ; while ( x ) { count ++ ; x = x >> 1 ; } return count ; } int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } int main ( ) { int n = 9 ; cout << findNthPalindrome ( n ) ; }","#include<iostream> using namespace std; const int INT_MAX = 2147483647; int isKthBitSet(int x, int k) { return (x & (1 << (k - 1))) ? 1 : 0; } int leftmostSetBit(int x) { int count = 0; while (x) { count++; x = x >> 1; } return count; } int isBinPalindrome(int x) { int l = leftmostSetBit(x); int r = 1; while (l > r) { if (isKthBitSet(x, l) != isKthBitSet(x, r)) { return 0; } l--; r++; } return 1; } int findNthPalindrome(int n) { int pal_count = 0; for (int i=1; i<= INT_MAX + 1; ++i){ if (isBinPalindrome(i)) { pal_count++; } if (pal_count == n) { break; } } return i; } int main() { int n = 9; cout << findNthPalindrome(n); return <｜begin▁of▁sentence｜>0;",9.951816082000732,0.9107981220657277,0.876939531944804,0.8110194051237326,0.923076923076923,0.8446366605096898
9298,Python,C++,"def CalPeri ( ) : NEW_LINE INDENT s = 5 NEW_LINE Perimeter = 10 * s NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" , Perimeter ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT CalPeri ( ) ; NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; void CalPeri ( ) { int s = 5 , Perimeter ; Perimeter = 10 * s ; cout << "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" << Perimeter ; } int main ( ) { CalPeri ( ) ; return 0 ; }","#include <iostream> using namespace std; void CalPeri() { int s = 5; int Perimeter = 10 * s; cout << "" The Perimeter of Decagon is : "" << Perimeter; } int main() { CalPeri(); return 0; } ",2.0123379230499268,0.8489086597710945,0.7733478581222404,0.6952215250161988,1.0,0.7866550675113391
1704,Python,C++,"import math NEW_LINE def printRepeating ( arr , size ) : NEW_LINE INDENT S = 0 ; NEW_LINE P = 1 ; NEW_LINE n = size - 2 NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT S = S + arr [ i ] NEW_LINE P = P * arr [ i ] NEW_LINE DEDENT S = S - n * ( n + 1 ) // 2 NEW_LINE P = P // fact ( n ) NEW_LINE D = math . sqrt ( S * S - 4 * P ) NEW_LINE x = ( D + S ) // 2 NEW_LINE y = ( S - D ) // 2 NEW_LINE print ( "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" , ( int ) ( x ) , "" ▁ & ▁ "" , ( int ) ( y ) ) NEW_LINE DEDENT def fact ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n * fact ( n - 1 ) ) NEW_LINE DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int fact ( int n ) ; void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; cout << "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" << x << "" ▁ & ▁ "" << y ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; int fact ( int n ) { if (n == 0) return 1; else return n*fact(n-1); } void printRepeating(int arr[], int size) { int S = 0, P = 1; int n = size -2; for (int i=0; i<size; ++i ){ S += arr[i]; P *= arr[i]; } S = S-n*(n+1)/2; P = P/fact(n); double D = sqrt (S*S - 4*P ); int x = (D + S) / 2; int y = (S - D ) / 2; cout << ""The two repeating elements are: "" << x << "" & ""<< y << endl; } int main() { int arr[] = {4, 2, 4, 5, 2, 3, 1}; int arr_size = sizeof(arr)/sizeof(arr[0]); printRepeating(arr, arr_size); } ",6.627274990081787,0.7804630685502033,0.7126353270812147,0.5976015906540639,0.7272727272727273,0.6365029316396629
13537,Python,C++,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","#include <iostream> NEW_LINE using namespace std ; class gfg { public : double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } } ; int main ( ) { gfg g ; int n = 5 ; cout << "" Sum ▁ is ▁ "" << g . sum ( n ) ; return 0 ; }","#include <iostream> using namespace std; double sum (int n) { int i = 1; double s = 0.0; for (i=1; i <= n; i++) { s = s + 1.0 / i; } return s; } int main() { int n = 5; cout << ""Sum is "" << round(sum(n)) << endl; return 0; } ",3.7418439388275146,0.8126001717008007,0.7063339991759926,0.5199974165497397,0.8,0.6039981915848178
13913,Python,C++,"INT_SIZE = 32 NEW_LINE def constructNthNumber ( group_no , aux_num , op ) : NEW_LINE INDENT a = [ 0 ] * INT_SIZE NEW_LINE num , i = 0 , 0 NEW_LINE if op == 2 : NEW_LINE INDENT len_f = 2 * group_no NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT elif op == 0 : NEW_LINE INDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 0 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT for i in range ( 0 , len_f ) : NEW_LINE INDENT num += ( 1 << i ) * a [ i ] NEW_LINE DEDENT return num NEW_LINE DEDENT def getNthNumber ( n ) : NEW_LINE INDENT group_no = 0 NEW_LINE count_upto_group , count_temp = 0 , 1 NEW_LINE while count_temp < n : NEW_LINE INDENT group_no += 1 NEW_LINE count_upto_group = count_temp NEW_LINE count_temp += 3 * ( 1 << ( group_no - 1 ) ) NEW_LINE DEDENT group_offset = n - count_upto_group - 1 NEW_LINE if ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) : NEW_LINE INDENT aux_num = group_offset NEW_LINE DEDENT else : NEW_LINE INDENT if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) : NEW_LINE else : NEW_LINE aux_num = ( ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) // 2 ) NEW_LINE DEDENT return constructNthNumber ( group_no , aux_num , op ) NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( getNthNumber ( n ) ) NEW_LINE DEDENT","#include <iostream> NEW_LINE #include <bits/stdc++.h> NEW_LINE using namespace std ; int constructNthNumber ( int group_no , int aux_num , int op ) { int INT_SIZE = 32 ; int a [ INT_SIZE ] = { 0 } ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { op = 2 ; aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) op = 0 ; else op = 1 ; aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } int main ( ) { int n = 9 ; cout << getNthNumber ( n ) ; return 0 ; }","#include <vector> #include <iostream> using namespace std; int INT_SIZE = 32; string NEW_LINE = ""\n""; void constructNthNumber ( int group_no , int aux_num , int op ) { vector<int> a(INT_SIZE, 0); int num = 0, i = 0; if (op == 2) { int len_f = 2 * group_no; a[len_f - 1] = a[0] = 1; while (aux_num) { a[group_no + i] = a[group_no - 1 - i] = aux_num & 1; aux_num = aux_num >> 1; i++; } } else if (op == 0) { int len_f = 2 * group_no + 1; a[len_f - 1] = a[0] = 1; a[group_no] = 0; while (aux_num) { a[group_no + i + 1] = a[group_no - 1 - i] = aux_num & 1; aux_num = aux_num >> 1; i++; } } for (i = 0; i < len_f; i++) { num += (1 << i) * a[i]; } } int getNthNumber(int n) { int group_no = 0, count_upto_group = 0, count_temp = 1; while (count_temp < n){ group_no++; count_upto_group = count_temp; count_temp += 3 * pow(2, (group_no - 1)); } int group_offset = n - count_upto_group - 1; int aux_num; if ((group_offset + 1) <= pow(2, (group_no - 1))) { aux_num = group_offset; } else { if(((group_offset + 1) - pow(2, (group_no - 1))) % 2){ aux_num = ((group_offset + 1) - pow(2, (group_no - 1))) / 2; }else{ aux_num = 0; } } return constructNthNumber ( group_no , aux_num , op ); } int main() { int n = 9; cout << getNthNumber(n) << ""\n""; return <｜begin▁of▁sentence｜>0; } ",22.748167991638184,0.7972891739652301,0.7418837351001385,0.6551142550979818,0.923076923076923,0.7355030554916642
11721,Python,C++,"def midptellipse ( rx , ry , xc , yc ) : NEW_LINE INDENT x = 0 ; NEW_LINE y = ry ; NEW_LINE d1 = ( ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ) ; NEW_LINE dx = 2 * ry * ry * x ; NEW_LINE dy = 2 * rx * rx * y ; NEW_LINE while ( dx < dy ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d1 < 0 ) : NEW_LINE INDENT x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE d1 = d1 + dx + ( ry * ry ) ; NEW_LINE DEDENT else : NEW_LINE INDENT x += 1 ; NEW_LINE y -= 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d1 = d1 + dx - dy + ( ry * ry ) ; NEW_LINE DEDENT DEDENT d2 = ( ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ) ; NEW_LINE while ( y >= 0 ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d2 > 0 ) : NEW_LINE INDENT y -= 1 ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + ( rx * rx ) - dy ; NEW_LINE DEDENT else : NEW_LINE INDENT y -= 1 ; NEW_LINE x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + dx - dy + ( rx * rx ) ; NEW_LINE DEDENT DEDENT DEDENT midptellipse ( 10 , 15 , 50 , 50 ) ; NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void midptellipse ( int rx , int ry , int xc , int yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; while ( dx < dy ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { cout << x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << y + yc << endl ; cout << x + xc << "" ▁ , ▁ "" << - y + yc << endl ; cout << - x + xc << "" ▁ , ▁ "" << - y + yc << endl ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } int main ( ) { midptellipse ( 10 , 15 , 50 , 50 ) ; return 0 ; }","#include <iostream> using namespace std; void midptellipse(int rx, int ry, int xc, int yc){ int x = 0; int y = ry; int d1 = ((ry * ry) - (rx * rx * ry) + (0.25 * rx * rx)); int dx = 2*ry*ry*x; int dy = 2*rx*rx*y; while(dx < dy){ cout << "" ("" << x+xc << "", "" << y+yc << "") ""; cout << "" ("" << -x+xc << "", "" << y+yc << "") ""; cout << "" ("" << x+xc << "", "" << -y+yc << "") ""; cout << "" ("" << -x+xc << "", "" << -y+yc << "") ""; if(d1 < 0){ x += 1; dx = dx + (2 * ry * ry); d1 = d1 + dx + (ry * ry); }else{ x += 1; y -= 1; dx = dx + (2 * ry * ry); dy = dy - (2 * rx * rx); d1 = d1 + dx - dy + (ry * ry); } } int d2 = ((ry*ry*(x+0.5)*(x+0.5))+(rx*rx*(y-1)*(y-1))-(rx*rx*ry*ry)); while (y >= 0){ cout << "" ("" << x+xc << "", "" << y+yc << "") ""; cout << "" ("" << -x+xc << "", "" << y+yc << "") ""; cout << "" ("" << x+xc << "", "" << -y+yc << "") ""; cout << "" ("" << -x+xc << "", "" << -y+yc << "") ""; if(d2 > 0){ y -= 1; dy = dy - (2 * rx * rx); d2 = d2 + (rx * rx) - dy; }else{ y -= 1; x += 1; dx = dx + (2 * ry * ry); dy = dy - (2 * rx * rx); d2 = d2 + dx - dy + (rx * rx); } } } int main(){ midptellipse(10, 15, 50, 50); return 0; } ",19.75247097015381,0.7914619129080512,0.7266190345590943,0.6121584458420335,0.923076923076923,0.7054339890125003
2065,Python,C++,"def getSingle ( arr , n ) : NEW_LINE INDENT ones = 0 NEW_LINE twos = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT twos = twos | ( ones & arr [ i ] ) NEW_LINE ones = ones ^ arr [ i ] NEW_LINE common_bit_mask = ~ ( ones & twos ) NEW_LINE ones &= common_bit_mask NEW_LINE twos &= common_bit_mask NEW_LINE DEDENT return ones NEW_LINE DEDENT arr = [ 3 , 3 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } int main ( ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" << getSingle ( arr , n ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; int getSingle(vector<int> arr, int n) { int ones = 0; int twos = 0; for (int i=0 ; i<n ; ++i ){ twos = twos | (ones & arr[i]); ones = ones ^ arr[i]; int common_bit_mask = ~(ones & twos); ones = ones & common_bit_mask; twos = twos & common_bit_mask; } return ones; } int main() { vector<int> arr{3, 3, 2, 3}; int n = arr.size(); cout << ""The element with single occurrence is: "" << getSingle(arr, n)<< endl; return <｜begin▁of▁sentence｜>0; } ",8.517135858535767,0.8132554874464796,0.7304364787266856,0.6056645207464173,1.0,0.723965164522492
13427,Python,C++,"import math NEW_LINE def countDivisors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , ( int ) ( math . sqrt ( n ) ) + 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( n // i == i ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = count + 2 NEW_LINE DEDENT DEDENT DEDENT if ( count % 2 == 0 ) : NEW_LINE INDENT print ( "" Even "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Odd "" ) NEW_LINE DEDENT DEDENT print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) NEW_LINE countDivisors ( 10 ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) cout << "" Even "" << endl ; else cout << "" Odd "" << endl ; } int main ( ) { cout << "" The ▁ count ▁ of ▁ divisor : ▁ "" ; countDivisors ( 10 ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; void countDivisors(int n){ int count = 0; for (int i=1 ; i<sqrt(n)+2 ; ++i ){ if((n % i == 0)) { if ((n / i == i)){ count = count + 1; } else { count = count + 2; } } } if (count%2==0){ cout<<"" Even "";} else{ cout<<"" Odd "";} cout << "" The count of divisor: "" << count ; } int main() { countDivisors(10); return 0; } ",4.6390509605407715,0.7720588235294118,0.6806139097297726,0.5315775158318694,1.0,0.6721042610823085
848,Python,C++,"def search ( mat , n , x ) : NEW_LINE INDENT i = 0 NEW_LINE j = n - 1 NEW_LINE while ( i < n and j >= 0 ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == x ) : NEW_LINE INDENT print ( "" n ▁ Found ▁ at ▁ "" , i , "" , ▁ "" , j ) NEW_LINE return 1 NEW_LINE DEDENT if ( mat [ i ] [ j ] > x ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT print ( "" Element ▁ not ▁ found "" ) NEW_LINE return 0 NEW_LINE DEDENT mat = [ [ 10 , 20 , 30 , 40 ] , [ 15 , 25 , 35 , 45 ] , [ 27 , 29 , 37 , 48 ] , [ 32 , 33 , 39 , 50 ] ] NEW_LINE search ( mat , 4 , 29 ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int search ( int mat [ 4 ] [ 4 ] , int n , int x ) { if ( n == 0 ) return -1 ; int smallest = mat [ 0 ] [ 0 ] , largest = mat [ n - 1 ] [ n - 1 ] ; if ( x < smallest x > largest ) return -1 ; int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { cout << "" n ▁ Found ▁ at ▁ "" << i << "" , ▁ "" << j ; return 1 ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } cout << "" n ▁ Element ▁ not ▁ found "" ; return 0 ; } int main ( ) { int mat [ 4 ] [ 4 ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; int search(vector<vector<int>>& mat, int n, int x) { int i = 0; int j = n - 1; while ( i < n && j >= 0 ){ if (mat[i][j] == x){ cout << "" Found at ""<< "", "" << i <<"" , "" << j ; return 1; } else if( mat[i][j] > x) { j -= 1; } else { i += 1; } } cout << "" Element not found"" ; return 0; } int main() { vector<vector<int>> mat = {{10, 20, 30, 40},{15, 25, 35, 45},{27, 29, 37, 48},{32, 33, 39, 50}}; search(mat, 4, 29); } ",9.717448949813843,0.7115800380579511,0.6504310908589094,0.5778482933481492,1.0,0.7044938053437044
13539,Python,C++,"def printFibonacciNumbers ( n ) : NEW_LINE INDENT f1 = 0 NEW_LINE f2 = 1 NEW_LINE if ( n < 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT print ( f1 , end = "" ▁ "" ) NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT print ( f2 , end = "" ▁ "" ) NEW_LINE next = f1 + f2 NEW_LINE f1 = f2 NEW_LINE f2 = next NEW_LINE DEDENT DEDENT printFibonacciNumbers ( 7 ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; cout << f1 << "" ▁ "" ; for ( i = 1 ; i < n ; i ++ ) { cout << f2 << "" ▁ "" ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } int main ( ) { printFibonacciNumbers ( 7 ) ; return 0 ; }","#include<iostream> using namespace std; void printFibonacciNumbers(int n){ cout<<endl; int f1 = 0; int f2 = 1; if (n < 1) { return ; } cout <<f1 << "" ""; for(int x=1;x<n;x++){ cout << f2<<"" ""; int next = f1+f2; f1 = f2; f2 = next; } } int main(){ printFibonacciNumbers(7); return 0; } ",3.9525339603424072,0.8415423586867927,0.778422120731532,0.651305553831187,1.0,0.7559138876818309
1954,Python,C++,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE p = 0 NEW_LINE t = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define d  256 NEW_LINE void search ( char pat [ ] , char txt [ ] , int q ) { int M = strlen ( pat ) ; int N = strlen ( txt ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat [ i ] ) % q ; t = ( d * t + txt [ i ] ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt [ i + j ] != pat [ j ] ) break ; } if ( j == M ) cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; } if ( i < N - M ) { t = ( d * ( t - txt [ i ] * h ) + txt [ i + M ] ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } int main ( ) { char txt [ ] = "" GEEKS ▁ FOR ▁ GEEKS "" ; char pat [ ] = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; return 0 ; }","#include <iostream> #include <string.h> using namespace std; const int d = 256; // Number of characters in input alphabet const char NEW_LINE = '\n'; void search( string pat, string txt, int q ) { int M = pat.length(); int N = txt.length(); int i=0, j=0, p=0, t=0, h=1; for (i = 0; i < M - 1; i++) h = (h * d) % q; for (i = 0; i < M; i++) { p = (d*p + pat[i])%q; t = (d*t + txt[i])%q; } for (i = 0; i <= N - M; i++) { if ( p == t ){ for (j = 0; j < M; j++) { if (txt[i+j] != pat[j]) break; } if (j == M) cout << ""Pattern found at index "" << i << endl; } if(i < N-M) { t = (d*(t - txt[i]*h) + txt[i+M])%q; if (t < 0) t = t + q; } } } int main() { string txt = ""GEEKS FOR GEEKS""; string pat = ""GEEK""; int q = 101; search(pat, txt, q); return <｜begin▁of▁sentence｜>0; } ",10.509084939956665,0.8197815729313975,0.7452722849566502,0.6575785569511258,0.9333333333333333,0.740304989865788
13546,Python,C++,"def gcd ( a , b ) : ' NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int a = 98 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","#include<iostream> using namespace std; int gcd ( int a , int b ) { if (b == 0) return a; return gcd(b, a % b); } int main() { int a = 98; int b = 56; int result = gcd(a, b); if (result) cout << ""GCD of ""<< a <<"" and ""<< b <<"" is ""<< result; else cout << ""not found""; } ",2.7051730155944824,0.819047619047619,0.7634028312653044,0.67330925963853,0.8571428571428571,0.7284593388898282
2096,Python,C++,"def isPowerOfFour ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT while ( n != 1 ) : NEW_LINE INDENT if ( n % 4 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT n = n // 4 NEW_LINE DEDENT return True NEW_LINE DEDENT test_no = 64 NEW_LINE if ( isPowerOfFour ( 64 ) ) : NEW_LINE INDENT print ( test_no , ' is ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( test_no , ' is ▁ not ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; #define bool  int NEW_LINE class GFG { public : bool isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } } ; int main ( ) { GFG g ; int test_no = 64 ; if ( g . isPowerOfFour ( test_no ) ) cout << test_no << "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ; else cout << test_no << "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ; getchar ( ) ; }","#include <iostream> using namespace std; bool isPowerOfFour(int n) { if (n == 0) return false; while (n != 1) { if (n % 4 != 0) return false; n = n / 4; } return true; } int main() { int test_no = 64; if (isPowerOfFour(test_no)) { cout << test_no << "" is a power of 4"" << endl; } else { cout << test<｜begin▁of▁sentence｜>s_of_flouride << "" is not a power of 4"" << endl; } } ",4.384952068328857,0.7421126825552944,0.6433164203374728,0.51130575895527,0.8571428571428571,0.6150568884115462
7050,Python,C++,"def maxSumIS ( arr , n ) : NEW_LINE INDENT max = 0 NEW_LINE msis = [ 0 for x in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT msis [ i ] = arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) : NEW_LINE INDENT msis [ i ] = msis [ j ] + arr [ i ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if max < msis [ i ] : NEW_LINE INDENT max = msis [ i ] NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT arr = [ 1 , 101 , 2 , 3 , 100 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" + "" subsequence ▁ is ▁ "" + str ( maxSumIS ( arr , n ) ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } int main ( ) { int arr [ ] = { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" "" subsequence ▁ is ▁ "" << maxSumIS ( arr , n ) << endl ; return 0 ; }","#include<iostream> #include<vector> #include<algorithm> using namespace std; int maxSumIS( vector<int> arr , int n ) { int max = 0; vector<int> msis(n, 0); for (int i=0; i<n ;i++) msis[i] = arr[i]; for (int i=1; i< n ;i++) { for (int j=0; j<i ;j++){ if(arr[i] > arr[j] && msis[i] < msis[j]+arr[i]) msis[i] = msis[j]+arr[i]; } } for (int i=0; i<n ;i++) { if(max < msis[i]) max = msis[i]; } return max; } int main() { vector<int> arr = {1, 101, 2, 3, 100, 4, 5}; int n=arr.size(); cout << "" Sum of maximum sum increasing subsequence is ""<< maxSumIS( arr, n ) <<endl; return 0; } ",7.8280017375946045,0.7790486466897313,0.6903902316257627,0.5808759894967805,1.0,0.7066131926477464
8947,Python,C++,"def exponentMod ( A , B , C ) : NEW_LINE INDENT if ( A == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( B == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT y = 0 NEW_LINE if ( B % 2 == 0 ) : NEW_LINE INDENT y = exponentMod ( A , B / 2 , C ) NEW_LINE y = ( y * y ) % C NEW_LINE DEDENT else : NEW_LINE INDENT y = A % C NEW_LINE y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C NEW_LINE DEDENT return ( ( y + C ) % C ) NEW_LINE DEDENT A = 2 NEW_LINE B = 5 NEW_LINE C = 13 NEW_LINE print ( "" Power ▁ is "" , exponentMod ( A , B , C ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } int main ( ) { int A = 2 , B = 5 , C = 13 ; cout << "" Power ▁ is ▁ "" << exponentMod ( A , B , C ) ; return 0 ; }","#include <iostream> using namespace std; int exponentMod(int A, int B, int C) { if (A == 0) return 0; if (B == 0) return 1; int y = 0; if (B % 2 == 0) { y = exponentMod(A, B / 2, C); y = (y * y) % C; } else { y = A % C; y = (y * exponentMod(A, B - 1, C)) % C; } return (y + C) % C ; } int main() { int A = 2; int B = 5; int C = 13; cout << ""Power is "" << exponentMod(A, B, C); return <｜begin▁of▁sentence｜>0; } ",7.487689018249512,0.9205738360514816,0.8828006489498772,0.8196803829066791,1.0,0.8737762680346752
9368,Python,C++,"def octant ( x , y , z ) : NEW_LINE INDENT if x >= 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" NEW_LINE DEDENT DEDENT x , y , z = 2 , 3 , 4 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 4 , 2 , - 8 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 6 , - 2 , 8 NEW_LINE octant ( x , y , z ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 1st ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 2nd ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 3rd ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z >= 0 ) cout << "" Point ▁ lies ▁ in ▁ 4th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 5th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y >= 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 6th ▁ octant STRNEWLINE "" ; else if ( x < 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 7th ▁ octant STRNEWLINE "" ; else if ( x >= 0 && y < 0 && z < 0 ) cout << "" Point ▁ lies ▁ in ▁ 8th ▁ octant STRNEWLINE "" ; } int main ( ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = -4 , y = 2 , z = -8 ; octant ( x , y , z ) ; x = -6 , y = -2 , z = 8 ; octant ( x , y , z ) ; return 0 ; }","#include<iostream> void octant(int x, int y, int z) { if (x >= 0 && y >= 0 && z >= 0) { std::cout << ""Point lies in 1st Octant""<<std::endl; } else if (x < 0 && y >= 0 && z >= 0) { std::cout << ""Point lies in 2nd Octant""<<std::endl; } else if (x < 0 && y < 0 && z >= 0) { std::cout << ""Point lies in 3rd Octant""<<std::endl; } else if (x >= 0 && y < 0 && z >= 0) { std::cout << ""Point lies in 4th Octant""<<std::endl; } else if (x >= 0 && y >= 0 && z < 0) { std::cout << ""Point lies in 5th Octant""<<std::endl; } else if (x < 0 && y >= 0 && z < 0) { std::cout << ""Point lies in 6th Octant""<<std::endl; } else if (x < 0 && y < 0 && z < 0) { std::cout << ""Point lies in 7th Octant""<<std::endl; } else if (x >= 0 && y < 0 && z < 0) { std::cout << ""Point lies in 8th Octant""<<std::endl; } } int main() { int x = 2, y = 3, z = 4; octant(x,y,z); x = -4; y = 2; z = -8; octant(x,y,z); x = -6; y = -2; z = 8; octant(x,y,z); return 0; } ",13.26791787147522,0.7443609022556391,0.664364231042181,0.5739990869684521,0.9090909090909091,0.6745266336051892
2090,Python,C++,def addOne ( x ) : NEW_LINE INDENT m = 1 ; NEW_LINE while ( x & m ) : NEW_LINE INDENT x = x ^ m NEW_LINE m <<= 1 NEW_LINE DEDENT x = x ^ m NEW_LINE return x NEW_LINE DEDENT n = 13 NEW_LINE print addOne ( n ) NEW_LINE,#include <bits/stdc++.h> NEW_LINE using namespace std ; int addOne ( int x ) { int m = 1 ; while ( x & m ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } int main ( ) { cout << addOne ( 13 ) ; return 0 ; },int addOne(int x){ int m = 1; while (x & m ){ x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x; } int main(){ int n = 13; cout<<addOne(n)<<endl; return 0; } ,5.546411037445068,0.8836718448579669,0.8376998041573345,0.7897537931432637,1.0,0.8528276552002845
12740,Python,C++,"' NEW_LINE ' NEW_LINE def divisorSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += int ( n / i ) * i NEW_LINE DEDENT return int ( sum ) NEW_LINE DEDENT n = 4 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE n = 5 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } int main ( ) { int n = 4 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; n = 5 ; cout << "" ▁ "" << divisorSum ( n ) << endl ; return 0 ; }",#include <iostream> using namespace std; int main() { int sum = 0; for (int i = 1; i <= n+1; i++){ sum += int(n/i) * i; } return int(sum); } int n = 4; cout << divisorSum(n) << endl; n = 5; cout << divisorSum(n) << endl; ,2.7838621139526367,0.7544866176475508,0.6822427531058071,0.582456490758438,1.0,0.7077195435309065
12813,Python,C++,"def SUM ( x , n ) : NEW_LINE INDENT total = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + ( ( x ** i ) / i ) NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE s = SUM ( x , n ) NEW_LINE print ( round ( s , 2 ) ) NEW_LINE","#include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <boost/format.hpp> NEW_LINE class gfg { public : double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( pow ( x , i ) / i ) ; return total ; } } ; int main ( ) { gfg g ; int x = 2 ; int n = 5 ; std :: cout << boost :: format ( "" % .2f "" ) % g . sum ( x , n ) ; return 0 ; }","#include <iostream> #include<cmath> double sum(int x , int n){ double total = 1; for (int i = 1 ; i <= n; ++i ){ total = total + ((pow(x, i))/i); } return total; } int main() { int x = 2 ,n = 5; double s= sum(x, n); std::cout << round(s * 100) / 100 ; return 0; } ",3.118349075317383,0.7022131056323943,0.6064900381864966,0.442027411165585,0.8,0.5494191878159095
12673,Python,C++,def AvgofSquareN ( n ) : NEW_LINE INDENT return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; NEW_LINE DEDENT n = 2 ; NEW_LINE print ( AvgofSquareN ( n ) ) ; NEW_LINE,#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } int main ( ) { int n = 10 ; cout << AvgofSquareN ( n ) ; return 0 ; },#include<iostream> using namespace std; double AvgofSquareN (int n ) { return ((n + 1) * (2 * n + 1)) / 6.0 ; } int main() { int n = 2; cout << AvgofSquareN(n); return 0; } ,4.534018039703369,0.8689892874626384,0.8264464726552854,0.7351601574045715,0.6666666666666666,0.7146121101832
7057,Python,C++,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; int knapSack ( int W , vector<int> wt , vector<int> val , int n ) { if(n == 0 || W == 0) return 0; if(wt[n-1] > W) return knapSack(W, wt, val, n-1); else return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)); } int main() { vector<int> val = {60, 100, 120}; vector<int> wt = {10, 20, 30}; int W = 50; int n = val.size(); cout<<knapSack(W, wt, val, n); return 0; } ",8.57753586769104,0.6838122850112112,0.6203696207274452,0.536932524805559,1.0,0.6758527673638912
2149,Python,C++,"def swap ( xp , yp ) : NEW_LINE INDENT xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE DEDENT x = [ 10 ] NEW_LINE swap ( x , x ) NEW_LINE print ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" , x [ 0 ] ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void swap ( int * xp , int * yp ) { * xp = * xp ^ * yp ; * yp = * xp ^ * yp ; * xp = * xp ^ * yp ; } int main ( ) { int x = 10 ; swap ( & x , & x ) ; cout << "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" << x ; return 0 ; }","#include <iostream> #include <vector> using namespace std; void swap(vector<int> &xp, vector<int> &yp) { int temp = xp[0]; xp[0] = yp[0]; yp[0] = temp; } int main() { vector<int> x(1, 10); swap(x, x); cout << ""After swap(&x, &x): x[0] = "" << x[0] << endl; return 0; } ",3.3905091285705566,0.6260869565217392,0.4859584410289862,0.3385467222005322,1.0,0.5369827055403725
8793,Python,C++,"def divideString ( string , n ) : NEW_LINE INDENT str_size = len ( string ) NEW_LINE if str_size % n != 0 : NEW_LINE INDENT print "" Invalid ▁ Input : ▁ String ▁ size ▁ is ▁ not ▁ divisible ▁ by ▁ n "" NEW_LINE return NEW_LINE DEDENT part_size = str_size / n NEW_LINE k = 0 NEW_LINE for i in string : NEW_LINE INDENT if k % part_size == 0 : NEW_LINE INDENT print   "" NEW_LINE DEDENT DEDENT DEDENT "" , NEW_LINE INDENT print i , NEW_LINE k += 1 NEW_LINE DEDENT string = "" a _ simple _ divide _ string _ quest "" NEW_LINE / * length od string is 28 * / NEW_LINE divideString ( string , 4 ) NEW_LINE","#include <iostream> NEW_LINE #include <string.h> NEW_LINE using namespace std ; class gfg { public : void divideString ( char str [ ] , int n ) { int str_size = strlen ( str ) ; int i ; int part_size ; if ( str_size % n != 0 ) { cout << "" Invalid ▁ Input : ▁ String ▁ size "" ; cout << "" ▁ is ▁ not ▁ divisible ▁ by ▁ n "" ; return ; } part_size = str_size / n ; for ( i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) cout << endl ; cout << str [ i ] ; } } } ; int main ( ) { gfg g ; char str [ ] = "" a _ simple _ divide _ string _ quest "" ; g . divideString ( str , 4 ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; void divideString(string str, int n){ size_t str_size = str.size(); if (str_size % n != 0) { cout << ""Invalid Input: String size is not divisible by n""; return; } size_t part_size = str_size / n; int k = 0; for(auto i : str){ if (k % part_size == 0) { cout << ""\n""<<i<<endl; } else{ cout<<i; } k++; } } int main(){ string test = ""a simple divide string quest""; // length of test is 28 divideString(test, 4); return <｜begin▁of▁sentence｜>0<e>; } ",6.756688117980957,0.7002567811032259,0.5653346418660556,0.3603625874783598,0.7142857142857143,0.4665395255205661
2142,Python,C++,def swapBits ( x ) : NEW_LINE INDENT even_bits = x & 0xAAAAAAAA NEW_LINE odd_bits = x & 0x55555555 NEW_LINE even_bits >>= 1 NEW_LINE odd_bits <<= 1 NEW_LINE return ( even_bits odd_bits ) NEW_LINE DEDENT x = 23 NEW_LINE print ( swapBits ( x ) ) NEW_LINE,#include <bits/stdc++.h> NEW_LINE using namespace std ; unsigned int swapBits ( unsigned int x ) { unsigned int even_bits = x & 0xAAAAAAAA ; unsigned int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } int main ( ) { unsigned int x = 23 ; cout << swapBits ( x ) ; return 0 ; },#include <iostream> using namespace std; int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA; int odd_bits = x & 0x55555555; even_bits >>= 1; odd_bits <<= 1; return (even_bits | odd_bits); } int main() { int x = 23; cout<< swapBits(x) <<endl; return 0; } ,3.033130168914795,0.9087733660629354,0.8470264407279735,0.7256027468424369,1.0,0.8079219227897059
1683,Python,C++,"def equilibrium ( arr ) : NEW_LINE INDENT total_sum = sum ( arr ) NEW_LINE leftsum = 0 NEW_LINE for i , num in enumerate ( arr ) : NEW_LINE INDENT total_sum -= num NEW_LINE if leftsum == total_sum : NEW_LINE INDENT return i NEW_LINE DEDENT leftsum += num NEW_LINE DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( ' First ▁ equilibrium ▁ index ▁ is ▁ ' , equilibrium ( arr ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return -1 ; } int main ( ) { int arr [ ] = { -7 , 1 , 5 , 2 , -4 , 3 , 0 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" First ▁ equilibrium ▁ index ▁ is ▁ "" << equilibrium ( arr , arr_size ) ; return 0 ; }","#include<vector> #include<iostream> int equilibrium (const std::vector<int>& arr) { int total_sum = 0; for(auto num : arr) total_sum += num; int leftSum = 0; for(size_t i=0; i < arr.size(); ++i){ total_sum -= arr[i]; if (leftSum == total_sum) return i; leftSum += arr[i]; } return -1; } int main() { std::vector<int> arr = {-7, 1, 5, 2, -4, 3, 0}; std::cout << ""First equilibrium index is: "" << equilibrium(arr) << ""\n""; return 0; } ",4.692929029464722,0.6285678575463376,0.5284576107202682,0.3946497627827868,0.888888888888889,0.5429215006146174
1862,Python,C++,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for x in range ( W + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT return K [ n ] [ W ] NEW_LINE DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print ( knapSack ( W , wt , val , n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } int main ( ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = sizeof ( val ) / sizeof ( val [ 0 ] ) ; cout << knapSack ( W , wt , val , n ) ; return 0 ; }","#include<iostream> #include<vector> #include<algorithm> using namespace std; int knapSack ( int W , vector<int>& wt , vector<int>& val, int n ) { vector<vector<int>> K(n+1, vector<int>(W+1)); for(int i=0;i<=n;i++) { for(int w=0;w<=W;w++) { if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i-1] <= w) K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); else K[i][w] = K[i-1][w]; } } return K[n][W]; } int main() { vector<int> val{60, 100, 120}; vector<int> wt{10, 20, 30}; int W = 50; int n = val.size(); cout<< knapSack(W, wt, val, n) <<endl; } ",8.278949975967407,0.6770092838182056,0.5987480820032445,0.5014610666496566,1.0,0.6510227466547596
2143,Python,C++,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( True if ( n > 0 and ( ( n & ( n - 1 ) ) > 0 ) ) else False ) ; NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if ( isPowerOfTwo ( n ) == True ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT i = 1 ; NEW_LINE pos = 1 ; NEW_LINE while ( ( i & n ) == 0 ) : NEW_LINE INDENT i = i << 1 ; NEW_LINE pos += 1 ; NEW_LINE DEDENT return pos ; NEW_LINE DEDENT n = 16 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 12 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 128 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned i = 1 , pos = 1 ; while ( ! ( i & n ) ) { i = i << 1 ; ++ pos ; } return pos ; } int main ( void ) { int n = 16 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number "" << endl : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","#include <iostream> using namespace std; bool isPowerOfTwo(int n) { return (n > 0 && ((n & (n - 1)) > 0)); } int findPosition(int n) { int i = 1, pos = 1; while((i & n) == 0){ i = i << 1; ++pos; } return pos; } int main() { int n = 16, pos; pos = findPosition(n); if (pos == -1) cout << ""n = ""<< n << "", Invalid number"" << endl; else cout << ""n = ""<< n << "", Position = ""<< pos <<endl; n = 12; pos = findPosition(n); if (pos == -1) cout << ""n = ""<< n << "", Invalid number"" << endl; else cout << ""n = ""<< n << "", Position = ""<< pos <<endl; n = 128; pos = findPosition(n); if (pos == -1) cout << ""n = ""<< n << "", Invalid number"" << endl; else cout << ""n = ""<< n << "", Position = ""<< pos <<endl; return 0; } ",12.273646116256714,0.8367360957754457,0.7413001971968449,0.5942374072262928,0.7272727272727272,0.6341480032402231
1703,Python,C++,"def printRepeating ( arr , size ) : NEW_LINE INDENT count = [ 0 ] * size NEW_LINE print ( "" ▁ Repeating ▁ elements ▁ are ▁ "" , end = "" "" ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( count [ arr [ i ] ] == 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT count [ arr [ i ] ] = count [ arr [ i ] ] + 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printRepeating ( int arr [ ] , int size ) { int * count = new int [ sizeof ( int ) * ( size - 2 ) ] ; int i ; cout << "" ▁ Repeating ▁ elements ▁ are ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << "" ▁ "" ; else count [ arr [ i ] ] ++ ; } } int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printRepeating ( arr , arr_size ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; void printRepeating(vector<int> &arr, int size){ vector<int> count(size, 0); cout << "" Repeating elements are ""; for (int i = 0; i < size; ++i) { if(count[arr[i]] == 1) cout << arr[i] << "" ""; else ++count[arr[i]]; } } int main() { vector<int> arr = {4,2,4,5,2,3,1}; int arr_size = arr.size(); printRepeating(arr, arr_size); return 0; } ",6.618896961212158,0.6666329908395477,0.5847994075945476,0.468358220495789,0.923076923076923,0.6047738312701292
7056,Python,C++,"INT_MAX = 32767 NEW_LINE def eggDrop ( n , k ) : NEW_LINE INDENT eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ 1 ] = 1 NEW_LINE eggFloor [ i ] [ 0 ] = 0 NEW_LINE DEDENT for j in range ( 1 , k + 1 ) : NEW_LINE INDENT eggFloor [ 1 ] [ j ] = j NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT for j in range ( 2 , k + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ j ] = INT_MAX NEW_LINE for x in range ( 1 , j + 1 ) : NEW_LINE INDENT res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) NEW_LINE if res < eggFloor [ i ] [ j ] : NEW_LINE INDENT eggFloor [ i ] [ j ] = res NEW_LINE DEDENT DEDENT DEDENT DEDENT return eggFloor [ n ] [ k ] NEW_LINE DEDENT n = 2 NEW_LINE k = 36 NEW_LINE print ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst ▁ case ▁ with "" + str ( n ) + "" eggs ▁ and ▁ "" + str ( k ) + "" ▁ floors ▁ is ▁ "" + str ( eggDrop ( n , k ) ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int eggDrop ( int n , int k ) { int eggFloor [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = INT_MAX ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } int main ( ) { int n = 2 , k = 36 ; cout << "" Minimum number of trials "" STRNEWLINE TABSYMBOL TABSYMBOL "" in worst case with "" << n << "" ▁ eggs ▁ and ▁ "" << k << "" ▁ floors ▁ is ▁ "" << eggDrop ( n , k ) ; return 0 ; }","#include <iostream> #include <vector> #include <algorithm> using namespace std; int eggDrop(int n, int k) { vector<vector<int>> eggFloor(n+1, vector<int>(k+1)); for (int i = 1; i <= n; ++i){ eggFloor[i][1] = 1; eggFloor[i][0] = 0; } for (int j = 1; j <= k; ++j) { eggFloor[1][j] = j; } for (int i = 2; i <= n; ++i){ for(int j = 2; j <= k; ++j) { eggFloor[i][j] = INT_MAX; for (int x = 1; x <= j; ++x) { int res = 1 + max(eggFloor[i-1][x-1], eggFloor[i][j-x]); if (res < eggFloor[i][j]) { eggFloor[i][j] = res; } } } } return eggFloor[n][k]; } int main() { int n = 2, k = 36; cout << ""Minimum number of trials in worst case with"" << n << ""eggs and"" << k << ""floors is"" << eggDrop(n, k) << endl; return 0; } ",12.07393479347229,0.7926978596433167,0.7309783851608356,0.6281928612516743,1.0,0.739735002876172
13544,Python,C++,"def gcd ( a , b ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a / gcd ( a , b ) ) * b NEW_LINE DEDENT a = 15 NEW_LINE b = 20 NEW_LINE print ( ' LCM ▁ of ' , a , ' and ' , b , ' is ' , lcm ( a , b ) ) NEW_LINE","#include <iostream> NEW_LINE using namespace std ; long long gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } long long lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } int main ( ) { int a = 15 , b = 20 ; cout << "" LCM ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << lcm ( a , b ) ; return 0 ; }","#include <iostream> using namespace std; int gcd ( int a , int b ) { if (a == 0){ return b; } return gcd (b % a, a); } int lcm ( int a, int b) { return ( a/gcd(a, b)) * b ; } int main() { int a = 15 , b = 20; cout << ""LCM of ""<< a <<"" and "" << b <<"" is: "" << lcm(a, b) << endl; return 0; } ",3.5797412395477295,0.8558946963613626,0.7634918134093281,0.6220057238013668,1.0,0.7354040066609566
1610,Python,C++,"NA = - 1 NEW_LINE def moveToEnd ( mPlusN , size ) : NEW_LINE INDENT i = 0 NEW_LINE j = size - 1 NEW_LINE for i in range ( size - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( mPlusN [ i ] != NA ) : NEW_LINE INDENT mPlusN [ j ] = mPlusN [ i ] NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def merge ( mPlusN , N , m , n ) : NEW_LINE INDENT i = n NEW_LINE j = 0 NEW_LINE k = 0 NEW_LINE while ( k < ( m + n ) ) : NEW_LINE INDENT if ( ( j == n ) or ( i < ( m + n ) and mPlusN [ i ] <= N [ j ] ) ) : NEW_LINE INDENT mPlusN [ k ] = mPlusN [ i ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mPlusN [ k ] = N [ j ] NEW_LINE k += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , "" ▁ "" , end = "" "" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT mPlusN = [ 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 ] NEW_LINE N = [ 5 , 7 , 9 , 25 ] NEW_LINE n = len ( N ) NEW_LINE m = len ( mPlusN ) - n NEW_LINE moveToEnd ( mPlusN , m + n ) NEW_LINE merge ( mPlusN , N , m , n ) NEW_LINE printArray ( mPlusN , m + n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; #define NA  -1 NEW_LINE void moveToEnd ( int mPlusN [ ] , int size ) { int j = size - 1 ; for ( int i = size - 1 ; i >= 0 ; i -- ) if ( mPlusN [ i ] != NA ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } int merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( j == n ) || ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << arr [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { int mPlusN [ ] = { 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = sizeof ( N ) / sizeof ( N [ 0 ] ) ; int m = sizeof ( mPlusN ) / sizeof ( mPlusN [ 0 ] ) - n ; moveToEnd ( mPlusN , m + n ) ; merge ( mPlusN , N , m , n ) ; printArray ( mPlusN , m + n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; #define NA -1 #define NEW_LINE cout << endl int main() { vector<int> mPlusN = {2, 8, NA, NA, NA, 13, NA, 15, 20}; vector<int> N = {5, 7, 9, 25}; int size = mPlusN.size(); for(int i=0; i < size ; ++i) if (mPlusN[i]!=NA) swap(mPlusN[i], mPlusN[--size]); NEW_LINE; int n = N.size(); int m = mPlusN.size() - n; while(--n>=0){ if((m<(m+n)) && (mPlusN[m] <= N[n])){ swap(mPlusN[m], N[n]); ++m; } else { mPlusN[m] = N[n]; ++m; ++n; } } NEW_LINE; for(int i = 0 ;i< (m+size) ; ++i ){ cout << mPlusN[i] << "" ""; } return 0; } ",8.891760110855103,0.5295717850311535,0.4438691480665602,0.3067206501296943,0.923076923076923,0.4916275320138629
11743,Python,C++,"from math import pow NEW_LINE def nthTermOfTheSeries ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT nthTerm = pow ( n - 1 , 2 ) + n NEW_LINE DEDENT else : NEW_LINE INDENT nthTerm = pow ( n + 1 , 2 ) + n NEW_LINE DEDENT return nthTerm NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 8 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 12 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 102 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 9999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int nthTermOfTheSeries ( int n ) { int nthTerm ; if ( n % 2 == 0 ) nthTerm = pow ( n - 1 , 2 ) + n ; else nthTerm = pow ( n + 1 , 2 ) + n ; return nthTerm ; } int main ( ) { int n ; n = 8 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 12 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 102 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 999 ; cout << nthTermOfTheSeries ( n ) << endl ; n = 9999 ; cout << nthTermOfTheSeries ( n ) << endl ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; double nthTermOfTheSeries(int n) { double nthTerm; if (n % 2 == 0) nthTerm = pow((n - 1), 2) + n; else nthTerm = pow((n + 1), 2) + n; return nthTerm; } int main() { int n = 8; cout << (int)(nthTermOfTheSeries(n))<<endl; n = 12; cout << (int)(nthTermOfTheSeries(n))<<endl; n = 102; cout << (int)(nthTermOfTheSeries(n))<<endl; n = 999; cout << (int)(nthTermOfTheSeries(n))<<endl; n = 9999; cout << (int)(nthTermOfTheSeries(n))<<endl; return 0; } ",8.501698732376099,0.8022598870056498,0.763846670480476,0.6584510924738033,0.888888888888889,0.727582431398329
13474,Python,C++,"def countSquares ( m , n ) : NEW_LINE INDENT if ( n < m ) : NEW_LINE INDENT temp = m NEW_LINE m = n NEW_LINE n = temp NEW_LINE DEDENT return ( ( m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = 4 NEW_LINE n = 3 NEW_LINE print ( "" Count ▁ of ▁ squares ▁ is ▁ "" , countSquares ( m , n ) ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; int countSquares ( int m , int n ) { if ( n < m ) swap ( m , n ) ; return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } int main ( ) { int m = 4 , n = 3 ; cout << "" Count ▁ of ▁ squares ▁ is ▁ "" << countSquares ( m , n ) ; }","#include<iostream> using namespace std; float countSquares (int& m, int& n) { if (n < m) { int temp = m; m = n; n = temp; } return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2)); } int main() { int m = 4, n = 3; cout << ""Count of squares is "" << countSquares(m, n); return 0; } ",3.729346990585327,0.8389830508474576,0.7761100474395601,0.682667086388706,0.8571428571428571,0.7350098176149513
13562,Python,C++,"def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) ; NEW_LINE DEDENT print ( "" "" ) ; NEW_LINE return ; NEW_LINE DEDENT def printSequencesRecur ( arr , n , k , index ) : NEW_LINE INDENT if ( k == 0 ) : NEW_LINE INDENT printArray ( arr , index ) ; NEW_LINE DEDENT if ( k > 0 ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ index ] = i ; NEW_LINE printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; NEW_LINE DEDENT DEDENT DEDENT def printSequences ( n , k ) : NEW_LINE INDENT arr = [ 0 ] * n ; NEW_LINE printSequencesRecur ( arr , n , k , 0 ) ; NEW_LINE return ; NEW_LINE DEDENT n = 3 ; NEW_LINE k = 2 ; NEW_LINE printSequences ( n , k ) ; NEW_LINE","#include <iostream> NEW_LINE using namespace std ; void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << "" ▁ "" << arr [ i ] ; cout << "" STRNEWLINE "" ; return ; } void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } void printSequences ( int n , int k ) { int * arr = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } int main ( ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; void printArray(vector<int> arr, int size){ for (int i = 0; i < size; ++i){ cout << arr[i] << "" ""; } cout<<endl; } void printSequencesRecur(vector<int>& arr, int n, int k, int index) { if (k == 0){ printArray(arr,index); } else if (k > 0) { for (int i = 1; i <= n; ++i) { arr[index] = i; printSequencesRecur(arr,n, k-1, index+1 ); } } } void printSequences( int n, int k){ vector<int> arr(n); printSequencesRecur(arr,n,k,0); } int main(){ int n = 3; int k = 2; printSequences(n,k); return 0; } ",6.6189868450164795,0.8260487729506403,0.7690435097795124,0.6706893482584261,0.8333333333333334,0.7194825437808983
1955,Python,C++,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; if ( j == M ) { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; void search(const string& pat, const string& txt) { int M = pat.length(); int N = txt.length(); for (int i = 0; i <= N - M; i++) { int j; for (j = 0; j < M; j++) if (txt[i + j] != pat[j]) break; if (j == M) cout << ""Pattern found at index "" << i << endl; } } int main() { string txt = ""ABCEABCDABCEABCD""; string pat = ""ABCD""; search(pat, txt); return 0; } ",8.031965255737305,0.732779548254755,0.6754341078875401,0.5738972106836232,0.7999999999999999,0.6417280474785362
2018,Python,C++,"def fact ( n ) : NEW_LINE INDENT f = 1 NEW_LINE while n >= 1 : NEW_LINE INDENT f = f * n NEW_LINE n = n - 1 NEW_LINE DEDENT return f NEW_LINE DEDENT def findSmallerInRight ( st , low , high ) : NEW_LINE INDENT countRight = 0 NEW_LINE i = low + 1 NEW_LINE while i <= high : NEW_LINE INDENT if st [ i ] < st [ low ] : NEW_LINE INDENT countRight = countRight + 1 NEW_LINE DEDENT i = i + 1 NEW_LINE DEDENT return countRight NEW_LINE DEDENT def findRank ( st ) : NEW_LINE INDENT ln = len ( st ) NEW_LINE mul = fact ( ln ) NEW_LINE rank = 1 NEW_LINE i = 0 NEW_LINE while i < ln : NEW_LINE INDENT mul = mul / ( ln - i ) NEW_LINE countRight = findSmallerInRight ( st , i , ln - 1 ) NEW_LINE rank = rank + countRight * mul NEW_LINE i = i + 1 NEW_LINE DEDENT return rank NEW_LINE DEDENT st = "" string "" NEW_LINE print ( findRank ( st ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <string.h> NEW_LINE using namespace std ; int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } int findSmallerInRight ( char * str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str [ i ] < str [ low ] ) ++ countRight ; return countRight ; } int findRank ( char * str ) { int len = strlen ( str ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; int i ; for ( i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } int main ( ) { char str [ ] = "" string "" ; cout << findRank ( str ) ; return 0 ; }","#include<iostream> #include<string.h> using namespace std; int fact( int n ) { int f = 1; while (n >= 1) { f = f * n; n = n - 1; } return f; } int findSmallerInRight( string st , int low , int high ) { int countRight = 0; for (int i = low+1; i <= high ; ++i) { if (st[i] < st[low]) countRight++; } return countRight; } int findRank( string st ){ int ln=st.length(); int mul = fact(ln); int rank = 1, i = 0; while (i < ln) { mul /= (ln - i); int countRight = findSmallerInRight( st , i , ln-1 ); rank += countRight * mul ; i++; } return rank; } int main(){ string st = ""string""; cout << findRank(st); } ",6.982172250747681,0.7684043383051389,0.6707203801912368,0.4747316771241854,0.8000000000000002,0.5723121739869298
1656,Python,C++,"def findElement ( arr , n , key ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == key ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 12 , 34 , 10 , 6 , 40 ] NEW_LINE n = len ( arr ) NEW_LINE key = 40 NEW_LINE index = findElement ( arr , n , key ) NEW_LINE if index != - 1 : NEW_LINE INDENT print ( "" element ▁ found ▁ at ▁ position : ▁ "" + str ( index + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" element ▁ not ▁ found "" ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findElement ( int arr [ ] , int n , int key ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return -1 ; } int main ( ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) cout << "" Element ▁ not ▁ found "" ; else cout << "" Element ▁ Found ▁ at ▁ Position : ▁ "" << position + 1 ; return 0 ; }","#include<iostream> #include<vector> using namespace std; int findElement ( vector<int> &arr , int n , int key ) { for (int i = 0 ; i < n ; ++i) { if( arr[i] == key){ return i;} } return -1; } int main() { vector<int> arr = {12,34,10,6,40}; int n = arr.size(); int key = 40; int index = findElement (arr , n , key); if(index != -1 ){ cout<< "" element found at position : "" << index+1 ;} else {cout<< "" element not found"";} return 0;} ",4.2722108364105225,0.6940265059093652,0.5880904918176871,0.44521811268032874,1.0,0.6116526788762301
12321,Python,C++,"import math NEW_LINE def distance ( x1 , y1 , z1 , x2 , y2 , z2 ) : NEW_LINE INDENT d = math . sqrt ( math . pow ( x2 - x1 , 2 ) + math . pow ( y2 - y1 , 2 ) + math . pow ( z2 - z1 , 2 ) * 1.0 ) NEW_LINE print ( "" Distance ▁ is ▁ "" ) NEW_LINE print ( d ) NEW_LINE DEDENT x1 = 2 NEW_LINE y1 = - 5 NEW_LINE z1 = 7 NEW_LINE x2 = 3 NEW_LINE y2 = 4 NEW_LINE z2 = 5 NEW_LINE distance ( x1 , y1 , z1 , x2 , y2 , z2 ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <iomanip> NEW_LINE #include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { float d = sqrt ( pow ( x2 - x1 , 2 ) + pow ( y2 - y1 , 2 ) + pow ( z2 - z1 , 2 ) * 1.0 ) ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 2 ) ; cout << "" ▁ Distance ▁ is ▁ "" << d ; return ; } int main ( ) { float x1 = 2 ; float y1 = -5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; double distance( double x1 , double y1 , double z1 , double x2 , double y2 , double z2 ) { double d = sqrt( pow(x2 - x1, 2) + pow(y2 - y1, 2) + pow(z2 - z1, 2)*1.0 ); cout << ""Distance is ""<< d << endl; } int main() { double x1 = 2, y1 = -5, z1 = 7; double x2 = 3, y2 = 4, z2 = 5; distance(x1, y1, z1, x2, y2, z2); } ",5.250216007232666,0.6131918340217655,0.5517041025637439,0.439768616831961,0.3333333333333333,0.40783803178237266
2133,Python,C++,import math NEW_LINE def getFirstSetBitPos ( n ) : NEW_LINE INDENT return math . log2 ( n & - n ) + 1 NEW_LINE DEDENT n = 12 NEW_LINE print ( int ( getFirstSetBitPos ( n ) ) ) NEW_LINE,#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; class gfg { public : unsigned int getFirstSetBitPos ( int n ) { return log2 ( n & - n ) + 1 ; } } ; int main ( ) { gfg g ; int n = 12 ; cout << g . getFirstSetBitPos ( n ) ; return 0 ; },#include <bitset> #include <iostream> #include <cmath> using namespace std; int getFirstSetBitPos(int n) { return log2((n & -n)) + 1; } int main() { int n = 12; cout << (getFirstSetBitPos(n)); } ,1.8036069869995117,0.6912934086606681,0.6376845922941546,0.47549181019722236,0.6666666666666666,0.5328442671380557
2190,Python,C++,"def maxDiff ( arr , arr_size ) : NEW_LINE INDENT max_diff = arr [ 1 ] - arr [ 0 ] NEW_LINE for i in range ( 0 , arr_size ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size ) : NEW_LINE INDENT if ( arr [ j ] - arr [ i ] > max_diff ) : NEW_LINE INDENT max_diff = arr [ j ] - arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return max_diff NEW_LINE DEDENT arr = [ 1 , 2 , 90 , 10 , 110 ] NEW_LINE size = len ( arr ) NEW_LINE print ( "" Maximum ▁ difference ▁ is "" , maxDiff ( arr , size ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; for ( int i = 0 ; i < arr_size ; i ++ ) { for ( int j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } int main ( ) { int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Maximum ▁ difference ▁ is ▁ "" << maxDiff ( arr , n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; int maxDiff(vector<int>& arr, int arr_size){ int max_diff = arr[1] - arr[0]; for (int i = 0; i < arr_size; ++i) { for (int j = i+1; j < arr_size; ++j) { if ((arr[j] - arr[i]) > max_diff){ max_diff = arr[j] - arr[i]; } } } return max_diff; } int main() { vector<int> arr = {1, 2, 90, 10, 110}; int size = arr.size(); cout << ""Maximum difference is ""<<maxDiff(arr, size)<<endl; } ",5.249367952346802,0.8194635446025595,0.7470546466334222,0.6449821041179038,1.0,0.7514874728825326
1715,Python,C++,"def find3Numbers ( A , arr_size , sum ) : NEW_LINE INDENT for i in range ( 0 , arr_size - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , arr_size ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] == sum : NEW_LINE INDENT print ( "" Triplet ▁ is "" , A [ i ] , "" , ▁ "" , A [ j ] , "" , ▁ "" , A [ k ] ) NEW_LINE return True NEW_LINE DEDENT DEDENT DEDENT DEDENT return False NEW_LINE DEDENT A = [ 1 , 4 , 45 , 6 , 10 , 8 ] NEW_LINE sum = 22 NEW_LINE arr_size = len ( A ) NEW_LINE find3Numbers ( A , arr_size , sum ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; bool find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { cout << "" Triplet ▁ is ▁ "" << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] ; return true ; } } } } return false ; } int main ( ) { int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = sizeof ( A ) / sizeof ( A [ 0 ] ) ; find3Numbers ( A , arr_size , sum ) ; return 0 ; }","#include <iostream> using namespace std; bool find3Numbers(int A[], int arr_size, int sum) { for (int i = 0; i < arr_size - 2; ++i) { for (int j = i + 1; j < arr_size - 1; ++j) { for (int k = j + 1; k < arr_size; ++k) { if (A[i] + A[j] + A[k] == sum) { cout << ""Triplet is "" << A[i] << "", "" << A[j] << "", "" << A[k] << endl; return true; } } } } return false; } int main() { int A[] = {1, 4, 45, 6, 10, 8}; int sum = 22; int arr_size = sizeof(A)/sizeof(A[0]); find3Numbers(A, arr_size, sum); return 0; } ",6.244071960449219,0.9090628117896025,0.8801050659028832,0.8282090308589911,1.0,0.8797463216012937
12963,Python,C++,"def countDigit ( n ) : NEW_LINE INDENT if n / 10 == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 1 + countDigit ( n // 10 ) NEW_LINE DEDENT n = 345289467 NEW_LINE print ( "" Number ▁ of ▁ digits ▁ : ▁ % ▁ d "" % ( countDigit ( n ) ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int countDigit ( long long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } int main ( void ) { long long n = 345289467 ; cout << "" Number ▁ of ▁ digits ▁ : "" << countDigit ( n ) ; return 0 ; }","#include<iostream> using namespace std; int countDigit(long long n) { if (n / 10 == 0) return 1; return 1 + countDigit(n / 10); } int main() { long long n = 345289467; cout << ""Number of digits : "" << countDigit(n) << endl; return <｜begin▁of▁sentence｜>0",4.076329231262207,0.8932524964156237,0.8367683862516639,0.7670761606674761,0.8571428571428571,0.7940961696100903
1788,Python,C++,"def binarySearch ( arr , l , r , x ) : NEW_LINE INDENT if r >= l : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE if arr [ mid ] == x : NEW_LINE INDENT return mid NEW_LINE DEDENT elif arr [ mid ] > x : NEW_LINE INDENT return binarySearch ( arr , l , mid - 1 , x ) NEW_LINE DEDENT else : NEW_LINE INDENT return binarySearch ( arr , mid + 1 , r , x ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT arr = [ 2 , 3 , 4 , 10 , 40 ] NEW_LINE x = 10 NEW_LINE result = binarySearch ( arr , 0 , len ( arr ) - 1 , x ) NEW_LINE if result != - 1 : NEW_LINE INDENT print ( "" Element ▁ is ▁ present ▁ at ▁ index ▁ % ▁ d "" % result ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return -1 ; } int main ( void ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int result = binarySearch ( arr , 0 , n - 1 , x ) ; ( result == -1 ) ? cout << "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" : cout << "" Element ▁ is ▁ present ▁ at ▁ index ▁ "" << result ; return 0 ; }","#include <iostream> #include <vector> using namespace std; int binarySearch(vector<int>& arr, int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; else if (arr[mid] > x) return binarySearch(arr, l, mid-1, x); else return binarySearch(arr, mid+1, r, x); } return -1; } int main() { vector<int> arr = {2, 3, 4, 10, 40}; int x = 10; int result = binarySearch(arr, 0, arr.size()-1, x); if (result != -1) cout << ""Element is present at index "" << result; else cout << ""Element is not present in array""; } ",6.294275760650635,0.7796663183211509,0.7013554010570534,0.606302684379457,0.75,0.6494118790656198
9263,Python,C++,PI = 3.14159265 NEW_LINE def area_cicumscribed ( c ) : NEW_LINE INDENT return ( c * c * ( PI / 4 ) ) NEW_LINE DEDENT c = 8.0 NEW_LINE print ( area_cicumscribed ( c ) ) NEW_LINE,#include <bits/stdc++.h> NEW_LINE #define PI  3.14159265 NEW_LINE using namespace std ; float area_circumscribed ( float c ) { return ( c * c * ( PI / 4 ) ) ; } int main ( ) { float c = 8 ; cout << area_circumscribed ( c ) ; return 0 ; },#include <iostream> #define PI 3.14159265 #define NEW_LINE std::endl double area_circumscribed( double c ) { return (c * c * (PI / 4)); } int main() { double c = 8.0; std::cout << area_circumscribed(c) << NEW_LINE; return 0; } ,2.55985689163208,0.7777777777777778,0.6812912050607948,0.5553431710320454,0.6666666666666666,0.5887402197224317
12672,Python,C++,"def AvgofSquareN ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum / n NEW_LINE DEDENT n = 2 NEW_LINE print ( AvgofSquareN ( n ) ) NEW_LINE",#include <bits/stdc++.h> NEW_LINE using namespace std ; float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } int main ( ) { int n = 2 ; cout << AvgofSquareN ( n ) ; return 0 ; },#include<iostream> using namespace std; double AvgofSquareN(int n){ double sum = 0.0; for (int i=1; i <=n ; ++i) { sum += i*i; } return sum / n; } int main() { int n = 2; cout << AvgofSquareN(n); return 0; } ,4.319451808929443,0.806138533837085,0.7170998739645035,0.5821562117409625,0.75,0.6325093482186737
2304,Python,C++,"def printTwoElements ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT if arr [ abs ( arr [ i ] ) - 1 ] > 0 : NEW_LINE INDENT arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ repeating ▁ element ▁ is "" , abs ( arr [ i ] ) ) NEW_LINE DEDENT DEDENT for i in range ( size ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT print ( "" and ▁ the ▁ missing ▁ element ▁ is "" , i + 1 ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 7 , 3 , 4 , 5 , 5 , 6 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE printTwoElements ( arr , n ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printTwoElements ( int arr [ ] , int size ) { int i ; cout << "" ▁ The ▁ repeating ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) - 1 ] > 0 ) arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] ; else cout << abs ( arr [ i ] ) << "" STRNEWLINE "" ; } cout << "" and ▁ the ▁ missing ▁ element ▁ is ▁ "" ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) cout << ( i + 1 ) ; } } int main ( ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printTwoElements ( arr , n ) ; }","#include <iostream> #include <vector> using namespace std; void printTwoElements( vector<int>& arr , int size ) { for (int i = 0; i < size; ++i) { if (arr[abs(arr[i])-1] > 0) { arr[abs(arr[i])-1] = -arr[abs(arr[i])-1]; } else { cout << "" The repeating element is "" << abs(arr[i]) << endl; } } for (int i = 0; i < size; ++i) { if (arr[i] > 0) { cout << "" and the missing element is "" << i+1 << endl; } } } int main() { vector<int> arr{7,3,4,5,5,6,2}; int n = arr.size(); printTwoElements(arr, n); return 0; } ",9.187865018844604,0.6954775998157113,0.5959275314138742,0.4614159827592597,0.9090909090909091,0.5957184606587544
2148,Python,C++,"x = 10 NEW_LINE y = 5 NEW_LINE x = x ^ y ; NEW_LINE y = x ^ y ; NEW_LINE x = x ^ y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = ▁ "" , x , "" ▁ y ▁ = "" , y ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; return 0 ; }","#include<iostream> int main() { int x = 10; int y = 5; // Swapping values of x and y using bitwise XOR operator x = x ^ y; y = x ^ y; x = x ^ y; std::cout << ""After Swapping: x = "" << x << "", y = "" << y; return 0; } ",2.54388689994812,0.8227848101265823,0.7547319081399414,0.6344886179475455,1.0,0.7441420325632818
9291,Python,C++,"def area ( r ) : NEW_LINE INDENT return ( 0.5 ) * ( 3.14 ) * ( r * r ) NEW_LINE DEDENT def perimeter ( r ) : NEW_LINE INDENT return ( 3.14 ) * ( r ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT r = 10 NEW_LINE print ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" , area ( r ) ) NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" , perimeter ( r ) ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; float area ( float r ) { return ( 0.5 ) * ( 3.14 ) * ( r * r ) ; } float perimeter ( float r ) { return ( 3.14 ) * ( r ) ; } int main ( ) { int r = 10 ; cout << "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" << area ( r ) << endl ; cout << "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" << perimeter ( r ) << endl ; return 0 ; }","#include<iostream> #define PI 3.14 #define AREA(r) (0.5)*PI*(r*r) #define PERIMETER(r) PI*(r) int main() { int r = 10; std::cout << ""The Area of Semicircle: "" << AREA(r) << std::endl; std::cout << ""The Perimeter of Semicircle: "" << PERIMETER(r) << std::endl; return 0; } ",3.385469913482666,0.66435085836295,0.5452007321638971,0.36811082481132135,0.8,0.4976775773679249
2076,Python,C++,"def swapBits ( x , p1 , p2 , n ) : NEW_LINE INDENT set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) NEW_LINE set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) NEW_LINE xor = ( set1 ^ set2 ) NEW_LINE xor = ( xor << p1 ) | ( xor << p2 ) NEW_LINE result = x ^ xor NEW_LINE return result NEW_LINE DEDENT res = swapBits ( 28 , 0 , 3 , 2 ) NEW_LINE print ( "" Result ▁ = "" , res ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int swapBits ( unsigned int x , unsigned int p1 , unsigned int p2 , unsigned int n ) { unsigned int set1 = ( x >> p1 ) & ( ( 1U << n ) - 1 ) ; unsigned int set2 = ( x >> p2 ) & ( ( 1U << n ) - 1 ) ; unsigned int Xor = ( set1 ^ set2 ) ; Xor = ( Xor << p1 ) | ( Xor << p2 ) ; unsigned int result = x ^ Xor ; return result ; } int main ( ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; cout << "" Result ▁ = ▁ "" << res ; return 0 ; }","#include <iostream> using namespace std; int swapBits(int x, int p1, int p2, int n){ int set1 = (x >> p1) & ((1 << n) - 1); int set2 = (x >> p2) & ((1 << n) - 1); int xor_val = set1 ^ set2; xor_val = (xor_val << p1) | (xor_val << p2); int result = x ^ xor_val; return result; } int main() { int res = swapBits(28, 0, 3, 2); cout << "" Result is = "" << res << endl; return <｜begin▁of▁sentence｜>hakalaka",4.738906145095825,0.8365209499097418,0.7576755693083617,0.6229763194593583,1.0,0.7360834236215508
12300,Python,C++,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 and b == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a == b ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a > b ) : NEW_LINE INDENT return gcd ( a - b , b ) NEW_LINE DEDENT return gcd ( a , b - a ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","#include <iostream> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int a = 0 , b = 56 ; cout << "" GCD ▁ of ▁ "" << a << "" ▁ and ▁ "" << b << "" ▁ is ▁ "" << gcd ( a , b ) ; return 0 ; }","#include <iostream> using namespace std; int gcd(int a, int b) { if (a == 0 && b == 0) return 0; if (a == 0) return b; if (b == 0) return a; if (a == b) return a; if (a > b) return gcd(a-b, b); return gcd(a, b-a); } int main() { int a = 98, b = 56; int result = gcd(a, b); if (result) cout << ""GCD of "" << a << "" and "" << b << "" is "" << result << endl; else cout << ""not found"" << endl; return 0; } ",8.250447034835815,0.8280254777070064,0.7880476560971772,0.7154355290169373,0.8571428571428571,0.7579477274547132
2311,Python,C++,"def findFourElements ( A , n , X ) : NEW_LINE INDENT for i in range ( 0 , n - 3 ) : NEW_LINE INDENT for j in range ( i + 1 , n - 2 ) : NEW_LINE INDENT for k in range ( j + 1 , n - 1 ) : NEW_LINE INDENT for l in range ( k + 1 , n ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] + A [ l ] == X : NEW_LINE INDENT print ( "" % d , ▁ % d , ▁ % d , ▁ % d "" % ( A [ i ] , A [ j ] , A [ k ] , A [ l ] ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT A = [ 10 , 2 , 3 , 4 , 5 , 9 , 7 , 8 ] NEW_LINE n = len ( A ) NEW_LINE X = 23 NEW_LINE findFourElements ( A , n , X ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) cout << A [ i ] << "" , ▁ "" << A [ j ] << "" , ▁ "" << A [ k ] << "" , ▁ "" << A [ l ] ; } } } } int main ( ) { int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int X = 91 ; findFourElements ( A , n , X ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; void findFourElements(vector<int>& A, int n, int X){ for (int i = 0; i < n - 3; ++i) { for (int j = i + 1; j < n - 2; ++j) { for (int k = j + 1; k < n - 1; ++k) { for (int l = k + 1; l < n; ++l) { if (A[i] + A[j] + A[k] + A[l] == X){ cout << A[i]<< "", ""<< A[j]<< "", ""<< A[k]<< "", ""<< A[l]<< endl; } } } } } } int main(){ vector<int> A{10,2,3,4,5,9,7,8}; int n = A.size(); int X = 23; findFourElements(A,n,X); return 0; } ",6.583506107330322,0.8215369565499759,0.7708791618805465,0.6952531042988843,1.0,0.786677173009219
836,Python,C++,"def Identity ( size ) : NEW_LINE INDENT for row in range ( 0 , size ) : NEW_LINE INDENT for col in range ( 0 , size ) : NEW_LINE INDENT if ( row == col ) : NEW_LINE INDENT print ( ""1 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ""0 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT size = 5 NEW_LINE Identity ( size ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int Identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) cout << 1 << "" ▁ "" ; else cout << 0 << "" ▁ "" ; } cout << endl ; } return 0 ; } int main ( ) { int size = 5 ; Identity ( size ) ; return 0 ; }","#include<iostream> using namespace std; void Identity(int size) { for (int row = 0; row < size; ++row){ for (int col = 0; col < size; ++col) { if (row == col) cout << ""1 ""; else cout << ""0 ""; } cout << endl; } } int main() { int size = 5; Identity(size); return 0; } ",6.067442893981934,0.7849142531518821,0.7006858890968711,0.5628075020367843,0.9090909090909091,0.6666925241530217
7322,Python,C++,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; void search ( string pat , string txt ) { int M = pat . size ( ) ; int N = txt . size ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt [ i + j ] != pat [ j ] ) break ; { cout << "" Pattern ▁ found ▁ at ▁ index ▁ "" << i << endl ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } int main ( ) { string txt = "" ABCEABCDABCEABCD "" ; string pat = "" ABCD "" ; search ( pat , txt ) ; return 0 ; }","#include <iostream> #include <string> using namespace std; void search ( string pat , string txt ) { int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { for(int j=0; j < M; j++){ if(txt[i+j] != pat[j]){ break; } } cout << ""Pattern found at index "" + to_string( i )<< endl; i = i + M; } } int main() { string txt ="" ABCEABCDABCEABCD ""; string pat ="" ABCD ""; search ( pat,txt ); return 0; } ",4.7801032066345215,0.7345942508624562,0.655416812139734,0.5545199628838378,0.9333333333333333,0.6681639740186864
747,Python,C++,"def printSorted ( arr , start , end ) : NEW_LINE INDENT if start > end : NEW_LINE INDENT return NEW_LINE DEDENT printSorted ( arr , start * 2 + 1 , end ) NEW_LINE print ( arr [ start ] , end = "" ▁ "" ) NEW_LINE printSorted ( arr , start * 2 + 2 , end ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 2 , 5 , 1 , 3 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printSorted ( arr , 0 , arr_size - 1 ) NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; void printSorted ( int arr [ ] , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; cout << arr [ start ] << "" ▁ "" ; printSorted ( arr , start * 2 + 2 , end ) ; } int main ( ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; int arr_size = sizeof ( arr ) / sizeof ( int ) ; printSorted ( arr , 0 , arr_size - 1 ) ; getchar ( ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; void printSorted(const vector<int>& arr, int start, int end) { if (start > end) return; cout << "" ""; // equivalent to NEW_LINE in Python code printSorted(arr, start*2+1, end); cout << arr[start] << "" \u2581 ""; // ""\u2581"" is a unicode character for box drawing (▁) printSorted(arr, start*2+2, end); } int main() { vector<int> arr = {4, 2, 5, 1, 3}; int arr_size = arr.size(); printSorted(arr, 0, arr_size - 1); cout << endl; // equivalent to NEW_LINE in Python code return <｜begin▁of▁sentence｜>0xdead",5.709705114364624,0.6583850931677019,0.587921911407496,0.5052417070015922,0.8,0.5936691949011146
13565,Python,C++,"MAX = 11 ; NEW_LINE def isMultipleof5 ( n ) : NEW_LINE INDENT s = str ( n ) ; NEW_LINE l = len ( s ) ; NEW_LINE if ( s [ l - 1 ] == '5' or s [ l - 1 ] == '0' ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT return False ; NEW_LINE DEDENT n = 19 ; NEW_LINE if ( isMultipleof5 ( n ) == True ) : NEW_LINE INDENT print ( n , "" is ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( n , "" is ▁ not ▁ a ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; # define MAX  11 NEW_LINE bool isMultipleof5 ( int n ) { char str [ MAX ] ; int len = strlen ( str ) ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } int main ( ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) cout << n << "" ▁ is ▁ multiple ▁ of ▁ 5"" << endl ; else cout << n << "" ▁ is ▁ not ▁ multiple ▁ of ▁ 5"" << endl ; return 0 ; }","#include <iostream> #include <string> using namespace std; bool isMultipleof5(int n){ string s = to_string(n); int l = s.length(); if (s[l-1] == '5' || s[l-1] == '0'){ return true; } return false; } int main(){ int n = 19; if(isMultipleof5(n)){ cout << n << "" is a multiple of 5"" << endl; } else { cout << n << "" is not a multiple of 5"" << endl; } } ",4.139122009277344,0.725418248770187,0.6130274995563515,0.474537201060871,0.9090909090909091,0.6049033134698825
1701,Python,C++,"def findPeakUtil ( arr , low , high , n ) : NEW_LINE INDENT mid = low + ( high - low ) / 2 NEW_LINE mid = int ( mid ) NEW_LINE if ( ( mid == 0 or arr [ mid - 1 ] <= arr [ mid ] ) and ( mid == n - 1 or arr [ mid + 1 ] <= arr [ mid ] ) ) : NEW_LINE INDENT return mid NEW_LINE DEDENT elif ( mid > 0 and arr [ mid - 1 ] > arr [ mid ] ) : NEW_LINE INDENT return findPeakUtil ( arr , low , ( mid - 1 ) , n ) NEW_LINE DEDENT else : NEW_LINE INDENT return findPeakUtil ( arr , ( mid + 1 ) , high , n ) NEW_LINE DEDENT DEDENT def findPeak ( arr , n ) : NEW_LINE INDENT return findPeakUtil ( arr , 0 , n - 1 , n ) NEW_LINE DEDENT arr = [ 1 , 3 , 20 , 4 , 1 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is "" , findPeak ( arr , n ) ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } int main ( ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" << findPeak ( arr , n ) ; return 0 ; }","#include <iostream> #include <vector> using namespace std; int findPeakUtil(vector<int>& arr, int low, int high, int n){ int mid = low + (high - low)/2; if ((mid == 0 || arr[mid-1] <= arr[mid]) && ( mid == n-1 || arr[mid+1] <= arr[mid])){ return mid; } else if(mid > 0 && arr[mid-1] > arr[mid]){ return findPeakUtil(arr, low, mid - 1, n); }else { return findPeakUtil(arr, mid + 1, high, n); } } int findPeak(vector<int>& arr, int n){ return findPeakUtil(arr, 0, n-1, n); } int main() { vector<int> arr = {1, 3, 20, 4, 1, 0}; int n = arr.size(); cout << ""Index of a peak point is "" << findPeak(arr, n)<<endl; return 0; } ",9.1575767993927,0.808552749173243,0.7299960061617013,0.6136283142782675,1.0,0.7295398199947871
2147,Python,C++,"x = 10 NEW_LINE y = 5 NEW_LINE x = x * y NEW_LINE y = x // y ; NEW_LINE x = x // y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = "" , x , "" ▁ y ▁ = "" , y ) ; NEW_LINE","#include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int x = 10 , y = 5 ; x = x * y ; y = x / y ; x = x / y ; cout << "" After ▁ Swapping : ▁ x ▁ = "" << x << "" , ▁ y = "" << y ; }","#include <iostream> using namespace std; int main() { int x = 10; int y = 5; x = x * y; y = x / y; x = x / y; cout << "" After Swapping : x = "" << x << "" y = "" << y ; } ",4.475323915481567,0.8849026930347484,0.833147463137845,0.7515232965052068,1.0,0.8260663075536447
3997,Python,C++,"def printNSE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] > arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNSE ( arr ) NEW_LINE","#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = -1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } cout << arr [ i ] << "" ▁ - - ▁ "" << next << endl ; } } int main ( ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printNSE ( arr , n ) ; return 0 ; }","#include<iostream> #include<vector> using namespace std; void printNSE(const vector<int>& arr){ for (size_t i = 0; i < arr.size(); ++i){ int next = -1; for (size_t j = i + 1; j < arr.size(); ++j){ if (arr[i] > arr[j]) { next = arr[j]; break; } } cout << to_string(arr[i]) + "" -- "" + to_string(next)<< endl; } } int main() { vector<int> arr = {11, 13, 21, 3}; printNSE(arr); return <｜begin▁of▁sentence｜>0",4.452355146408081,0.70779958996403,0.6194626616430664,0.502361354657891,0.923076923076923,0.6285760251836006
2144,Python,C++,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( n and ( not ( n & ( n - 1 ) ) ) ) NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if not isPowerOfTwo ( n ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT n = n >> 1 NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 0 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 12 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 128 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT DEDENT","#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPowerOfTwo ( unsigned n ) { return n && ( ! ( n & ( n - 1 ) ) ) ; } int findPosition ( unsigned n ) { if ( ! isPowerOfTwo ( n ) ) return -1 ; unsigned count = 0 ; while ( n ) { n = n >> 1 ; ++ count ; } return count ; } int main ( void ) { int n = 0 ; int pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 12 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; n = 128 ; pos = findPosition ( n ) ; ( pos == -1 ) ? cout << "" n ▁ = ▁ "" << n << "" , ▁ Invalid ▁ number STRNEWLINE "" : cout << "" n ▁ = ▁ "" << n << "" , ▁ Position ▁ "" << pos << endl ; return 0 ; }","#include<iostream> using namespace std; bool isPowerOfTwo (int n ) { return n && (!(n & (n - 1))); } int findPosition (int n) { if (!isPowerOfTwo(n)) { return -1; } int count = 0; while (n) { n = n >> 1; count += 1; } return count; } int main () { int n = 0, pos; pos = findPosition(n); if (pos == -1) { cout << ""n = "" << n << "" Invalid number"" << endl; } else { cout << ""n = "" << n << "" Position "" << pos << endl; } n = 12; pos = findPosition(n); if (pos == -1) { cout << ""n = "" << n << "" Invalid number"" << endl; } else { cout << ""n = "" << n << "" Position "" << pos << endl; } n = 128; pos = findPosition(n); if (pos == -1) { cout << ""n = "" << n << "" Invalid number"" << endl; } else { cout << ""n = "" << n << "" Position "" << pos << endl; } } ",8.901543140411377,0.8276665488788574,0.7342634797164905,0.6026952292638732,0.7272727272727272,0.6400684786665294
9367,Python,C++,"def mirror_point ( a , b , c , d , x1 , y1 , z1 ) : NEW_LINE INDENT k = ( - a * x1 - b * y1 - c * z1 - d ) / float ( ( a * a + b * b + c * c ) ) NEW_LINE x2 = a * k + x1 NEW_LINE y2 = b * k + y1 NEW_LINE z2 = c * k + z1 NEW_LINE x3 = 2 * x2 - x1 NEW_LINE y3 = 2 * y2 - y1 NEW_LINE z3 = 2 * z2 - z1 NEW_LINE print "" x3 ▁ = "" , x3 , NEW_LINE print "" y3 ▁ = "" , y3 , NEW_LINE print "" z3 ▁ = "" , z3 , NEW_LINE DEDENT a = 1 NEW_LINE b = - 2 NEW_LINE c = 0 NEW_LINE d = 0 NEW_LINE x1 = - 1 NEW_LINE y1 = 3 NEW_LINE z1 = 4 NEW_LINE mirror_point ( a , b , c , d , x1 , y1 , z1 ) NEW_LINE","#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE #include <iostream> NEW_LINE #include <iomanip> NEW_LINE using namespace std ; void mirror_point ( float a , float b , float c , float d , float x1 , float y1 , float z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; std :: cout << std :: fixed ; std :: cout << std :: setprecision ( 1 ) ; cout << "" ▁ x3 ▁ = ▁ "" << x3 ; cout << "" ▁ y3 ▁ = ▁ "" << y3 ; cout << "" ▁ z3 ▁ = ▁ "" << z3 ; } int main ( ) { float a = 1 ; float b = -2 ; float c = 0 ; float d = 0 ; float x1 = -1 ; float y1 = 3 ; float z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; return 0 ; }","#include <iostream> #include <cmath> using namespace std; void mirror_point(double a, double b, double c, double d, double x1, double y1, double z1){ double k = (-a * x1 - b * y1 - c * z1 - d) / (pow(a, 2) + pow(b, 2) + pow(c, 2)); double x2 = a * k + x1; double y2 = b * k + y1; double z2 = c * k + z1; double x3 = 2 * x2 - x1; double y3 = 2 * y2 - y1; double z3 = 2 * z2 - z1; cout << ""x3 = "" << x3 << ""\n""; cout << ""y3 = "" << y3 << ""\n""; cout << ""z3 = "" << z3 << ""\n""; } int main(){ double a=1, b=-2, c=0, d=0, x1=-1, y1=3, z1=4; mirror_point(a,b,c,d,x1,y1,z1); return 0; } ",8.92209792137146,0.6283563974566598,0.5427826322237056,0.4198520364586185,0.75,0.5188964255210329
