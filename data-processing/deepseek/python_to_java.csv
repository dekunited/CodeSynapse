example_id,start_language,target_language,source_code,reference_code,translated_code,inference_time,bleu_1,bleu_2,bleu_4,keyword_match,codebleu
2048,Python,Java,"def calcAngle ( h , m ) : NEW_LINE INDENT if ( h < 0 or m < 0 or h > 12 or m > 60 ) : NEW_LINE INDENT print ( ' Wrong ▁ input ' ) NEW_LINE DEDENT if ( h == 12 ) : NEW_LINE INDENT h = 0 NEW_LINE DEDENT if ( m == 60 ) : NEW_LINE INDENT m = 0 NEW_LINE h += 1 ; NEW_LINE if ( h > 12 ) : NEW_LINE INDENT h = h - 12 ; NEW_LINE DEDENT DEDENT hour_angle = 0.5 * ( h * 60 + m ) NEW_LINE minute_angle = 6 * m NEW_LINE angle = abs ( hour_angle - minute_angle ) NEW_LINE angle = min ( 360 - angle , angle ) NEW_LINE return angle NEW_LINE DEDENT h = 9 NEW_LINE m = 60 NEW_LINE print ( ' Angle ▁ ' , calcAngle ( h , m ) ) NEW_LINE","import java . io . * ; class GFG { static int calcAngle ( double h , double m ) { if ( h < 0 m < 0 h > 12 m > 60 ) System . out . println ( "" Wrong ▁ input "" ) ; if ( h == 12 ) h = 0 ; if ( m == 60 ) { m = 0 ; h += 1 ; if ( h > 12 ) h = h - 12 ; } int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ; int minute_angle = ( int ) ( 6 * m ) ; int angle = Math . abs ( hour_angle - minute_angle ) ; angle = Math . min ( 360 - angle , angle ) ; return angle ; } public static void main ( String [ ] args ) { System . out . println ( calcAngle ( 9 , 60 ) + "" ▁ degree "" ) ; System . out . println ( calcAngle ( 3 , 30 ) + "" ▁ degree "" ) ; } }","public class Main { public static void main(String[] args) { int h = 9; int m = 60; System.out.println(""Angle is "" + calcAngle(h, m)); } private static double calcAngle(int h, int m) { if (h < 0 || m < 0 || h > 12 || m > 60) { System.out.println(""Wrong input""); } else { if (h == 12) { h = 0; } if (m == 60) { m = 0; h += 1; } if(h > 12){ h = h - 12; } double hourAngle = 0.5 * (h * 60 + m); double minuteAngle = 6 * m; double angle = Math.abs(hourAngle - minuteAngle); return Math.min(360-angle, angle); } return 0; } } ",6.369713306427002,0.6668233837733448,0.5440202278955476,0.3854539038136837,0.888888888888889,0.5364843993362453
13186,Python,Java,"def moduloMultiplication ( a , b , mod ) : NEW_LINE INDENT a = a % mod ; NEW_LINE while ( b ) : NEW_LINE INDENT if ( b & 1 ) : NEW_LINE INDENT res = ( res + a ) % mod ; NEW_LINE DEDENT a = ( 2 * a ) % mod ; NEW_LINE DEDENT return res ; NEW_LINE DEDENT a = 10123465234878998 ; NEW_LINE b = 65746311545646431 ; NEW_LINE m = 10005412336548794 ; NEW_LINE print ( moduloMultiplication ( a , b , m ) ) ; NEW_LINE","class GFG { static long moduloMultiplication ( long a , long b , long mod ) { long res = 0 ; a %= mod ; while ( b > 0 ) { if ( ( b & 1 ) > 0 ) { res = ( res + a ) % mod ; } a = ( 2 * a ) % mod ; } return res ; } public static void main ( String [ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L ; System . out . print ( moduloMultiplication ( a , b , m ) ) ; } }","public class Main { static long moduloMultiplication(long a, long b, long m) { long res = 0; // Initialize result while (b > 0){ if ((b & 1) != 0) { res = (res + a) % m; } a = (2 * a) % m; b >>= 1; } return res; } public static void main(String[] args){ long a = 10123465234878998L, b = 65746311545646431L, m = 10005412336548794L; System.out.println(moduloMultiplication(a, b, m)); } } ",6.38094687461853,0.8608695652173913,0.8105426608355201,0.7220441136362898,1.0,0.8054308795454028
2200,Python,Java,"def findMaximum ( arr , low , high ) : NEW_LINE INDENT if low == high : NEW_LINE INDENT return arr [ low ] NEW_LINE DEDENT if high == low + 1 and arr [ low ] >= arr [ high ] : NEW_LINE INDENT return arr [ low ] ; NEW_LINE DEDENT if high == low + 1 and arr [ low ] < arr [ high ] : NEW_LINE INDENT return arr [ high ] NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return findMaximum ( arr , low , mid - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findMaximum ( arr , mid + 1 , high ) NEW_LINE DEDENT DEDENT arr = [ 1 , 3 , 50 , 10 , 9 , 7 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ maximum ▁ element ▁ is ▁ % d "" % findMaximum ( arr , 0 , n - 1 ) ) NEW_LINE","class Main { static int findMaximum ( int arr [ ] , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else return findMaximum ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 50 , 10 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( "" The ▁ maximum ▁ element ▁ is ▁ "" + findMaximum ( arr , 0 , n - 1 ) ) ; } }","public class Main { public static void main(String[] args) { int arr[] = new int[]{1, 3, 50, 10, 9, 7, 6}; int n = arr.length; System.out.println(""The maximum element is "" + findMaximum(arr, 0, n-1)); } static int findMaximum(int[] arr, int low, int high) { if (low == high) { return arr[low]; } else if ((high == low + 1) && (arr[low] >= arr[high])) { return arr[low]; } else if ((high == low + 1) && (arr[low] < arr[high])) { return arr[high]; } int mid = (low + high)/2; if ((arr[mid] > arr[mid+1]) && (arr[mid] > arr[mid-1])){ return arr[mid]; } else if ((arr[mid] > arr[mid + 1]) && (arr[mid] < arr[mid - 1])) { return findMaximum(arr, low, mid - 1); } else { return findMaximum(arr, mid+1 , high); } } } ",6.636371850967407,0.8533834586466166,0.7863208430097163,0.6690008163137601,0.9473684210526316,0.7525110977354215
9260,Python,Java,PI = 3.14159265 NEW_LINE def length_rope ( r ) : NEW_LINE INDENT return ( ( 2 * PI * r ) + 6 * r ) NEW_LINE DEDENT r = 7 NEW_LINE print ( length_rope ( r ) ) NEW_LINE,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } },final double PI = 3.14159265; final String NEW_LINE = System.lineSeparator(); double lengthRope(double r) { return (2 * PI * r) + (6 * r); } public static void main(String[] args) { double r = 7; System.out.println(lengthRope(r)); } ,2.395758867263794,0.7114358389756229,0.6585910222347905,0.5822508055208635,0.8333333333333334,0.6575755638646044
13513,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def phi ( n ) : NEW_LINE INDENT result = 1 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if ( gcd ( i , n ) == 1 ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT for n in range ( 1 , 11 ) : NEW_LINE INDENT print ( "" phi ( "" , n , "" ) ▁ = ▁ "" , phi ( n ) , sep = "" "" ) NEW_LINE DEDENT","import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int phi ( int n ) { int result = 1 ; for ( int i = 2 ; i < n ; i ++ ) if ( gcd ( i , n ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n ; for ( n = 1 ; n <= 10 ; n ++ ) System . out . println ( "" phi ( "" + n + "" ) ▁ = ▁ "" + phi ( n ) ) ; } }","public class Main { // Recursive function to find the greatest common divisor of two numbers public static int gcd(int a, int b) { if (a == 0) { return b; } else { return gcd(b % a, a); } } // Function to find the Euler's totient for a given number 'n' public static int phi(int n) { int result = 1; for (int i = 2; i < n; i++) { if (gcd(i, n) == 1) { result += 1; } } return result; } public static void main(String[] args) { for (int n = 1; n <= 10; n++) { System.out.println(""phi ("" + n + "") = "" + phi(n)); } } } ",8.222128868103027,0.7228915662650602,0.6717585755237548,0.5991909239991817,0.9473684210526316,0.7036441731152167
2000,Python,Java,"def pow ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT answer = a NEW_LINE increment = a NEW_LINE for i in range ( 1 , b ) : NEW_LINE INDENT for j in range ( 1 , a ) : NEW_LINE INDENT answer += increment NEW_LINE DEDENT increment = answer NEW_LINE DEDENT return answer NEW_LINE DEDENT print ( pow ( 5 , 3 ) ) NEW_LINE","import java . io . * ; class GFG { static int pow ( int a , int b ) { if ( b == 0 ) return 1 ; int answer = a ; int increment = a ; int i , j ; for ( i = 1 ; i < b ; i ++ ) { for ( j = 1 ; j < a ; j ++ ) { answer += increment ; } increment = answer ; } return answer ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Main { public static void main(String[] args) { System.out.println(pow(5, 3)); } private static int pow(int a , int b ){ if (b == 0){ return 1; } int answer = a; int increment = a; for(int i = 1 ; i < b ; i++){ for(int j = 1 ; j < a ; j++){ answer += increment; } increment = answer; } return answer; } } ",4.638788223266602,0.8105677272790013,0.7648815041589615,0.6678730920433726,0.9473684210526316,0.7517216907461504
1682,Python,Java,"def equilibrium ( arr ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT leftsum = 0 NEW_LINE rightsum = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT leftsum += arr [ j ] NEW_LINE DEDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT rightsum += arr [ j ] NEW_LINE DEDENT if leftsum == rightsum : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( equilibrium ( arr ) ) NEW_LINE","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int i , j ; int leftsum , rightsum ; for ( i = 0 ; i < n ; ++ i ) { leftsum = 0 ; rightsum = 0 ; for ( j = 0 ; j < i ; j ++ ) leftsum += arr [ j ] ; for ( j = i + 1 ; j < n ; j ++ ) rightsum += arr [ j ] ; if ( leftsum == rightsum ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( equi . equilibrium ( arr , arr_size ) ) ; } }","public class Main { public static void main(String[] args) { int[] arr = {-7, 1, 5, 2, -4, 3, 0}; System.out.println(equilibrium(arr)); } public static int equilibrium(int[] arr) { int leftsum = 0; int rightsum = 0; int n = arr.length; for (int i=0; i<n; ++i){ leftsum = 0; rightsum = 0; for(int j=0; j<i; ++j) leftsum += arr[j]; for(int j=i+1; j<n; ++j) rightsum += arr[j]; if (leftsum == rightsum) return i; } return -1; } } ",4.736198902130127,0.7176748465877022,0.637705807907867,0.48981540758684927,0.9473684210526316,0.6270813116265839
13511,Python,Java,"def modInverse ( a , m ) : NEW_LINE INDENT m0 = m NEW_LINE y = 0 NEW_LINE x = 1 NEW_LINE if ( m == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT while ( a > 1 ) : NEW_LINE INDENT q = a // m NEW_LINE t = m NEW_LINE m = a % m NEW_LINE a = t NEW_LINE t = y NEW_LINE y = x - q * y NEW_LINE x = t NEW_LINE DEDENT if ( x < 0 ) : NEW_LINE INDENT x = x + m0 NEW_LINE DEDENT return x NEW_LINE DEDENT a = 3 NEW_LINE m = 11 NEW_LINE print ( "" Modular ▁ multiplicative ▁ inverse ▁ is "" , modInverse ( a , m ) ) NEW_LINE","class GFG { static int modInverse ( int a , int m ) { int m0 = m ; int y = 0 , x = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = y ; y = x - q * y ; x = t ; } if ( x < 0 ) x += m0 ; return x ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( "" Modular ▁ multiplicative ▁ "" + "" inverse ▁ is ▁ "" + modInverse ( a , m ) ) ; } }","public class Main { public static void main(String[] args) { int a = 3; int m = 11; System.out.println(""Modular multiplicative inverse is "" + modInverse(a, m)); } public static int modInverse(int a, int m) { if (m == 1) return 0; while (a > 1) { int q = a / m; int t = m; m = a % m; a = t; t = y; y = x - q * y; x = t; } if (x < 0) x += m; return x; } } ",4.531944036483765,0.8117822078702877,0.7628584126216662,0.6888588480566513,1.0,0.7822011936396559
1994,Python,Java,"def isLucky ( n ) : NEW_LINE INDENT next_position = n NEW_LINE if isLucky . counter > n : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % isLucky . counter == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT next_position = next_position - next_position / isLucky . counter NEW_LINE isLucky . counter = isLucky . counter + 1 NEW_LINE return isLucky ( next_position ) NEW_LINE DEDENT isLucky . counter = 2 NEW_LINE x = 5 NEW_LINE if isLucky ( x ) : NEW_LINE INDENT print x , "" is ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT else : NEW_LINE INDENT print x , "" is ▁ not ▁ a ▁ Lucky ▁ number "" NEW_LINE DEDENT","import java . io . * ; class GFG { public static int counter = 2 ; static boolean isLucky ( int n ) { int next_position = n ; if ( counter > n ) return true ; if ( n % counter == 0 ) return false ; next_position -= next_position / counter ; counter ++ ; return isLucky ( next_position ) ; } public static void main ( String [ ] args ) { int x = 5 ; if ( isLucky ( x ) ) System . out . println ( x + "" ▁ is ▁ a ▁ lucky ▁ no . "" ) ; else System . out . println ( x + "" ▁ is ▁ not ▁ a ▁ lucky ▁ no . "" ) ; } }","public class Main { static int counter = 2; public static void main(String[] args) { int x = 5; if (isLucky(x)) { System.out.println(x + "" is a Lucky number""); } else { System.out<｜begin▁of▁sentence｜>ln(x + "" is not a Lucky number""); } } public static int isLucky(int n) { if (counter > n) { return 1; } if (n % counter == 0) { return 0; } int next_position = n - n / counter; counter++; return isLucky(next_position); } } ",6.299714088439941,0.6709662112662598,0.5792663961941439,0.4601329728039527,0.8571428571428571,0.579235938105624
1824,Python,Java,"def printMaxActivities ( s , f ) : NEW_LINE INDENT n = len ( f ) NEW_LINE print "" The ▁ following ▁ activities ▁ are ▁ selected "" NEW_LINE i = 0 NEW_LINE print i , NEW_LINE for j in xrange ( n ) : NEW_LINE INDENT if s [ j ] >= f [ i ] : NEW_LINE INDENT print j , NEW_LINE i = j NEW_LINE DEDENT DEDENT DEDENT s = [ 1 , 3 , 0 , 5 , 8 , 5 ] NEW_LINE f = [ 2 , 4 , 6 , 7 , 9 , 9 ] NEW_LINE printMaxActivities ( s , f ) NEW_LINE","import java . util . * ; import java . lang . * ; import java . io . * ; class ActivitySelection { public static void printMaxActivities ( int s [ ] , int f [ ] , int n ) { int i , j ; System . out . print ( "" Following ▁ activities ▁ are ▁ selected ▁ : ▁ n "" ) ; i = 0 ; System . out . print ( i + "" ▁ "" ) ; for ( j = 1 ; j < n ; j ++ ) { if ( s [ j ] >= f [ i ] ) { System . out . print ( j + "" ▁ "" ) ; i = j ; } } } public static void main ( String [ ] args ) { int s [ ] = { 1 , 3 , 0 , 5 , 8 , 5 } ; int f [ ] = { 2 , 4 , 6 , 7 , 9 , 9 } ; int n = s . length ; printMaxActivities ( s , f , n ) ; } }","public class Main { public static void main(String[] args){ int[] s = {1,3,0,5,8,5}; int[] f = {2,4,6,7,9,9}; printMaxActivities(s, f); } public static void printMaxActivities(int[] s, int[] f) { System.out.println(""The following activities are selected""); int i = 0; for (int j = 0; j < f.length; j++){ if (s[j] >= f[i]) { System.out.println(j); i = j; } } } } ",6.85101318359375,0.42120848466269944,0.3561665524404013,0.249200311085652,1.0,0.4744402177599564
13031,Python,Java,"def check ( n ) : NEW_LINE INDENT return 1162261467 % n == 0 NEW_LINE DEDENT n = 9 NEW_LINE if ( check ( n ) ) : NEW_LINE INDENT print ( "" Yes "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" No "" ) NEW_LINE DEDENT","public class Power_3 { static boolean check ( int n ) { if ( n <= 0 ) return false ; return 1162261467 % n == 0 ; } public static void main ( String args [ ] ) { int n = 9 ; if ( check ( n ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","public class Main { public static void main(String[] args){ int n = 9; if (check(n)){ System.out.println(""Yes""); } else { System.out.println(""No""); } } private static boolean check(int n) { return 1162261467 % n == 0; } } ",4.117681980133057,0.6927721756813693,0.6100991616954746,0.47545585835015103,0.9090909090909091,0.6055463735723784
2001,Python,Java,"def multiply ( x , y ) : NEW_LINE INDENT if ( y ) : NEW_LINE INDENT return ( x + multiply ( x , y - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT def pow ( a , b ) : NEW_LINE INDENT if ( b ) : NEW_LINE INDENT return multiply ( a , pow ( a , b - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT DEDENT print ( pow ( 5 , 3 ) ) ; NEW_LINE","import java . io . * ; class GFG { static int multiply ( int x , int y ) { if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; else return 0 ; } static int pow ( int a , int b ) { if ( b > 0 ) return multiply ( a , pow ( a , b - 1 ) ) ; else return 1 ; } public static void main ( String [ ] args ) { System . out . println ( pow ( 5 , 3 ) ) ; } }","public class Main { public static void main(String[] args) { System.out.println(pow(5, 3)); } private static int multiply (int x , int y ){ if (y != 0){ return x + multiply(x, y-1); } else { return 0; } } private static int pow (int a , int b ){ if (b != 0){ return multiply(a, pow(a, b-1)); } else { return 1; } } } ",5.315224885940552,0.7903599340859019,0.7123158254577269,0.591346087557265,0.9473684210526316,0.698152787605875
1705,Python,Java,"def printRepeating ( arr , size ) : NEW_LINE INDENT xor = arr [ 0 ] NEW_LINE n = size - 2 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT xor ^= arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT xor ^= i NEW_LINE DEDENT set_bit_no = xor & ~ ( xor - 1 ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( arr [ i ] & set_bit_no ) : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i & set_bit_no ) : NEW_LINE INDENT x = x ^ i NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ i NEW_LINE DEDENT DEDENT print ( "" The ▁ two ▁ repeating "" , "" elements ▁ are "" , y , x ) NEW_LINE DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int set_bit_no ; int i ; int n = size - 2 ; int x = 0 , y = 0 ; for ( i = 1 ; i < size ; i ++ ) xor ^= arr [ i ] ; for ( i = 1 ; i <= n ; i ++ ) xor ^= i ; set_bit_no = ( xor & ~ ( xor - 1 ) ) ; for ( i = 0 ; i < size ; i ++ ) { int a = arr [ i ] & set_bit_no ; if ( a != 0 ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { int a = i & set_bit_no ; if ( a != 0 ) x = x ^ i ; else y = y ^ i ; } System . out . println ( "" The ▁ two ▁ reppeated ▁ elements ▁ are ▁ : "" ) ; System . out . println ( x + "" ▁ "" + y ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","public static void printRepeating(int[] arr, int size) { int xor = 0; for (int i=1; i<size; ++i) { xor ^= arr[i]; } for (int i=1; i<=size-2; ++i) { xor ^= i; } int set_bit_no = xor & ~(xor - 1); int x = 0, y = 0; for (int i=0; i<size; ++i) { if ((arr[i] & set_bit_no)!=0 ){ x = x ^ arr[i]; } else { y = y ^ arr[i]; } } for (int i=1; i<=size-2; ++i) { if ((i & set_bit_no)!=0 ){ x = x ^ i; } else { y = y ^ i; } } System.out.println(""The two repeating elements are "" + y + "", "" + x); } public static void main(String[] args) { int arr[] = {4,2,4,5,2,3,1}; printRepeating(arr, arr.length); } ",10.397753715515137,0.6203968712076315,0.5232828090628572,0.3801452406428071,0.888888888888889,0.5327683351166316
6659,Python,Java,"def printknapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for w in range ( W + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT res = K [ n ] [ W ] NEW_LINE print ( res ) NEW_LINE w = W NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if res <= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if res == K [ i - 1 ] [ w ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT print ( wt [ i - 1 ] ) NEW_LINE res = res - val [ i - 1 ] NEW_LINE w = w - wt [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE printknapSack ( W , wt , val , n ) NEW_LINE","class GFG { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static void printknapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; w = W ; for ( i = n ; i > 0 && res > 0 ; i -- ) { if ( res == K [ i - 1 ] [ w ] ) continue ; else { System . out . print ( wt [ i - 1 ] + "" ▁ "" ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } public static void main ( String arg [ ] ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; printknapSack ( W , wt , val , n ) ; } }","public static void printKnapSack(int W, int[] wt, int[] val, int n) { int[][] K = new int[n+1][W+1]; for (int i = 0; i <= n; ++i){ for (int w = 0; w <= W; ++w){ if (i == 0 || w == 0) { K[i][w] = 0; } else if (wt[i-1] <= w) { K[i][w] = Math.max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]); } else { K[i][w] = K[i-1][w]; } } } int res = K[n][W]; System.out.println(res); int w = W; for (int i = n; i > 0; i--) { if (res <= 0) break; if (res == K[i-1][w]) continue; System.out.println(wt[i-1]); res = res - val[i-1]; w = w - wt[i-1]; } } public static void main(String[] args) { int[] val = {60, 100, 120}; int[] wt = {10, 20, 30}; int W = 50; int n = val.length; printKnapSack(W, wt, val, n); } ",10.69583797454834,0.7387086775437574,0.6594134245700342,0.5217054676927,0.9,0.63519382738489
2095,Python,Java,"def fun ( n ) : NEW_LINE INDENT return n & ( n - 1 ) NEW_LINE DEDENT n = 7 NEW_LINE print ( "" The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit "" , fun ( n ) ) NEW_LINE","class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String arg [ ] ) { int n = 7 ; System . out . print ( "" The ▁ number ▁ after ▁ unsetting ▁ "" + "" the ▁ rightmost ▁ set ▁ bit ▁ "" + fun ( n ) ) ; } }","public class Main { public static void main(String[] args) { int n = 7; System.out.println(""The number after unsetting the rightmost set bit "" + fun(n)); } public static int fun(int n) { return n & (n - 1); } } ",3.567662000656128,0.7380984636832314,0.6426499888588969,0.5483136021197489,1.0,0.6838195214838242
1861,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Main { static int knapSack(int W, int wt[], int val[], int n) { if (n == 0 || W == 0) return 0; if (wt[n-1] > W) return knapSack(W, wt, val, n-1); else return Math.max(val[n-1] + knapSack(W - wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)); } public static void main (String[] args) { int val [] = new int[]{60, 100, 120}; int wt [] = new int[]{10, 20, 30}; int W = 50; int n = val.length; System.out.println(knapSack(W, wt, val, n)); } } ",8.458485841751099,0.7362019352814009,0.7020056656664178,0.6427720925782427,1.0,0.7499404648047698
1843,Python,Java,"R = 3 NEW_LINE C = 3 NEW_LINE import sys NEW_LINE def min ( x , y , z ) : NEW_LINE INDENT if ( x < y ) : NEW_LINE INDENT return x if ( x < z ) else z NEW_LINE DEDENT else : NEW_LINE INDENT return y if ( y < z ) else z NEW_LINE DEDENT DEDENT def minCost ( cost , m , n ) : NEW_LINE INDENT if ( n < 0 or m < 0 ) : NEW_LINE INDENT return sys . maxsize NEW_LINE DEDENT elif ( m == 0 and n == 0 ) : NEW_LINE INDENT return cost [ m ] [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) NEW_LINE DEDENT DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","public class GFG { static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . print ( minCost ( cost , 2 , 2 ) ) ; } }","import java.lang.Math; public class Main { public static void main(String[] args) { int R = 3; int C = 3; int cost[][] = {{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}; System.out.println(minCost(cost, 2, 2)); } static int min(int x, int y, int z) { if (x < y) { return x < z ? x : z; } else { return y < z ? y : z; } } static int minCost(int cost[][], int m, int n) { if (n < 0 || m < 0) { return Integer.MAX_VALUE; } else if (m == 0 && n == 0) { return cost[m][n]; } else { return cost[m][n] + min(minCost(cost, m-1, n-1), minCost(cost, m-1, n), minCost(cost, m, n-1)); } } } ",9.129555940628052,0.8577981651376146,0.7977661917598442,0.7049225549964986,1.0,0.793445788497549
1867,Python,Java,"def max ( x , y ) : NEW_LINE INDENT if ( x > y ) : NEW_LINE INDENT return x NEW_LINE DEDENT return y NEW_LINE DEDENT def lps ( seq , i , j ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] and i + 1 == j ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] ) : NEW_LINE INDENT return lps ( seq , i + 1 , j - 1 ) + 2 NEW_LINE DEDENT return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT seq = "" GEEKSFORGEEKS "" NEW_LINE n = len ( seq ) NEW_LINE print ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is "" , lps ( seq , 0 , n - 1 ) ) NEW_LINE DEDENT","class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int lps ( char seq [ ] , int i , int j ) { if ( i == j ) { return 1 ; } if ( seq [ i ] == seq [ j ] && i + 1 == j ) { return 2 ; } if ( seq [ i ] == seq [ j ] ) { return lps ( seq , i + 1 , j - 1 ) + 2 ; } return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { String seq = "" GEEKSFORGEEKS "" ; int n = seq . length ( ) ; System . out . printf ( "" The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d "" , lps ( seq . toCharArray ( ) , 0 , n - 1 ) ) ; } }","class Main { static int max(int x, int y){return (x > y)? x : y;} static int lps(String seq, int i, int j) { if (i == j) return 1; if (seq.charAt(i) == seq.charAt(j) && i + 1 == j) return 2; if (seq.charAt(i) == seq.charAt(j)) return lps(seq, i+1, j-1) + 2; return max(lps(seq, i, j-1), lps(seq, i+1, j)); } public static void main (String[] args) { String seq = ""GEEKSFORGEEKS""; int n = seq.length(); System.out.println(""The length of the LPS is "" + lps(seq, 0, n-1)); } } ",6.735291957855225,0.7080442859075701,0.613633859314519,0.49960903740950613,1.0,0.6497263261866543
1949,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE for i in range ( N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE while ( j < M ) : NEW_LINE INDENT if ( txt [ i + j ] != pat [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if ( j == M ) : NEW_LINE INDENT print ( "" Pattern ▁ found ▁ at ▁ index ▁ "" , i ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT txt = "" AABAACAADAABAAABAA "" NEW_LINE pat = "" AABA "" NEW_LINE search ( pat , txt ) NEW_LINE DEDENT","public class NaiveSearch { public static void search ( String txt , String pat ) { int M = pat . length ( ) ; int N = txt . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } } public static void main ( String [ ] args ) { String txt = "" AABAACAADAABAAABAA "" ; String pat = "" AABA "" ; search ( txt , pat ) ; } }","public class Main { public static void search(String pat, String txt) { int M = pat.length(); int N = txt.length(); for (int i = 0; i <= N - M; i++) { int j = 0; while (j < M) { if ((txt.charAt(i + j)) != pat.charAt(j)) break; j++; <｜begin▁of▁sentence｜> DEDENT j +=1; if (j == M) System.out.println(""Pattern found at index "" + i); } } } ",5.465559005737305,0.5845081275685484,0.5139405260486719,0.3795022128590231,0.9411764705882353,0.5480044901777867
13418,Python,Java,"import math NEW_LINE def findRoots ( a , b , c ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT print ( "" Invalid "" ) NEW_LINE return - 1 NEW_LINE DEDENT d = b * b - 4 * a * c NEW_LINE sqrt_val = math . sqrt ( abs ( d ) ) NEW_LINE if d > 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ different ▁ "" ) NEW_LINE print ( ( - b + sqrt_val ) / ( 2 * a ) ) NEW_LINE print ( ( - b - sqrt_val ) / ( 2 * a ) ) NEW_LINE DEDENT elif d == 0 : NEW_LINE INDENT print ( "" Roots ▁ are ▁ real ▁ and ▁ same "" ) NEW_LINE print ( - b / ( 2 * a ) ) NEW_LINE print ( "" Roots ▁ are ▁ complex "" ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ + ▁ i "" , sqrt_val ) NEW_LINE print ( - b / ( 2 * a ) , "" ▁ - ▁ i "" , sqrt_val ) NEW_LINE DEDENT DEDENT a = 1 NEW_LINE b = - 7 NEW_LINE c = 12 NEW_LINE findRoots ( a , b , c ) NEW_LINE","import java . io . * ; import static java . lang . Math . * ; class Quadratic { static void findRoots ( int a , int b , int c ) { if ( a == 0 ) { System . out . println ( "" Invalid "" ) ; return ; } int d = b * b - 4 * a * c ; double sqrt_val = sqrt ( abs ( d ) ) ; if ( d > 0 ) { System . out . println ( ""Roots are real and different NEW_LINE""); System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + ""NEW_LINE"" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ; } else if ( d == 0 ) { System . out . println ( ""Roots are real and same NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) ) ; } { System . out . println ( ""Roots are complex NEW_LINE""); System . out . println ( - ( double ) b / ( 2 * a ) + "" ▁ + ▁ i "" + sqrt_val + ""NEW_LINE"" + - ( double ) b / ( 2 * a ) + "" ▁ - ▁ i "" + sqrt_val ) ; } } public static void main ( String args [ ] ) { int a = 1 , b = - 7 , c = 12 ; findRoots ( a , b , c ) ; } }","import java.lang.Math; public class Main { public static void main(String[] args) { findRoots(1, -7, 12); } public static int findRoots(int a, int b, int c){ if (a == 0){ System.out.println(""Invalid""); return -1; } int d = b * b - 4 * a * c; double sqrt_val = Math.sqrt(Math.abs(d)); if (d > 0) { System.out.println(""Roots are real and different""); System.out.println((-b + sqrt_val) / (2 * a)); System.out.println((-b - sqrt_val) / (2 * a)); } else if(d == 0){ System.out.println(""Roots are real and same""); System.out.println(-b / (2*a)); System.out.println((- b + "" + i ""+ sqrt_val)); System.out.println((- b + "" - i ""+ sqrt_val)); } return 0; } } ",9.498340845108032,0.5112321121446893,0.4417798364391345,0.34640550274052667,1.0,0.5424838519183687
1687,Python,Java,"def ceilSearch ( arr , low , high , x ) : NEW_LINE INDENT if x <= arr [ low ] : NEW_LINE INDENT return low NEW_LINE DEDENT i = low NEW_LINE for i in range ( high ) : NEW_LINE INDENT if arr [ i ] == x : NEW_LINE INDENT return i NEW_LINE DEDENT if arr [ i ] < x and arr [ i + 1 ] >= x : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 1 , 2 , 8 , 10 , 10 , 12 , 19 ] NEW_LINE n = len ( arr ) NEW_LINE x = 3 NEW_LINE index = ceilSearch ( arr , 0 , n - 1 , x ) ; NEW_LINE if index == - 1 : NEW_LINE INDENT print ( "" Ceiling ▁ of ▁ % d ▁ doesn ' t ▁ exist ▁ in ▁ array ▁ "" % x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" ceiling ▁ of ▁ % d ▁ is ▁ % d "" % ( x , arr [ index ] ) ) NEW_LINE DEDENT","class Main { static int ceilSearch ( int arr [ ] , int low , int high , int x ) { int i ; if ( x <= arr [ low ] ) return low ; for ( i = low ; i < high ; i ++ ) { if ( arr [ i ] == x ) return i ; if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 8 , 10 , 10 , 12 , 19 } ; int n = arr . length ; int x = 3 ; int index = ceilSearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) System . out . println ( "" Ceiling ▁ of ▁ "" + x + "" ▁ doesn ' t ▁ exist ▁ in ▁ array "" ) ; else System . out . println ( "" ceiling ▁ of ▁ "" + x + "" ▁ is ▁ "" + arr [ index ] ) ; } }","public class Main { public static void main(String[] args) { int arr[] = {1, 2, 8, 10, 10, 12, 19}; int n = arr.length; int x = 3; int index = ceilSearch(arr, 0, n - 1, x); if (index == Integer.MIN_VALUE) { System.out.printf(""Ceiling of %d doesn't exist in array "", x); } else { System.out.printf(""ceiling of %d is %d"", x, arr[index]); } } public static int ceilSearch(int arr[], int low, int high, int x) { if (x <= arr[low]) return low; for (int i = low; i < high; i++) { if (arr[i] == x) return i; if (arr[i] < x && arr[i + 1] >= x) return i + 1; } return Integer.MIN_VALUE; // return -1 as per your python code to denote that ceiling doesn't exist. } } ",8.39286470413208,0.8052946988956634,0.7556316314304267,0.6867982855623848,1.0,0.7807587998936694
8588,Python,Java,"def isPalRec ( st , s , e ) : NEW_LINE INDENT if ( s == e ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( st [ s ] != st [ e ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( s < e + 1 ) : NEW_LINE INDENT return isPalRec ( st , s + 1 , e - 1 ) ; NEW_LINE DEDENT return True NEW_LINE DEDENT def isPalindrome ( st ) : NEW_LINE INDENT n = len ( st ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return isPalRec ( st , 0 , n - 1 ) ; NEW_LINE DEDENT st = "" geeg "" NEW_LINE if ( isPalindrome ( st ) ) : NEW_LINE INDENT print "" Yes "" NEW_LINE DEDENT else : NEW_LINE INDENT print "" No "" NEW_LINE DEDENT","import java . io . * ; class GFG { static boolean isPalRec ( String str , int s , int e ) { if ( s == e ) return true ; if ( ( str . charAt ( s ) ) != ( str . charAt ( e ) ) ) return false ; if ( s < e + 1 ) return isPalRec ( str , s + 1 , e - 1 ) ; return true ; } static boolean isPalindrome ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return true ; return isPalRec ( str , 0 , n - 1 ) ; } public static void main ( String args [ ] ) { String str = "" geeg "" ; if ( isPalindrome ( str ) ) System . out . println ( "" Yes "" ) ; else System . out . println ( "" No "" ) ; } }","public class Main { public static boolean isPalRec(String st, int s, int e) { if (s == e) return true; if (st.charAt(s) != st.charAt(e)) return false; if (s < e + 1) return isPalRec(st, s+1, e-1); return true; <｜begin▁of▁sentence｜>: public static boolean isPalindrome(String st) { int n = st.length(); if (n == 0) return true; return isPalRec(st, 0, n-1); } public static void main(String[] args) { String st = ""geeg""; if (isPalindrome(st)) System.out.println(""Yes""); else System.out.println(""No""); } } ",8.107254981994629,0.7001367756384713,0.6296486146316003,0.4993710405360344,1.0,0.6495597283752241
7323,Python,Java,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","int d = 256; String txt = ""GEEKS FOR GEEKS""; String pat = ""GEEK""; int q = 101; void search( String pat, String txt, int q ){ int M = pat.length(); int N = txt.length(); int i=0, j=0, h=1; for (i = 0; i < M - 1; ++i) { h = (h * d) % q; } for (i = 0; i < M; ++i) { p = (d * p + pat.charAt(i)) % q; t = (d * t + txt.charAt(i)) % q; } for (i = 0; i <= N - M; ++i) { if (p == t){ for (j = 0; j < M; ++j) { if (txt.charAt(i + j) != pat.charAt(j)) { break; } } if (j == M) System.out.println(""Pattern found at index ""+ i); } if (i < N - M){ t = (d * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q; if (t < 0) t = t + q; } } } ",10.382519006729126,0.7316748261440827,0.6801618292916506,0.5888007974011983,0.7142857142857143,0.626446272466553
1944,Python,Java,"def count ( n ) : NEW_LINE INDENT table = [ 0 for i in range ( n + 1 ) ] NEW_LINE table [ 0 ] = 1 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 3 ] NEW_LINE DEDENT for i in range ( 5 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 5 ] NEW_LINE DEDENT for i in range ( 10 , n + 1 ) : NEW_LINE INDENT table [ i ] += table [ i - 10 ] NEW_LINE DEDENT return table [ n ] NEW_LINE DEDENT n = 20 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE n = 13 NEW_LINE print ( ' Count ▁ for ' , n , ' is ' , count ( n ) ) NEW_LINE","import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; n = 13 ; System . out . println ( "" Count ▁ for ▁ "" + n + "" ▁ is ▁ "" + count ( n ) ) ; } }","public class Main { public static void main(String[] args) { int n = 20; System.out.println(""Count u₁ for "" + n + "" is "" + count(n)); n = 13; System.out.println(""Count u₁ for "" + n + "" is "" + count(n)); } public static int count (int n) { int[] table = new int[n+1]; table[0] = 1; for (int i = 3 ; i <= n ; i++ ) { table[i] += table[i-3]; } for (int i = 5 ; i <= n ; i++ ) { table[i] += table[i-5]; } for (int i = 10 ; i <= n ; i++ ) { table[i] += table[i-10]; } return table[n]; } } ",7.212599992752075,0.7275055040419444,0.6472524717520864,0.5266022715689951,1.0,0.6686215900982966
13895,Python,Java,import math NEW_LINE def countBits ( number ) : NEW_LINE INDENT return int ( ( math . log ( number ) / math . log ( 2 ) ) + 1 ) ; NEW_LINE DEDENT num = 65 ; NEW_LINE print ( countBits ( num ) ) ; NEW_LINE,import java . io . * ; class GFG { static int countBits ( int number ) { return ( int ) ( Math . log ( number ) / Math . log ( 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int num = 65 ; System . out . println ( countBits ( num ) ) ; } },import java.lang.Math; class Main { static int countBits(int number) { return (int)(Math.log(number) / Math.log(2)) + 1; } public static void main(String[] args) { int num = 65; System.out.println(countBits(num)); } } ,3.3543081283569336,0.7468109328322258,0.6951919140528406,0.6001581824463996,1.0,0.7201107277124796
1010,Python,Java,"def calculateSpan ( price , n , S ) : NEW_LINE INDENT S [ 0 ] = 1 NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE INDENT S [ i ] = 1 NEW_LINE j = i - 1 NEW_LINE while ( j >= 0 ) and ( price [ i ] >= price [ j ] ) : NEW_LINE INDENT S [ i ] += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT price = [ 10 , 4 , 5 , 90 , 120 , 80 ] NEW_LINE n = len ( price ) NEW_LINE S = [ None ] * n NEW_LINE calculateSpan ( price , n , S ) NEW_LINE printArray ( S , n ) NEW_LINE","import java . util . Arrays ; class GFG { static void calculateSpan ( int price [ ] , int n , int S [ ] ) { S [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { S [ i ] = 1 ; for ( int j = i - 1 ; ( j >= 0 ) && ( price [ i ] >= price [ j ] ) ; j -- ) S [ i ] ++ ; } } static void printArray ( int arr [ ] ) { System . out . print ( Arrays . toString ( arr ) ) ; } public static void main ( String [ ] args ) { int price [ ] = { 10 , 4 , 5 , 90 , 120 , 80 } ; int n = price . length ; int S [ ] = new int [ n ] ; calculateSpan ( price , n , S ) ; printArray ( S ) ; } }","public class Main { public static void main(String[] args) { int[] price = {10, 4, 5, 90, 120, 80}; int n = price.length; int[] S = new int[n]; calculateSpan(price, n, S); printArray(S, n); } public static void calculateSpan(int[] price, int n, int[] S) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; int j = i - 1; while ((j >= 0) && (price[i] >= price[j])) { S[i] += 1; j--; <｜begin▁of▁sentence｜>",4.4222800731658936,0.7638333862648519,0.7028671861550547,0.6051634414216587,0.9411764705882353,0.7059673501716317
12814,Python,Java,"def sum ( x , n ) : NEW_LINE INDENT total = 1.0 NEW_LINE multi = x NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + multi / i NEW_LINE multi = multi * x NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE print ( round ( sum ( x , n ) , 2 ) ) NEW_LINE","class GFG { static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public class Main { public static void main(String[] args) { int x = 2; int n = 5; System.out.println(roundedSum(x,n)); } private static double roundedSum(int x, int n) { double total = 1.0; int multi = x; for (int i=1; i<=n ; i++) { total += (double)multi / i; multi *= x; } return total; } } ",6.6396589279174805,0.7276269457023534,0.6533489101141278,0.5312367296249662,0.9411764705882353,0.6542186519139468
7012,Python,Java,"def carAssembly ( a , t , e , x ) : NEW_LINE INDENT NUM_STATION = len ( a [ 0 ] ) NEW_LINE T1 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE T2 = [ 0 for i in range ( NUM_STATION ) ] NEW_LINE DEDENT T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] NEW_LINE T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] NEW_LINE INDENT for i in range ( 1 , NUM_STATION ) : NEW_LINE INDENT T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) NEW_LINE T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) NEW_LINE DEDENT return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) NEW_LINE DEDENT a = [ [ 4 , 5 , 3 , 2 ] , [ 2 , 10 , 1 , 4 ] ] NEW_LINE t = [ [ 0 , 7 , 4 , 5 ] , [ 0 , 9 , 2 , 8 ] ] NEW_LINE e = [ 10 , 12 ] NEW_LINE x = [ 18 , 7 ] NEW_LINE print ( carAssembly ( a , t , e , x ) ) NEW_LINE","import java . io . * ; class GFG { static int NUM_LINE = 2 ; static int NUM_STATION = 4 ; static int min ( int a , int b ) { return a < b ? a : b ; } static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) { int T1 [ ] = new int [ NUM_STATION ] ; int T2 [ ] = new int [ NUM_STATION ] ; int i ; T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( i = 1 ; i < NUM_STATION ; ++ i ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 4 , 5 , 3 , 2 } , { 2 , 10 , 1 , 4 } } ; int t [ ] [ ] = { { 0 , 7 , 4 , 5 } , { 0 , 9 , 2 , 8 } } ; int e [ ] = { 10 , 12 } , x [ ] = { 18 , 7 } ; System . out . println ( carAssembly ( a , t , e , x ) ) ; } }","import java.util.*; public class Main { public static void main(String[] args){ int[][] a = {{4,5,3,2},{2,10,1,4}}; int[][] t = {{0,7,4,5},{0,9,2,8}}; int[] e = {10,12}; int[] x = {18,7}; System.out.println(carAssembly(a,t,e,x)); } public static int carAssembly(int[][] a, int[][] t, int[] e, int[] x){ int numStation = a[0].length; int[] T1 = new int[numStation]; int[] T2 = new int[numStation]; T1[0] = e[0] + a[0][0]; T2[0] = e[1] + a[1][0]; for(int i=1;i<numStation;i++){ T1[i] = Math.min(T1[i-1]+a[0][i], T2[i-1]+t[1][i]+a[0][i]); T2[i] = Math.min(T2[i-1]+a[1][i], T1[i-1]+t[0][i]+a[1][i]); } return Math.min(T1[numStation-1]+x[0], T2[numStation-1]+x[1]); } } ",12.96055793762207,0.670549604219717,0.5779743855414692,0.4411462060681549,1.0,0.6088023442477084
2066,Python,Java,"INT_SIZE = 32 NEW_LINE def getSingle ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 0 , INT_SIZE ) : NEW_LINE INDENT sm = 0 NEW_LINE x = ( 1 << i ) NEW_LINE for j in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ j ] & x ) : NEW_LINE INDENT sm = sm + 1 NEW_LINE DEDENT DEDENT if ( ( sm % 3 ) != 0 ) : NEW_LINE INDENT result = result | x NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr = [ 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","class GFG { static final int INT_SIZE = 32 ; static int getSingle ( int arr [ ] , int n ) { int result = 0 ; int x , sum ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { sum = 0 ; x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & x ) == 0 ) sum ++ ; } if ( ( sum % 3 ) != 0 ) result |= x ; } return result ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","final int INT_SIZE = 32; String NEW_LINE = System.lineSeparator(); int getSingle (int[] arr , int n ) { int result = 0 ; for(int i=0;i<INT_SIZE;++i){ int sm = 0; int x = 1 << i; for(int j =0;j<n;++j){ if ((arr[j] & x) != 0 ){ sm += 1 ; } } if (sm % 3 != 0 ){ result |= x; } } return result; } int[] arr = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7}; int n = arr.length ; System.out.println( ""The element with single occurrence is :"" + getSingle (arr,n) ) ; ",5.134665012359619,0.7595545097270361,0.6728378889410527,0.5258241949647455,0.7499999999999999,0.5930769364753218
1584,Python,Java,"def minJumps ( arr , l , h ) : NEW_LINE INDENT if ( h == l ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( arr [ l ] == 0 ) : NEW_LINE INDENT return float ( ' inf ' ) NEW_LINE DEDENT min = float ( ' inf ' ) NEW_LINE for i in range ( l + 1 , h + 1 ) : NEW_LINE INDENT if ( i < l + arr [ l ] + 1 ) : NEW_LINE INDENT jumps = minJumps ( arr , i , h ) NEW_LINE if ( jumps != float ( ' inf ' ) and jumps + 1 < min ) : NEW_LINE INDENT min = jumps + 1 NEW_LINE DEDENT DEDENT DEDENT return min NEW_LINE DEDENT arr = [ 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( ' Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ' , ' end ▁ is ' , minJumps ( arr , 0 , n - 1 ) ) NEW_LINE","import java . util . * ; import java . io . * ; class GFG { static int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ; int min = Integer . MAX_VALUE ; for ( int i = l + 1 ; i <= h && i <= l + arr [ l ] ; i ++ ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) min = jumps + 1 ; } return min ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 } ; int n = arr . length ; System . out . print ( "" Minimum ▁ number ▁ of ▁ jumps ▁ to ▁ reach ▁ end ▁ is ▁ "" + minJumps ( arr , 0 , n - 1 ) ) ; } }","import java.lang.Math; public class Main { static double minJumps(int arr[], int l, int h){ if (h == l) return 0; if (arr[l] == 0) return Double.POSITIVE_INFINITY; double min = Double.POSITIVE_INFINITY; for(int i= l+1;i<h+1;i++){ if(i < l + arr[l] + 1 ){ double jumps = minJumps(arr, i, h); if (jumps != Double.POSITIVE_INFINITY && jumps + 1 < min) min = jumps + 1; <｜begin▁of▁sentence｜>",5.07464599609375,0.3353467369891669,0.30327931580468803,0.258319715414368,0.8750000000000001,0.4433238007900576
1531,Python,Java,"def print2largest ( arr , arr_size ) : NEW_LINE INDENT if ( arr_size < 2 ) : NEW_LINE INDENT print ( "" ▁ Invalid ▁ Input ▁ "" ) NEW_LINE return NEW_LINE DEDENT first = second = - 2147483648 NEW_LINE for i in range ( arr_size ) : NEW_LINE INDENT if ( arr [ i ] > first ) : NEW_LINE INDENT second = first NEW_LINE first = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] > second and arr [ i ] != first ) : NEW_LINE INDENT second = arr [ i ] NEW_LINE DEDENT DEDENT if ( second == - 2147483648 ) : NEW_LINE INDENT print ( "" There ▁ is ▁ no ▁ second ▁ largest ▁ element "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ second ▁ largest ▁ element ▁ is "" , second ) NEW_LINE DEDENT DEDENT arr = [ 12 , 35 , 1 , 10 , 34 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print2largest ( arr , n ) NEW_LINE","class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( "" ▁ Invalid ▁ Input ▁ "" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( "" There ▁ is ▁ no ▁ second ▁ largest "" + "" elementNEW_LINE""); else System . out . print ( "" The ▁ second ▁ largest ▁ element "" + "" ▁ is ▁ "" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }","public class Main { private static final String NEW_LINE = ""\n""; public static void print2largest(int arr[], int arrSize) { if (arrSize < 2) { System.out.println(""Invalid Input""); return; } int first=Integer.MIN_VALUE, second=Integer.MIN_VALUE; for(int i = 0; i < arrSize ;i++){ if(arr[i] > first){ second = first; first = arr[i]; }else if(arr[i]>second && arr[i]!=first) { second = arr[i]; } } if (second == Integer.MIN_VALUE) { System.out.println(""There is no second largest element""); } else{ System.out.println(""The second largest element is "" + second); } } public static void main(String[] args){ int arr[] = {12, 35, 1, 10, 34, 1}; int n = arr.length; print2largest(arr,n); } } ",7.984972238540649,0.7341925069312764,0.6538863653067284,0.5566327516936929,0.9090909090909091,0.6623701989128576
1015,Python,Java,"def printNGE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] < arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNGE ( arr ) NEW_LINE","class Main { static void printNGE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNGE ( arr , n ) ; } }","public class Main { public static void main(String[] args) { int arr[] = {11, 13, 21, 3}; printNGE(arr); } public static void printNGE(int arr[]) { for (int i = 0; i < arr.length; i++) { int next = -1; for (int j = i + 1; j < arr.length; j++) { if (arr[i] < arr[j]) { next = arr[j]; break; } <｜begin▁of▁sentence｜>",4.020408868789673,0.6323736383749535,0.5811491869459496,0.48672088232569083,1.0,0.6407046176279836
2174,Python,Java,"def nextGreatest ( arr ) : NEW_LINE INDENT size = len ( arr ) NEW_LINE max_from_right = arr [ size - 1 ] NEW_LINE arr [ size - 1 ] = - 1 NEW_LINE for i in range ( size - 2 , - 1 , - 1 ) : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = max_from_right NEW_LINE if max_from_right < temp : NEW_LINE INDENT max_from_right = temp NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT print arr [ i ] , NEW_LINE DEDENT DEDENT arr = [ 16 , 17 , 4 , 3 , 5 , 2 ] NEW_LINE nextGreatest ( arr ) NEW_LINE print "" Modified ▁ array ▁ is "" NEW_LINE printArray ( arr ) NEW_LINE","import java . io . * ; class NextGreatest { static void nextGreatest ( int arr [ ] ) { int size = arr . length ; int max_from_right = arr [ size - 1 ] ; arr [ size - 1 ] = - 1 ; for ( int i = size - 2 ; i >= 0 ; i -- ) { int temp = arr [ i ] ; arr [ i ] = max_from_right ; if ( max_from_right < temp ) max_from_right = temp ; } } static void printArray ( int arr [ ] ) { for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 16 , 17 , 4 , 3 , 5 , 2 } ; nextGreatest ( arr ) ; System . out . println ( "" The ▁ modified ▁ array : "" ) ; printArray ( arr ) ; } }","import java.util.*; class Main { static void nextGreatest(int[] arr) { int size = arr.length; int max_from_right = arr[size - 1]; arr[size - 1] = -1; for (int i = size - 2; i >= 0 ; --i ) { int temp = arr[i]; arr[i] = max_from_right; if(max_from_right < temp) { max_from_right = temp; } } } static void printArray(int[] arr) { for (int i = 0 ; i < arr.length ; ++i ) { System.out.print(arr[i] + "" ""); } System.out.println(); } public static void main(String args[]) { int[] arr = new int[]{16, 17, 4, 3, 5, 2}; nextGreatest(arr); System.out.println(""Modified array is""); printArray(arr); } } ",8.269487142562866,0.8386156913224664,0.7647770182962655,0.6637467622911751,0.9411764705882353,0.7469756747802931
11738,Python,Java,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","public static double sum (int n){ int i = 1; double s = 0.0; for(i=1; i<n+1; i++) { s = s + 1/(double)i; } return s; } public static void main (String[] args){ int n = 5; System.out<｜begin▁of▁sentence｜>("" Sum ▁ is "" + String.format(""%.6f"", sum(n))); } ",5.114431858062744,0.744011893876034,0.6333933455043371,0.47842705543387015,0.9333333333333333,0.614898938803709
1981,Python,Java,"def getMedian ( ar1 , ar2 , n ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE m1 = - 1 NEW_LINE m2 = - 1 NEW_LINE count = 0 NEW_LINE while count < n + 1 : NEW_LINE INDENT count += 1 NEW_LINE if i == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ 0 ] NEW_LINE break NEW_LINE DEDENT elif j == n : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ 0 ] NEW_LINE break NEW_LINE DEDENT if ar1 [ i ] <= ar2 [ j ] : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar1 [ i ] NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m1 = m2 NEW_LINE m2 = ar2 [ j ] NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return ( m1 + m2 ) / 2 NEW_LINE DEDENT ar1 = [ 1 , 12 , 15 , 26 , 38 ] NEW_LINE ar2 = [ 2 , 13 , 17 , 30 , 45 ] NEW_LINE n1 = len ( ar1 ) NEW_LINE n2 = len ( ar2 ) NEW_LINE if n1 == n2 : NEW_LINE INDENT print ( "" Median ▁ is ▁ "" , getMedian ( ar1 , ar2 , n1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Doesn ' t ▁ work ▁ for ▁ arrays ▁ of ▁ unequal ▁ size "" ) NEW_LINE DEDENT","class Main { static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 ; int j = 0 ; int count ; int m1 = - 1 , m2 = - 1 ; for ( count = 0 ; count <= n ; count ++ ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } if ( ar1 [ i ] <= ar2 [ j ] ) { m1 = m2 ; m2 = ar1 [ i ] ; i ++ ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 12 , 15 , 26 , 38 } ; int ar2 [ ] = { 2 , 13 , 17 , 30 , 45 } ; int n1 = ar1 . length ; int n2 = ar2 . length ; if ( n1 == n2 ) System . out . println ( "" Median ▁ is ▁ "" + getMedian ( ar1 , ar2 , n1 ) ) ; else System . out . println ( "" arrays ▁ are ▁ of ▁ unequal ▁ size "" ) ; } }","public static double getMedian(int[] ar1, int[] ar2, int n) { int i = 0; int j = 0; int m1 = -1; int m2 = -1; int count = 0; while (count < n + 1) { count++; if (i == n){ m1 = m2; m2 = ar2[0]; break; } else if(j == n) { m1 = m2; m2 = ar1[0]; break; } if (ar1[i] <= ar2[j]) { m1 = m2; m2 = ar1[i]; i++; } else { m1 = m2; m2 = ar2[j]; j++; } } return (m1 + m2) / 2.0 ; } public static void main(String[] args){ int[] ar1= {1, 12, 15, 26, 38}; int[] ar2 ={2, 13, 17, 30, 45}; int n1 = ar1.length; int n2 = ar2.length; if(n1 == n2) { System.out.println(""Median is "" + getMedian(ar1, ar2, n1)); } else{ System.out.println(""Doesn't work for arrays of unequal size""); } } ",12.805063962936401,0.8455745732901584,0.7697246712703149,0.668782894309263,0.9,0.7381480260164841
13443,Python,Java,"def seriesSum ( calculated , current , N ) : NEW_LINE INDENT i = calculated ; NEW_LINE cur = 1 ; NEW_LINE if ( current == N + 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT while ( i < calculated + current ) : NEW_LINE INDENT cur *= i ; NEW_LINE i += 1 ; NEW_LINE DEDENT return cur + seriesSum ( i , current + 1 , N ) ; NEW_LINE DEDENT N = 5 ; NEW_LINE print ( seriesSum ( 1 , 1 , N ) ) ; NEW_LINE","class GFG { static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( seriesSum ( 1 , 1 , N ) ) ; } }","public static double seriesSum(int calculated, int current, int N) { if (current == N+1) return 0; int i = calculated; double cur = 1; while (i < calculated + current) { cur *= i; i += 1; } return cur + seriesSum(i, current + 1, N); } public static void main(String[] args){ int N = 5; System.out.println(seriesSum(1, 1, N)); } ",6.341348886489868,0.8632367803643658,0.7921174192673642,0.6744427260002003,0.823529411764706,0.7191687317295519
2291,Python,Java,"def getMissingNo ( A ) : NEW_LINE INDENT n = len ( A ) NEW_LINE total = ( n + 1 ) * ( n + 2 ) / 2 NEW_LINE sum_of_A = sum ( A ) NEW_LINE return total - sum_of_A NEW_LINE DEDENT A = [ 1 , 2 , 4 , 5 , 6 ] NEW_LINE miss = getMissingNo ( A ) NEW_LINE print ( miss ) NEW_LINE","import java . util . * ; import java . util . Arrays ; class GFG { public static List < Integer > findDisappearedNumbers ( int [ ] nums ) { for ( int i = 0 ; i < nums . length ; i ++ ) { int index = Math . abs ( nums [ i ] ) ; if ( nums [ index - 1 ] > 0 ) { nums [ index - 1 ] *= - 1 ; } } List < Integer > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { res . add ( i + 1 ) ; } } return res ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 4 , 5 , 6 } ; System . out . println ( findDisappearedNumbers ( a ) ) ; } }","import java.util.*; public class Main { public static void main(String[] args) { ArrayList<Integer> A = new ArrayList<>(Arrays.asList(1, 2, 4, 5, 6)); int miss = getMissingNo(A); System.out.println(miss); } public static int getMissingNo(ArrayList<Integer> A) { int n = A.size(); int total = ((n + 1) * (n + 2)) / 2; int sum_of_A = 0; for(int i : A) { sum_of_A += i; } return total - sum_of_A; } } ",6.112031936645508,0.4524122133922102,0.34994334164243573,0.21831135192639844,0.9473684210526316,0.43702847266426836
4857,Python,Java,"def flip ( arr , i ) : NEW_LINE INDENT start = 0 NEW_LINE while start < i : NEW_LINE INDENT temp = arr [ start ] NEW_LINE arr [ start ] = arr [ i ] NEW_LINE arr [ i ] = temp NEW_LINE start += 1 NEW_LINE i -= 1 NEW_LINE DEDENT DEDENT def findMax ( arr , n ) : NEW_LINE INDENT mi = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if arr [ i ] > arr [ mi ] : NEW_LINE INDENT mi = i NEW_LINE DEDENT DEDENT return mi NEW_LINE DEDENT def pancakeSort ( arr , n ) : NEW_LINE INDENT curr_size = n NEW_LINE while curr_size > 1 : NEW_LINE INDENT mi = findMax ( arr , curr_size ) NEW_LINE if mi != curr_size - 1 : NEW_LINE INDENT flip ( arr , mi ) NEW_LINE flip ( arr , curr_size - 1 ) NEW_LINE DEDENT curr_size -= 1 NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT print ( "" % d "" % ( arr [ i ] ) , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT arr = [ 23 , 10 , 20 , 11 , 12 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE pancakeSort ( arr , n ) ; NEW_LINE print ( "" Sorted ▁ Array ▁ "" ) NEW_LINE printArray ( arr , n ) NEW_LINE","import java . io . * ; class PancakeSort { static void flip ( int arr [ ] , int i ) { int temp , start = 0 ; while ( start < i ) { temp = arr [ start ] ; arr [ start ] = arr [ i ] ; arr [ i ] = temp ; start ++ ; i -- ; } } static int findMax ( int arr [ ] , int n ) { int mi , i ; for ( mi = 0 , i = 0 ; i < n ; ++ i ) if ( arr [ i ] > arr [ mi ] ) mi = i ; return mi ; } static int pancakeSort ( int arr [ ] , int n ) { for ( int curr_size = n ; curr_size > 1 ; -- curr_size ) { int mi = findMax ( arr , curr_size ) ; if ( mi != curr_size - 1 ) { flip ( arr , mi ) ; flip ( arr , curr_size - 1 ) ; } } return 0 ; } static void printArray ( int arr [ ] , int arr_size ) { for ( int i = 0 ; i < arr_size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 23 , 10 , 20 , 11 , 12 , 6 , 7 } ; int n = arr . length ; pancakeSort ( arr , n ) ; System . out . println ( "" Sorted ▁ Array : ▁ "" ) ; printArray ( arr , n ) ; } }","public class Main { public static void main(String[] args) { int[] arr = {23, 10, 20, 11, 12, 6, 7}; int n = arr.length; pancakeSort(arr, n); System.out.println(""Sorted Array ""); printArray(arr, n); } public static void flip(int[] arr, int i) { int start = 0; while (start < i) { int temp = arr[start]; arr[start] = arr[i]; arr[i] = temp; start += 1; i -= 1; } } public static int findMax(int[] arr, int n) { int mi = 0; for (int i = 0; i < n; i++) { if (arr[i] > arr[mi]) { mi = i; } } return mi; } public static void pancakeSort(int[] arr, int n) { int curr_size = n; while (curr_size > 1) { int mi = findMax(arr, curr_size); if (mi != curr_size - 1) { flip(arr, mi); flip(arr, curr_size - 1); } curr_size -= 1; } } public static void printArray(int[] arr, int n) { for (int i = 0; i < n; i++) { System.out.print(arr[i] + "" ""); } } } ",11.079188346862793,0.8270866649990869,0.7597495890393582,0.6425453212528419,1.0,0.7497817248769894
1844,Python,Java,"R = 3 NEW_LINE C = 3 NEW_LINE def minCost ( cost , m , n ) : NEW_LINE INDENT tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ] NEW_LINE tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] NEW_LINE DEDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] NEW_LINE DEDENT DEDENT return tc [ m ] [ n ] NEW_LINE DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE","import java . util . * ; class MinimumCostPath { private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }","public class Main { static int minCost(int [][]cost, int m, int n){ int R = 3; // Assuming the value of R is 3 as in Python code. int C = 3; // Assuming the value of C is 3 as in Python code. int tc[][] = new int[R][C]; tc[0][0] = cost[0][0]; for(int i=1; i<m+1; i++) { tc[i][0] = tc[i-1][0] + cost[i][0]; } for(int j=1; j<n+1; j++){ tc[0][j] = tc[0][j-1] + cost[0][j]; } for(int i=1;i<m+1;i++) { for(int j=1;j<n+1;j++) { tc[i][j] = Math.min(Math.min(tc[i-1][j], tc[i][j-1]), tc[i-1][j-1]) + cost[i][j]; } } return tc[m][n]; } public static void main(String[] args){ int cost[][]= {{1,2,3},{4,8,2},{1,5,3}}; System.out.println(minCost(cost,2,2)); } } ",12.848932266235352,0.6415845072647998,0.5590530219191536,0.44068959987151013,0.8571428571428571,0.5656255770529142
2012,Python,Java,def count ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT return n NEW_LINE DEDENT elif n >= 3 and n < 10 : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT po = 1 NEW_LINE while n / po > 9 : NEW_LINE INDENT po = po * 10 NEW_LINE DEDENT msd = n / po NEW_LINE if msd != 3 : NEW_LINE INDENT return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) NEW_LINE DEDENT else : NEW_LINE INDENT return count ( msd * po - 1 ) NEW_LINE DEDENT DEDENT n = 578 NEW_LINE print count ( n ) NEW_LINE,import java . io . * ; class GFG { static int count ( int n ) { if ( n < 3 ) return n ; if ( n >= 3 && n < 10 ) return n - 1 ; int po = 1 ; while ( n / po > 9 ) po = po * 10 ; int msd = n / po ; if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ; else return count ( msd * po - 1 ) ; } public static void main ( String [ ] args ) { int n = 578 ; System . out . println ( count ( n ) ) ; } },public class Main { public static void main(String[] args){ System.out.println(count(578)); } public static int count(int n) { if (n < 3) return n; else if (n >= 3 && n < 10) return n - 1; int po = 1; while (n / po > 9) { po = po * 10; } int msd = n / po; if (msd != 3) return count(msd) * count(po - 1) + count(msd) + count(n % po); else return count(msd * po - 1); } } ,5.505906105041504,0.8721673239756849,0.8436189465667643,0.7996483283833882,1.0,0.8597538298683716
13911,Python,Java,"INT_MAX = 2147483647 NEW_LINE def isKthBitSet ( x , k ) : NEW_LINE INDENT return 1 if ( x & ( 1 << ( k - 1 ) ) ) else 0 NEW_LINE DEDENT def leftmostSetBit ( x ) : NEW_LINE INDENT count = 0 NEW_LINE while ( x ) : NEW_LINE INDENT count += 1 NEW_LINE x = x >> 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def isBinPalindrome ( x ) : NEW_LINE INDENT l = leftmostSetBit ( x ) NEW_LINE r = 1 NEW_LINE while ( l > r ) : NEW_LINE INDENT if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT l -= 1 NEW_LINE r += 1 NEW_LINE DEDENT return 1 NEW_LINE DEDENT def findNthPalindrome ( n ) : NEW_LINE INDENT pal_count = 0 NEW_LINE i = 0 NEW_LINE for i in range ( 1 , INT_MAX + 1 ) : NEW_LINE INDENT if ( isBinPalindrome ( i ) ) : NEW_LINE INDENT pal_count += 1 NEW_LINE DEDENT if ( pal_count == n ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( findNthPalindrome ( n ) ) NEW_LINE DEDENT","import java . io . * ; class GFG { static int INT_MAX = 2147483647 ; static int isKthBitSet ( int x , int k ) { return ( ( x & ( 1 << ( k - 1 ) ) ) > 0 ) ? 1 : 0 ; } static int leftmostSetBit ( int x ) { int count = 0 ; while ( x > 0 ) { count ++ ; x = x >> 1 ; } return count ; } static int isBinPalindrome ( int x ) { int l = leftmostSetBit ( x ) ; int r = 1 ; while ( l > r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return 0 ; l -- ; r ++ ; } return 1 ; } static int findNthPalindrome ( int n ) { int pal_count = 0 ; int i = 0 ; for ( i = 1 ; i <= INT_MAX ; i ++ ) { if ( isBinPalindrome ( i ) > 0 ) { pal_count ++ ; } if ( pal_count == n ) break ; } return i ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( findNthPalindrome ( n ) ) ; } }","Integer INT_MAX = 2147483647; Character NEW_LINE = '\n'; int isKthBitSet ( int x , int k ) { return ((x & (1 << (k - 1))) != 0) ? 1 : 0; } int leftmostSetBit ( int x ){ int count = 0; while(x > 0){ count += 1; x = x >> 1; } return count; } int isBinPalindrome ( int x ) { int l = leftmostSetBit(x); int r = 1; while(l > r) { if(isKthBitSet(x, l)!= isKthBitSet(x, r)) { return 0; } l -= 1; r += 1; } return 1; } int findNthPalindrome ( int n ){ int pal_count = 0; for(int i=1 ;i<INT_MAX+1;i++){ if(isBinPalindrome(i)){ pal_count +=1; } if(pal_count == n){ break; } } return i; } public static void main (String[] args ){ int n = 9; System.out.println(findNthPalindrome(n)); } ",9.033543109893799,0.8537753963826956,0.8100214530024341,0.7261456985784893,0.9473684210526316,0.792512515320732
9298,Python,Java,"def CalPeri ( ) : NEW_LINE INDENT s = 5 NEW_LINE Perimeter = 10 * s NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" , Perimeter ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT CalPeri ( ) ; NEW_LINE DEDENT","import java . io . * ; class GFG { static void CalPeri ( ) { int S = 5 , Perimeter ; Perimeter = 10 * S ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Decagon ▁ is ▁ : ▁ "" + Perimeter ) ; } public static void main ( String [ ] args ) { CalPeri ( ) ; } }","public class Main { public static void main(String[] args) { int s = 5; int perimeter = 10 * s; System.out.println(""The Perimeter of Decagon is : "" + perimeter); } } ",1.9774158000946045,0.4244271740732347,0.32463380357111354,0.21661091702719995,1.0,0.4516276419190399
1704,Python,Java,"import math NEW_LINE def printRepeating ( arr , size ) : NEW_LINE INDENT S = 0 ; NEW_LINE P = 1 ; NEW_LINE n = size - 2 NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT S = S + arr [ i ] NEW_LINE P = P * arr [ i ] NEW_LINE DEDENT S = S - n * ( n + 1 ) // 2 NEW_LINE P = P // fact ( n ) NEW_LINE D = math . sqrt ( S * S - 4 * P ) NEW_LINE x = ( D + S ) // 2 NEW_LINE y = ( S - D ) // 2 NEW_LINE print ( "" The ▁ two ▁ Repeating ▁ elements ▁ are ▁ "" , ( int ) ( x ) , "" ▁ & ▁ "" , ( int ) ( y ) ) NEW_LINE DEDENT def fact ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n * fact ( n - 1 ) ) NEW_LINE DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int x , y ; int D ; int n = size - 2 , i ; for ( i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; D = ( int ) Math . sqrt ( S * S - 4 * P ) ; x = ( D + S ) / 2 ; y = ( S - D ) / 2 ; System . out . println ( "" The ▁ two ▁ repeating ▁ elements ▁ are ▁ : "" ) ; System . out . print ( x + "" ▁ "" + y ) ; } int fact ( int n ) { return ( n == 0 ) ? 1 : n * fact ( n - 1 ) ; } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","import java.lang.Math; class Main { public static void main(String[] args) { int[] arr = {4, 2, 4, 5, 2, 3, 1}; printRepeating(arr, arr.length); } private static void printRepeating(int [] arr, int size){ int S = 0; int P = 1; int n = size - 2; for (int i = 0; i < size ; i++) { S += arr[i]; P *= arr[i]; } S = S - n*(n+1)/2; P = P/fact(n); int D = (int)Math.sqrt(S*S - 4*P); int x = (D + S) / 2; int y = (S - D) / 2; System.out.println(""The two repeating elements are "" + x + "" & "" + y ); } private static int fact(int n){ if (n == 0) return 1; else return n*fact(n-1); } } ",9.294875860214233,0.7331759509812166,0.6560322409647377,0.5210175690611405,0.7999999999999999,0.6047122983427983
13537,Python,Java,"def sum ( n ) : NEW_LINE INDENT i = 1 NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i ; NEW_LINE DEDENT return s ; NEW_LINE DEDENT n = 5 NEW_LINE print ( "" Sum ▁ is "" , round ( sum ( n ) , 6 ) ) NEW_LINE","import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "" Sum ▁ is ▁ % f "" , sum ( n ) ) ; } }","public class Main { public static void main(String[] args) { int n = 5; System.out.println(""Sum is "" + String.format(""%.6f"", sum(n))); } private static double sum(int n) { int i=1; double s = .0d; for (i = 1; i <= n; i++) { s = s + 1.0 / i; } return s; } } ",2.6254191398620605,0.7662212041409903,0.6494385460163641,0.48768958634801657,0.9411764705882353,0.6237356516200822
13913,Python,Java,"INT_SIZE = 32 NEW_LINE def constructNthNumber ( group_no , aux_num , op ) : NEW_LINE INDENT a = [ 0 ] * INT_SIZE NEW_LINE num , i = 0 , 0 NEW_LINE if op == 2 : NEW_LINE INDENT len_f = 2 * group_no NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT elif op == 0 : NEW_LINE INDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 0 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT len_f = 2 * group_no + 1 NEW_LINE a [ len_f - 1 ] = a [ 0 ] = 1 NEW_LINE a [ group_no ] = 1 NEW_LINE while aux_num : NEW_LINE INDENT a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 NEW_LINE aux_num = aux_num >> 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT for i in range ( 0 , len_f ) : NEW_LINE INDENT num += ( 1 << i ) * a [ i ] NEW_LINE DEDENT return num NEW_LINE DEDENT def getNthNumber ( n ) : NEW_LINE INDENT group_no = 0 NEW_LINE count_upto_group , count_temp = 0 , 1 NEW_LINE while count_temp < n : NEW_LINE INDENT group_no += 1 NEW_LINE count_upto_group = count_temp NEW_LINE count_temp += 3 * ( 1 << ( group_no - 1 ) ) NEW_LINE DEDENT group_offset = n - count_upto_group - 1 NEW_LINE if ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) : NEW_LINE INDENT aux_num = group_offset NEW_LINE DEDENT else : NEW_LINE INDENT if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 ) : NEW_LINE else : NEW_LINE aux_num = ( ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) // 2 ) NEW_LINE DEDENT return constructNthNumber ( group_no , aux_num , op ) NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 9 NEW_LINE print ( getNthNumber ( n ) ) NEW_LINE DEDENT","class GFG { static int INT_SIZE = 32 ; static int constructNthNumber ( int group_no , int aux_num , int op ) { int a [ ] = new int [ INT_SIZE ] ; int num = 0 , len_f ; int i = 0 ; if ( op == 2 ) { len_f = 2 * group_no ; a [ len_f - 1 ] = a [ 0 ] = 1 ; while ( aux_num > 0 ) { a [ group_no + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } else if ( op == 0 ) { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 0 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } { len_f = 2 * group_no + 1 ; a [ len_f - 1 ] = a [ 0 ] = 1 ; a [ group_no ] = 1 ; while ( aux_num > 0 ) { a [ group_no + 1 + i ] = a [ group_no - 1 - i ] = aux_num & 1 ; aux_num = aux_num >> 1 ; i ++ ; } } for ( i = 0 ; i < len_f ; i ++ ) num += ( 1 << i ) * a [ i ] ; return num ; } static int getNthNumber ( int n ) { int group_no = 0 , group_offset ; int count_upto_group = 0 , count_temp = 1 ; int op , aux_num ; while ( count_temp < n ) { group_no ++ ; count_upto_group = count_temp ; count_temp += 3 * ( 1 << ( group_no - 1 ) ) ; } group_offset = n - count_upto_group - 1 ; if ( ( group_offset + 1 ) <= ( 1 << ( group_no - 1 ) ) ) { aux_num = group_offset ; } else { if ( ( ( group_offset + 1 ) - ( 1 << ( group_no - 1 ) ) ) % 2 == 1 ) else aux_num = ( ( group_offset ) - ( 1 << ( group_no - 1 ) ) ) / 2 ; } return constructNthNumber ( group_no , aux_num , op ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . printf ( "" % d "" , getNthNumber ( n ) ) ; } }","public class Main { public static final int INT_SIZE = 32; private void constructNthNumber(int groupNo, int auxNum, int op, int[] a) { for (int i = 0; i < INT_SIZE; i++) a[i] = 0; if (op == 2) { int lenF = 2 * groupNo; a[lenF - 1] = a[0] = 1; while (auxNum != 0) { a[groupNo + i] = a[groupNo - 1 - i] = auxNum & 1; auxNum >>= 1; i++; } } else if (op == 0) { int lenF = 2 * groupNo + 1; a[lenF - 1] = a[0] = 1; a[groupNo] = 0; while (auxNum != 0) { a[groupNo + i + 1] = a[groupNo - 1 - i] = auxNum & 1; auxNum >>= 1; i++; } } } private int getNthNumber(int n) { int groupNo = 0, countUptoGroup = 0, countTemp = 1; while (countTemp < n) { groupNo += 1; countUptoGroup = countTemp; countTemp += 3 * (1 << (groupNo - 1)); } int groupOffset = n - countUptoGroup - 1, auxNum = 0; if ((groupOffset + 1) <= (1 << (groupNo - 1))) { auxNum = groupOffset; } else { if ((((groupOffset + 1) - (1 << (groupNo - 1))) % 2) == 0) { auxNum = ((groupOffset - (1 << (groupNo - 1))) / 2); } } int[] a = new int[INT_SIZE]; constructNthNumber(groupNo, auxNum, op, a); } public static void main(String args[]) { Main m = new Main(); System.out.println(m.getNthNumber(9)); } } ",18.15275812149048,0.672882685192228,0.5689001030917592,0.412645161597692,0.8799999999999999,0.5528516131183843
11721,Python,Java,"def midptellipse ( rx , ry , xc , yc ) : NEW_LINE INDENT x = 0 ; NEW_LINE y = ry ; NEW_LINE d1 = ( ( ry * ry ) - ( rx * rx * ry ) + ( 0.25 * rx * rx ) ) ; NEW_LINE dx = 2 * ry * ry * x ; NEW_LINE dy = 2 * rx * rx * y ; NEW_LINE while ( dx < dy ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d1 < 0 ) : NEW_LINE INDENT x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE d1 = d1 + dx + ( ry * ry ) ; NEW_LINE DEDENT else : NEW_LINE INDENT x += 1 ; NEW_LINE y -= 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d1 = d1 + dx - dy + ( ry * ry ) ; NEW_LINE DEDENT DEDENT d2 = ( ( ( ry * ry ) * ( ( x + 0.5 ) * ( x + 0.5 ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ) ; NEW_LINE while ( y >= 0 ) : NEW_LINE INDENT print ( "" ( "" , x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE print ( "" ( "" , - x + xc , "" , "" , - y + yc , "" ) "" ) ; NEW_LINE if ( d2 > 0 ) : NEW_LINE INDENT y -= 1 ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + ( rx * rx ) - dy ; NEW_LINE DEDENT else : NEW_LINE INDENT y -= 1 ; NEW_LINE x += 1 ; NEW_LINE dx = dx + ( 2 * ry * ry ) ; NEW_LINE dy = dy - ( 2 * rx * rx ) ; NEW_LINE d2 = d2 + dx - dy + ( rx * rx ) ; NEW_LINE DEDENT DEDENT DEDENT midptellipse ( 10 , 15 , 50 , 50 ) ; NEW_LINE","import java . util . * ; import java . text . DecimalFormat ; class GFG { static void midptellipse ( float rx , float ry , float xc , float yc ) { float dx , dy , d1 , d2 , x , y ; x = 0 ; y = ry ; d1 = ( ry * ry ) - ( rx * rx * ry ) + ( 0.25f * rx * rx ) ; dx = 2 * ry * ry * x ; dy = 2 * rx * rx * y ; DecimalFormat df = new DecimalFormat ( "" # , # # # , # #0.00000"" ) ; while ( dx < dy ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d1 < 0 ) { x ++ ; dx = dx + ( 2 * ry * ry ) ; d1 = d1 + dx + ( ry * ry ) ; } else { x ++ ; y -- ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d1 = d1 + dx - dy + ( ry * ry ) ; } } d2 = ( ( ry * ry ) * ( ( x + 0.5f ) * ( x + 0.5f ) ) ) + ( ( rx * rx ) * ( ( y - 1 ) * ( y - 1 ) ) ) - ( rx * rx * ry * ry ) ; while ( y >= 0 ) { System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( y + yc ) ) ) ; System . out . println ( df . format ( ( x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; System . out . println ( df . format ( ( - x + xc ) ) + "" , ▁ "" + df . format ( ( - y + yc ) ) ) ; if ( d2 > 0 ) { y -- ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + ( rx * rx ) - dy ; } else { y -- ; x ++ ; dx = dx + ( 2 * ry * ry ) ; dy = dy - ( 2 * rx * rx ) ; d2 = d2 + dx - dy + ( rx * rx ) ; } } } public static void main ( String args [ ] ) { midptellipse ( 10 , 15 , 50 , 50 ) ; } }","public class Main { public static void main(String[] args) { midptellipse(10, 15, 50, 50); } public static void midptellipse(double rx, double ry, double xc, double yc){ int x = 0; int y = (int)ry; double d1 = ((ry * ry) - (rx * rx * ry) + (0.25 * rx * rx)); double dx = 2 * ry * ry * x; double dy = 2 * rx * rx * y; while(dx < dy){ printCoordinates(x, y, xc, yc); if (d1 < 0) { x++; dx = dx + (2 * ry * ry); d1 = d1 + dx + (ry * ry); } else { x++; y--; dx = dx + (2 * ry * ry); dy = dy - (2 * rx * rx); d1 = d1 + dx - dy + (rx * rx); } } double d2 = ((ry * ry * (x + 0.5) * (x + 0.5)) + (rx * rx * (y - 1) * (y - 1)) - (rx * rx * ry * ry)); while(y >= 0){ printCoordinates(x, y, xc, yc); if(d2 > 0){ y--; dy = dy - (2 * rx * rx); d2 = d2 + (rx * rx) - dy; } else { y--; x++; dx = dx + (2 * ry * ry); dy = dy - (2 * rx * rx); d2 = d2 + dx - dy + (rx * rx); } } } public static void printCoordinates(int x, int y, double xc, double yc){ System.out.println("" ("" + (x + xc) + "" , "" + (y + yc) + "")""); System.out.println("" ("" + (-x + xc) + "" , "" + (y + yc) + "")""); System.out.println("" ("" + (x + xc) + "" , "" + (-y + yc) + "")""); System.out.println("" ("" + (-x + xc) + "" , "" + (-y + yc) + "")""); } } ",16.72774076461792,0.6319147080006401,0.569636158060356,0.46742187175939887,0.8888888888888888,0.5938619768982458
2065,Python,Java,"def getSingle ( arr , n ) : NEW_LINE INDENT ones = 0 NEW_LINE twos = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT twos = twos | ( ones & arr [ i ] ) NEW_LINE ones = ones ^ arr [ i ] NEW_LINE common_bit_mask = ~ ( ones & twos ) NEW_LINE ones &= common_bit_mask NEW_LINE twos &= common_bit_mask NEW_LINE DEDENT return ones NEW_LINE DEDENT arr = [ 3 , 3 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" , getSingle ( arr , n ) ) NEW_LINE","class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; int common_bit_mask ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( "" The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ "" + getSingle ( arr , n ) ) ; } }","public class Main { static int getSingle(int arr[], int n) { int ones = 0; int twos = 0; for (int i=0; i<n; i++) { twos = twos | (ones & arr[i]); ones = ones ^ arr[i]; int common_bit_mask = ~(ones & twos); ones &= common_bit_mask; twos &= common_bit_mask; } return ones; } public static void main (String[] args) { int arr[] = {3, 3, 2, 3}; int n = arr.length; System.out.print(""The element with single occurrence is "" + getSingle(arr, n)); } } ",4.910023927688599,0.8515032056901721,0.8007165762783315,0.7256840331298844,1.0,0.8079788231909191
13427,Python,Java,"import math NEW_LINE def countDivisors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , ( int ) ( math . sqrt ( n ) ) + 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( n // i == i ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = count + 2 NEW_LINE DEDENT DEDENT DEDENT if ( count % 2 == 0 ) : NEW_LINE INDENT print ( "" Even "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Odd "" ) NEW_LINE DEDENT DEDENT print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) NEW_LINE countDivisors ( 10 ) NEW_LINE","import java . io . * ; import java . math . * ; class GFG { static void countDivisors ( int n ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) + 1 ; i ++ ) { if ( n % i == 0 ) count += ( n / i == i ) ? 1 : 2 ; } if ( count % 2 == 0 ) System . out . println ( "" Even "" ) ; else System . out . println ( "" Odd "" ) ; } public static void main ( String args [ ] ) { System . out . print ( "" The ▁ count ▁ of ▁ divisor : ▁ "" ) ; countDivisors ( 10 ) ; } }","import java.lang.Math; class Main { public static void main(String[] args) { System.out.println("" The count of divisor : "" + countDivisors(10)); } public static int countDivisors (int n) { int count = 0; for(int i=1 ; i <= Math.sqrt(n)+1 ; ++i ){ if(n % i == 0){ if(n / i == i){ count = count + 1; }else { count = count + 2; <｜begin▁of▁sentence｜>",3.6430909633636475,0.5187594833097674,0.4296012844925279,0.30802383326868743,1.0,0.5156166832880812
848,Python,Java,"def search ( mat , n , x ) : NEW_LINE INDENT i = 0 NEW_LINE j = n - 1 NEW_LINE while ( i < n and j >= 0 ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == x ) : NEW_LINE INDENT print ( "" n ▁ Found ▁ at ▁ "" , i , "" , ▁ "" , j ) NEW_LINE return 1 NEW_LINE DEDENT if ( mat [ i ] [ j ] > x ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT print ( "" Element ▁ not ▁ found "" ) NEW_LINE return 0 NEW_LINE DEDENT mat = [ [ 10 , 20 , 30 , 40 ] , [ 15 , 25 , 35 , 45 ] , [ 27 , 29 , 37 , 48 ] , [ 32 , 33 , 39 , 50 ] ] NEW_LINE search ( mat , 4 , 29 ) NEW_LINE","class GFG { private static void search ( int [ ] [ ] mat , int n , int x ) { int i = 0 , j = n - 1 ; while ( i < n && j >= 0 ) { if ( mat [ i ] [ j ] == x ) { System . out . print ( "" n ▁ Found ▁ at ▁ "" + i + "" ▁ "" + j ) ; return ; } if ( mat [ i ] [ j ] > x ) j -- ; else i ++ ; } System . out . print ( "" n ▁ Element ▁ not ▁ found "" ) ; return ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } } ; search ( mat , 4 , 29 ) ; } }","public class Main { public static void main(String[] args) { int[][] mat = {{10, 20, 30, 40}, {15, 25, 35, 45}, {27, 29, 37, 48}, {32, 33, 39, 50}}; search(mat, 4, 29); } public static int search(int[][] mat, int n, int x) { int i = 0; int j = n - 1; while (i < n && j >= 0) { if (mat[i][j] == x) { System.out<｜begin▁of▁sentence｜>println(""Found at "" + i + "", "" + j); return 1; } else if (mat[i][j] > x) { j -= 1; } else { i += 1; } } System.out.println(""Element not found""); return 0; } } ",10.588785886764526,0.8730851215702881,0.8036872804768356,0.7226628327047335,0.9523809523809523,0.7915782686075992
13539,Python,Java,"def printFibonacciNumbers ( n ) : NEW_LINE INDENT f1 = 0 NEW_LINE f2 = 1 NEW_LINE if ( n < 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT print ( f1 , end = "" ▁ "" ) NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT print ( f2 , end = "" ▁ "" ) NEW_LINE next = f1 + f2 NEW_LINE f1 = f2 NEW_LINE f2 = next NEW_LINE DEDENT DEDENT printFibonacciNumbers ( 7 ) NEW_LINE","class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; System . out . print ( f1 + "" ▁ "" ) ; for ( i = 1 ; i < n ; i ++ ) { System . out . print ( f2 + "" ▁ "" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }","public class Main { public static void main(String[] args) { printFibonacciNumbers(7); } public static void printFibonacciNumbers(int n) { int f1 = 0; int f2 = 1; if (n < 1) { System.out.println(f1); return; } System.out.print(f1 + "" ""); for (int x = 1; x < n; x++) { System.out<｜begin▁of▁sentence｜>.print(f2 + "" ""); int next = f1 + f2; f1 = f2; f2 = next; } } } ",7.451786994934082,0.794392523364486,0.734566112995136,0.6147829409077783,1.0,0.7303480586354447
1954,Python,Java,"d = 256 NEW_LINE def search ( pat , txt , q ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE p = 0 NEW_LINE t = 0 NEW_LINE h = 1 NEW_LINE for i in xrange ( M - 1 ) : NEW_LINE INDENT h = ( h * d ) % q NEW_LINE DEDENT for i in xrange ( M ) : NEW_LINE INDENT p = ( d * p + ord ( pat [ i ] ) ) % q NEW_LINE t = ( d * t + ord ( txt [ i ] ) ) % q NEW_LINE DEDENT for i in xrange ( N - M + 1 ) : NEW_LINE INDENT if p == t : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT else : j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE DEDENT DEDENT if i < N - M : NEW_LINE INDENT t = ( d * ( t - ord ( txt [ i ] ) * h ) + ord ( txt [ i + M ] ) ) % q NEW_LINE if t < 0 : NEW_LINE INDENT t = t + q NEW_LINE DEDENT DEDENT DEDENT DEDENT txt = "" GEEKS ▁ FOR ▁ GEEKS "" NEW_LINE pat = "" GEEK "" NEW_LINE q = 101 NEW_LINE search ( pat , txt , q ) NEW_LINE","public class Main { public final static int d = 256 ; static void search ( String pat , String txt , int q ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i , j ; int p = 0 ; int t = 0 ; int h = 1 ; for ( i = 0 ; i < M - 1 ; i ++ ) h = ( h * d ) % q ; for ( i = 0 ; i < M ; i ++ ) { p = ( d * p + pat . charAt ( i ) ) % q ; t = ( d * t + txt . charAt ( i ) ) % q ; } for ( i = 0 ; i <= N - M ; i ++ ) { if ( p == t ) { for ( j = 0 ; j < M ; j ++ ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; } if ( j == M ) System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; } if ( i < N - M ) { t = ( d * ( t - txt . charAt ( i ) * h ) + txt . charAt ( i + M ) ) % q ; if ( t < 0 ) t = ( t + q ) ; } } } public static void main ( String [ ] args ) { String txt = "" GEEKS ▁ FOR ▁ GEEKS "" ; String pat = "" GEEK "" ; int q = 101 ; search ( pat , txt , q ) ; } }","public class Main { static int d = 256; public static void main (String[] args){ String txt = ""GEEKS FOR GEEKS""; String pat = ""GEEK""; int q = 101; search(pat, txt, q); } static void search(String pat, String txt, int q){ int M = pat.length(); int N = txt.length(); int h = 1; for (int i = 0; i < M - 1; ++i) { h = (h * d) % q; } long p = 0, t = 0; //use long to avoid overflow of integer in Java for (int i = 0; i < M; ++i){ p = (d * p + pat.charAt(i)) % q; t = (d * t + txt.charAt(i)) % q; } for (int i = 0; i <= N - M; ++i){ if (p == t) { int j; for (j = 0; j < M; j++) { if (txt.charAt(i + j) != pat.charAt(j)){ break; } } if (j == M){//if pattern is found System.out.println(""Pattern found at index "" + i); } } //calculate for next iteration of text if(i < N - M) { t = (d * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q; if (t < 0){ t += q; //avoid negative value of hash code } } } } } ",13.365859031677246,0.8343200621951592,0.770065292964782,0.6559495803161197,0.9411764705882353,0.7415176473977543
13546,Python,Java,"def gcd ( a , b ) : ' NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","class Test { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public class Main { public static void main(String[] args){ int a = 98; int b = 56; if (gcd(a, b)!=0) { System.out.println(""GCD of "" + a + "" and "" + b + "" is "" + gcd(a, b)); } else { System.out<｜begin▁of▁sentence｜>.println(""not found""); } } public static int gcd (int a , int b ){ if (b==0) return a; return gcd (b, a % b ); } } ",3.575777053833008,0.7053571428571429,0.6476121867302563,0.5562009596315972,0.9411764705882353,0.6716936129185886
2096,Python,Java,"def isPowerOfFour ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT while ( n != 1 ) : NEW_LINE INDENT if ( n % 4 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT n = n // 4 NEW_LINE DEDENT return True NEW_LINE DEDENT test_no = 64 NEW_LINE if ( isPowerOfFour ( 64 ) ) : NEW_LINE INDENT print ( test_no , ' is ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( test_no , ' is ▁ not ▁ a ▁ power ▁ of ▁ 4' ) NEW_LINE DEDENT","class GFG { static int isPowerOfFour ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; } public static void main ( String [ ] args ) { int test_no = 64 ; if ( isPowerOfFour ( test_no ) == 1 ) System . out . println ( test_no + "" ▁ is ▁ a ▁ power ▁ of ▁ 4"" ) ; else System . out . println ( test_no + "" is ▁ not ▁ a ▁ power ▁ of ▁ 4"" ) ; } }","public class Main { public static void main(String[] args) { int testNo = 64; if (isPowerOfFour(testNo)) { System.out.println(testNo + "" is a power of 4""); } else { System.out<｜begin▁of▁sentence｜>line(testNo + "" is not a power of 4""); } } public static boolean isPowerOfFour(int n) { if (n == 0) return false; while (n != 1){ if (n % 4 != 0) return false; n = n / 4; } return true; } } ",3.425281047821045,0.7472778163992365,0.6418126549266712,0.5301843480375802,0.8695652173913044,0.6319986088436974
7050,Python,Java,"def maxSumIS ( arr , n ) : NEW_LINE INDENT max = 0 NEW_LINE msis = [ 0 for x in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT msis [ i ] = arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) : NEW_LINE INDENT msis [ i ] = msis [ j ] + arr [ i ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if max < msis [ i ] : NEW_LINE INDENT max = msis [ i ] NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT arr = [ 1 , 101 , 2 , 3 , 100 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Sum ▁ of ▁ maximum ▁ sum ▁ increasing ▁ "" + "" subsequence ▁ is ▁ "" + str ( maxSumIS ( arr , n ) ) ) NEW_LINE","class GFG { static int maxSumIS ( int arr [ ] , int n ) { int i , j , max = 0 ; int msis [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ; return max ; } public static void main ( String args [ ] ) { int arr [ ] = new int [ ] { 1 , 101 , 2 , 3 , 100 , 4 , 5 } ; int n = arr . length ; System . out . println ( "" Sum ▁ of ▁ maximum ▁ sum ▁ "" + "" increasing ▁ subsequence ▁ is ▁ "" + maxSumIS ( arr , n ) ) ; } }","public class Main { public static void main(String[] args) { int arr[] = {1, 101, 2, 3, 100, 4, 5}; int n = arr.length; System.out.println(""Sum of maximum sum increasing subsequence is "" + maxSumIS(arr, n)); } static int maxSumIS(int arr[], int n) { int i, j, max = 0; int msis[] = new int[n]; for (i = 0; i < n; i++) msis[i] = arr[i]; for (i = 1; i < n; i++) { for (j = 0; j < i; j++) { if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) msis[i] = msis[j] + arr[i]; } } for (i = 0; i < n; i++) { if (max < msis[i]) max = msis[i]; } return max; } } ",9.403750896453857,0.868427908763042,0.8144456688144183,0.7477572600268452,1.0,0.8234300820187916
8947,Python,Java,"def exponentMod ( A , B , C ) : NEW_LINE INDENT if ( A == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( B == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT y = 0 NEW_LINE if ( B % 2 == 0 ) : NEW_LINE INDENT y = exponentMod ( A , B / 2 , C ) NEW_LINE y = ( y * y ) % C NEW_LINE DEDENT else : NEW_LINE INDENT y = A % C NEW_LINE y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C NEW_LINE DEDENT return ( ( y + C ) % C ) NEW_LINE DEDENT A = 2 NEW_LINE B = 5 NEW_LINE C = 13 NEW_LINE print ( "" Power ▁ is "" , exponentMod ( A , B , C ) ) NEW_LINE","import java . io . * ; class GFG { static int exponentMod ( int A , int B , int C ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; long y ; if ( B % 2 == 0 ) { y = exponentMod ( A , B / 2 , C ) ; y = ( y * y ) % C ; } else { y = A % C ; y = ( y * exponentMod ( A , B - 1 , C ) % C ) % C ; } return ( int ) ( ( y + C ) % C ) ; } public static void main ( String args [ ] ) { int A = 2 , B = 5 , C = 13 ; System . out . println ( "" Power ▁ is ▁ "" + exponentMod ( A , B , C ) ) ; } }","public class Main { public static void main(String[] args){ int A = 2; int B = 5; int C = 13; System.out.println(""Power is "" + exponentMod(A, B, C)); } private static int exponentMod (int A, int B, int C) { if (A == 0) return 0; if (B == 0) return 1; int y = 0; if(B % 2 == 0) y = exponentMod(A, B / 2, C); else y = A % C; y = (y * y) % C; return ((y + C ) % C ); } } ",4.896317958831787,0.7349734315840822,0.6754668537495546,0.5894779028555915,0.9473684210526316,0.6968450583147034
9368,Python,Java,"def octant ( x , y , z ) : NEW_LINE INDENT if x >= 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z >= 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y >= 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" NEW_LINE DEDENT elif x < 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" NEW_LINE DEDENT elif x >= 0 and y < 0 and z < 0 : NEW_LINE INDENT print "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" NEW_LINE DEDENT DEDENT x , y , z = 2 , 3 , 4 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 4 , 2 , - 8 NEW_LINE octant ( x , y , z ) NEW_LINE x , y , z = - 6 , - 2 , 8 NEW_LINE octant ( x , y , z ) NEW_LINE","import java . util . * ; class solution { static void octant ( float x , float y , float z ) { if ( x >= 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 1st ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 2nd ▁ octant "" ) ; else if ( x < 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 3rd ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z >= 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 4th ▁ octant "" ) ; else if ( x >= 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 5th ▁ octant "" ) ; else if ( x < 0 && y >= 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 6th ▁ octant "" ) ; else if ( x < 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 7th ▁ octant "" ) ; else if ( x >= 0 && y < 0 && z < 0 ) System . out . println ( "" Point ▁ lies ▁ in ▁ 8th ▁ octant "" ) ; } public static void main ( String args [ ] ) { float x = 2 , y = 3 , z = 4 ; octant ( x , y , z ) ; x = - 4 ; y = 2 ; z = - 8 ; octant ( x , y , z ) ; x = - 6 ; y = - 2 ; z = 8 ; octant ( x , y , z ) ; } }","public class Main { public static void main(String[] args) { // test with point (2,3,4) octant(2, 3, 4); // test with point (-4,2,-8) octant(-4, 2, -8); // test with point (-6,-2,8) octant(-6, -2, 8); } public static void octant(int x, int y, int z){ if (x >= 0 && y >= 0 && z >= 0 ){ System.out.println(""Point lies in the 1st octant""); } else if (x < 0 && y >= 0 && z >= 0) { System.out.println(""Point lies in the 2nd octant""); } else if (x < 0 && y < 0 && z >= 0) { System.out.println(""Point lies in the 3rd octant""); } else if (x >= 0 && y < 0 && z >= 0) { System.out.println(""Point lies in the 4th octant""); } else if (x >= 0 && y >= 0 && z < 0 ){ System.out.println(""Point lies in the 5th octant""); } else if (x < 0 && y >= 0 && z < 0) { System.out.println(""Point lies in the 6th octant""); } else if (x < 0 && y < 0 && z < 0) { System.out.println(""Point lies in the 7th octant""); } else if (x >= 0 && y < 0 && z < 0) { System.out.println(""Point lies in the 8th octant""); } } } ",13.02318000793457,0.6597802737915082,0.5532528287225055,0.44076793897085853,0.9333333333333333,0.588537557279601
2090,Python,Java,def addOne ( x ) : NEW_LINE INDENT m = 1 ; NEW_LINE while ( x & m ) : NEW_LINE INDENT x = x ^ m NEW_LINE m <<= 1 NEW_LINE DEDENT x = x ^ m NEW_LINE return x NEW_LINE DEDENT n = 13 NEW_LINE print addOne ( n ) NEW_LINE,class GFG { static int addOne ( int x ) { int m = 1 ; while ( ( int ) ( x & m ) >= 1 ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; } public static void main ( String [ ] args ) { System . out . println ( addOne ( 13 ) ) ; } },public class Main { public static void main(String[] args) { int n = 13; System.out.println(addOne(n)); } private static int addOne(int x) { int m = 1; while ((x & m) != 0) { x = x ^ m; m <<= 1; } x = x ^ m; return x; } } ,4.924077033996582,0.8734177215189873,0.8128112466541288,0.7243145311195396,0.9411764705882353,0.7893731129601482
12740,Python,Java,"' NEW_LINE ' NEW_LINE def divisorSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += int ( n / i ) * i NEW_LINE DEDENT return int ( sum ) NEW_LINE DEDENT n = 4 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE n = 5 NEW_LINE print ( divisorSum ( n ) ) NEW_LINE",import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } },"public class Main { public static void main(String[] args) { int n = 4; System.out.println(divisorSum(n)); n = 5; System.out.println(divisorSum(n)); } private static int divisorSum(int n) { int sum = 0; for (int i = 1; i <= n; i++) { sum += Math.floorDiv(n, i) * i; } return sum; } } ",8.279519081115723,0.7799390694729058,0.7095712142734156,0.6011600875520664,0.9411764705882353,0.703165002462917
12813,Python,Java,"def SUM ( x , n ) : NEW_LINE INDENT total = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT total = total + ( ( x ** i ) / i ) NEW_LINE DEDENT return total NEW_LINE DEDENT x = 2 NEW_LINE n = 5 NEW_LINE s = SUM ( x , n ) NEW_LINE print ( round ( s , 2 ) ) NEW_LINE","import static java . lang . Math . pow ; class GFG { static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "" % .2f "" , sum ( x , n ) ) ; } }","public class Main { static double sum (double x, int n){ double total = 1; for(int i = 1 ;i<=n;i++) { total = total + ((Math.pow(x , i))/i); } return total; } public static void main(String[] args){ double x = 2; int n = 5; double s = sum (x, n); System.out.println(Math.round(s * 100.0) / 100.0); } } ",5.567603826522827,0.7107995867177096,0.6306085168450908,0.48677562574488104,1.0,0.6407429380214167
12673,Python,Java,def AvgofSquareN ( n ) : NEW_LINE INDENT return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; NEW_LINE DEDENT n = 2 ; NEW_LINE print ( AvgofSquareN ( n ) ) ; NEW_LINE,import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },public class Main { public static void main(String[] args) { int n = 2; System.out.println(avgOfSquareN(n)); } private static double avgOfSquareN(int n) { return ((double)(n + 1) * ( 2 * n + 1)) / 6; } } ,4.45508885383606,0.7549592366420551,0.6884609983542562,0.5905266356797935,0.9333333333333333,0.6933686449758554
7057,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT if n == 0 or W == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt [ n - 1 ] > W ) : NEW_LINE INDENT return knapSack ( W , wt , val , n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) NEW_LINE DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print knapSack ( W , wt , val , n ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { if ( n == 0 W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) , knapSack ( W , wt , val , n - 1 ) ) ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Main { public static void main(String[] args) { int[] val = {60, 100, 120}; int[] wt = {10, 20, 30}; int W = 50; int n = val.length; System.out.println(knapSack(W, wt, val, n)); } public static int knapSack(int W, int[] wt, int[] val, int n) { if (n == 0 || W == 0) return 0; if (wt[n - 1] > W) return knapSack(W, wt, val, n - 1); else return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1)); } } ",7.306463003158569,0.7883322838065222,0.7363687375574206,0.6643281496859917,0.9473684210526316,0.7492402310959836
2149,Python,Java,"def swap ( xp , yp ) : NEW_LINE INDENT xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] NEW_LINE DEDENT x = [ 10 ] NEW_LINE swap ( x , x ) NEW_LINE print ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" , x [ 0 ] ) NEW_LINE","class GFG { static void swap ( int [ ] xp , int [ ] yp ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; } public static void main ( String [ ] args ) { int [ ] x = { 10 } ; swap ( x , x ) ; System . out . println ( "" After ▁ swap ( & x , ▁ & x ) : ▁ x ▁ = ▁ "" + x [ 0 ] ) ; } }","public static void main(String[] args) { int[] x = {10}; swap(x, x); System.out.println(""After swap(x, &x): x[0] = "" + x[0]); } public static void swap(int[] xp, int[] yp) { int temp = xp[0]; xp[0] = yp[0]; yp[0] = temp; temp = xp[0]; xp[0] = yp[0]; yp[0] = temp; } ",5.5946691036224365,0.8469576656800957,0.796677811714174,0.6877922394775596,0.9090909090909091,0.7541818403615644
8793,Python,Java,"def divideString ( string , n ) : NEW_LINE INDENT str_size = len ( string ) NEW_LINE if str_size % n != 0 : NEW_LINE INDENT print "" Invalid ▁ Input : ▁ String ▁ size ▁ is ▁ not ▁ divisible ▁ by ▁ n "" NEW_LINE return NEW_LINE DEDENT part_size = str_size / n NEW_LINE k = 0 NEW_LINE for i in string : NEW_LINE INDENT if k % part_size == 0 : NEW_LINE INDENT print   "" NEW_LINE DEDENT DEDENT DEDENT "" , NEW_LINE INDENT print i , NEW_LINE k += 1 NEW_LINE DEDENT string = "" a _ simple _ divide _ string _ quest "" NEW_LINE / * length od string is 28 * / NEW_LINE divideString ( string , 4 ) NEW_LINE","class GFG { static void divideString ( String str , int n ) { int str_size = str . length ( ) ; int part_size ; if ( str_size % n != 0 ) { System . out . println ( "" Invalid ▁ Input : ▁ String ▁ size "" + "" is ▁ not ▁ divisible ▁ by ▁ n "" ) ; return ; } part_size = str_size / n ; for ( int i = 0 ; i < str_size ; i ++ ) { if ( i % part_size == 0 ) System . out . println ( ) ; System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = "" a _ simple _ divide _ string _ quest "" ; divideString ( str , 4 ) ; } }","import java.lang.*; public class Main { public static void main(String[] args) { String str = "" a simple divide string quest""; int n = 4; divideString(str, n); } public static void divideString (String string , int n ){ int str_size = string.length(); if (str_size % n != 0){ System.out<｜begin▁of▁sentence｜>(""Invalid Input: String size is not divisible by n""); return; } int part_size = str_size / n; int k = 0; for(int i=0; i<string.length(); i++){ if (k % part_size == 0) { System.out.println(""\n"" + string.charAt(i)); k += 1; } else { System.out.print(string.charAt(i)); } } } } ",8.14160418510437,0.7204968944099379,0.6113573128499857,0.44702275500278493,0.9473684210526316,0.5971264548177388
2142,Python,Java,def swapBits ( x ) : NEW_LINE INDENT even_bits = x & 0xAAAAAAAA NEW_LINE odd_bits = x & 0x55555555 NEW_LINE even_bits >>= 1 NEW_LINE odd_bits <<= 1 NEW_LINE return ( even_bits odd_bits ) NEW_LINE DEDENT x = 23 NEW_LINE print ( swapBits ( x ) ) NEW_LINE,class GFG { static int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA ; int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits odd_bits ) ; } public static void main ( String [ ] args ) { int x = 23 ; System . out . println ( swapBits ( x ) ) ; } },public class Main { public static void main(String[] args) { int x = 23; System.out.println(swapBits(x)); } private static int swapBits (int x) { int even_bits = x & 0xAAAAAAAA; int odd_bits = x & 0x55555555; even_bits >>= 1; odd_bits <<= 1; return (even_bits | odd_bits); } } ,4.9400084018707275,0.9188334835729212,0.8834325227144397,0.8317224287477515,0.9333333333333333,0.862205700123426
1683,Python,Java,"def equilibrium ( arr ) : NEW_LINE INDENT total_sum = sum ( arr ) NEW_LINE leftsum = 0 NEW_LINE for i , num in enumerate ( arr ) : NEW_LINE INDENT total_sum -= num NEW_LINE if leftsum == total_sum : NEW_LINE INDENT return i NEW_LINE DEDENT leftsum += num NEW_LINE DEDENT return - 1 NEW_LINE DEDENT arr = [ - 7 , 1 , 5 , 2 , - 4 , 3 , 0 ] NEW_LINE print ( ' First ▁ equilibrium ▁ index ▁ is ▁ ' , equilibrium ( arr ) ) NEW_LINE","class EquilibriumIndex { int equilibrium ( int arr [ ] , int n ) { int sum = 0 ; int leftsum = 0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { sum -= arr [ i ] ; if ( leftsum == sum ) return i ; leftsum += arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { EquilibriumIndex equi = new EquilibriumIndex ( ) ; int arr [ ] = { - 7 , 1 , 5 , 2 , - 4 , 3 , 0 } ; int arr_size = arr . length ; System . out . println ( "" First ▁ equilibrium ▁ index ▁ is ▁ "" + equi . equilibrium ( arr , arr_size ) ) ; } }","import java.util.*; public class Main { public static int equilibrium(int[] arr) { int totalSum = 0; for (int num : arr) { totalSum += num; } int leftsum = 0; for (int i=0;i<arr.length;i++) { totalSum -= arr[i]; if (leftsum == totalSum) { return i; } leftsum += arr[i]; } return -1; } public static void main(String[] args){ int arr [] = {-7, 1, 5, 2, -4, 3, 0}; System.out.println(""First equilibrium index is "" + equilibrium(arr)); } } ",4.943363904953003,0.6311427202177154,0.5359054927731332,0.39505272090711807,0.9473684210526316,0.5607474309507721
1862,Python,Java,"def knapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for x in range ( W + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT return K [ n ] [ W ] NEW_LINE DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print ( knapSack ( W , wt , val , n ) ) NEW_LINE","class Knapsack { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int i , w ; int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( w = 0 ; w <= W ; w ++ ) { if ( i == 0 w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; } public static void main ( String args [ ] ) { int val [ ] = new int [ ] { 60 , 100 , 120 } ; int wt [ ] = new int [ ] { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }","public class Main { static int knapSack(int W, int wt[], int val[], int n) { int i, w; int K[][] = new int[n + 1][W + 1]; for (i = 0; i <= n; i++) { for (w = 0; w <= W; w++) { if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i - 1] <= w) K[i][w] = Math.max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]); else K[i][w] = K[i - 1][w]; } } return K[n][W]; } public static void main(String args[]) { int val[] = {60, 100, 120}; int wt[] = {10, 20, 30}; int W = 50; int n = val.length; System.out.println(knapSack(W, wt, val, n)); } } ",7.567816972732544,0.8348333192639,0.8190424555027066,0.7914069803388523,1.0,0.8539848862371966
2143,Python,Java,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( True if ( n > 0 and ( ( n & ( n - 1 ) ) > 0 ) ) else False ) ; NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if ( isPowerOfTwo ( n ) == True ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT i = 1 ; NEW_LINE pos = 1 ; NEW_LINE while ( ( i & n ) == 0 ) : NEW_LINE INDENT i = i << 1 ; NEW_LINE pos += 1 ; NEW_LINE DEDENT return pos ; NEW_LINE DEDENT n = 16 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 12 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT n = 128 ; NEW_LINE pos = findPosition ( n ) ; NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Invalid ▁ number "" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" , ▁ Position ▁ "" , pos ) ; NEW_LINE DEDENT","class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","public class Main { public static void main(String[] args) { int n = 16; int pos = findPosition(n); if (pos == -1){ System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(""n = "" + n + "", Position "" + pos); } n = 12; pos = findPosition(n); if (pos == -1){ System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(""n = "" + n + "", Position "" + pos); } n = 128; pos = findPosition(n); if (pos == -1){ System.out.println(""n = "" + n + "", Invalid number""); } else { System.out.println(""n = "" + n + "", Position "" + pos); } } public static boolean isPowerOfTwo(int n) { return (n > 0 && ((n & (n - 1)) > 0)); } public static int findPosition(int n) { if (isPowerOfTwo(n) == true){ return -1; } int i = 1, pos = 1; while ((i & n) == 0) { i = i << 1; pos += 1; } return pos; } } ",10.596765041351318,0.7692195680909008,0.67741453277801,0.5612487344170911,0.9600000000000001,0.6808741140919639
1703,Python,Java,"def printRepeating ( arr , size ) : NEW_LINE INDENT count = [ 0 ] * size NEW_LINE print ( "" ▁ Repeating ▁ elements ▁ are ▁ "" , end = "" "" ) NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT if ( count [ arr [ i ] ] == 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT count [ arr [ i ] ] = count [ arr [ i ] ] + 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE","class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int count [ ] = new int [ size ] ; int i ; System . out . println ( "" Repeated ▁ elements ▁ are ▁ : ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) System . out . print ( arr [ i ] + "" ▁ "" ) ; else count [ arr [ i ] ] ++ ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }","import java.util.*; public class Main { public static void main(String[] args) { int arr[] = { 4, 2, 4, 5, 2, 3, 1 }; printRepeating(arr); } static void printRepeating(int arr[]) { Map<Integer, Integer> countMap = new HashMap<>(); System.out.print("" Repeating elements are ""); for (int i = 0; i < arr.length; i++) { if(countMap.getOrDefault(arr[i], 0) == 1){ System.out.print(arr[i] + "" ""); }else{ countMap.put(arr[i], countMap.getOrDefault(arr[i], 0) + 1); } } System.out.println(); } } ",7.691533088684082,0.6911124131327213,0.5876235828605866,0.4348206305298501,1.0,0.604374441370895
7056,Python,Java,"INT_MAX = 32767 NEW_LINE def eggDrop ( n , k ) : NEW_LINE INDENT eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ 1 ] = 1 NEW_LINE eggFloor [ i ] [ 0 ] = 0 NEW_LINE DEDENT for j in range ( 1 , k + 1 ) : NEW_LINE INDENT eggFloor [ 1 ] [ j ] = j NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT for j in range ( 2 , k + 1 ) : NEW_LINE INDENT eggFloor [ i ] [ j ] = INT_MAX NEW_LINE for x in range ( 1 , j + 1 ) : NEW_LINE INDENT res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) NEW_LINE if res < eggFloor [ i ] [ j ] : NEW_LINE INDENT eggFloor [ i ] [ j ] = res NEW_LINE DEDENT DEDENT DEDENT DEDENT return eggFloor [ n ] [ k ] NEW_LINE DEDENT n = 2 NEW_LINE k = 36 NEW_LINE print ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst ▁ case ▁ with "" + str ( n ) + "" eggs ▁ and ▁ "" + str ( k ) + "" ▁ floors ▁ is ▁ "" + str ( eggDrop ( n , k ) ) ) NEW_LINE","class EggDrop { static int max ( int a , int b ) { return ( a > b ) ? a : b ; } static int eggDrop ( int n , int k ) { int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; int res ; int i , j , x ; for ( i = 1 ; i <= n ; i ++ ) { eggFloor [ i ] [ 1 ] = 1 ; eggFloor [ i ] [ 0 ] = 0 ; } for ( j = 1 ; j <= k ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 2 ; j <= k ; j ++ ) { eggFloor [ i ] [ j ] = Integer . MAX_VALUE ; for ( x = 1 ; x <= j ; x ++ ) { res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } } return eggFloor [ n ] [ k ] ; } public static void main ( String args [ ] ) { int n = 2 , k = 10 ; System . out . println ( "" Minimum ▁ number ▁ of ▁ trials ▁ in ▁ worst "" + "" ▁ case ▁ with ▁ "" + n + "" ▁ eggs ▁ and ▁ "" + k + "" ▁ floors ▁ is ▁ "" + eggDrop ( n , k ) ) ; } }","public static final int INT_MAX = 32767; public static void main(String[] args){ System.out.println(""Minimum number of trials in worst case with "" + Integer.toString(2)+"" eggs and ""+Integer.toString(36)+"" floors is ""+Integer.toString(eggDrop(2, 36))); } public static int eggDrop (int n, int k){ int[][] eggFloor = new int[n + 1][k + 1]; for (int i = 1; i <= n ;i++) { eggFloor [i][0]=0; eggFloor [i][1]=1; } for(int j =1;j<=k;j++){ eggFloor[1][j]=j; } for (int i = 2; i <= n ;i++) { for (int j = 2; j <= k ;j++) { eggFloor [i][j] = INT_MAX; for(int x = 1;x<=j;x++){ int res = 1 + Math.max(eggFloor[i-1][x - 1], eggFloor[i][j - x]); if (res < eggFloor[i][j]) { eggFloor[i][j] = res; } } } } return eggFloor [n][k]; } ",12.287115097045898,0.7193798090607667,0.6237227016141468,0.49891327124378965,0.9,0.6192392898706527
13544,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a / gcd ( a , b ) ) * b NEW_LINE DEDENT a = 15 NEW_LINE b = 20 NEW_LINE print ( ' LCM ▁ of ' , a , ' and ' , b , ' is ' , lcm ( a , b ) ) NEW_LINE","class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a / gcd ( a , b ) ) * b ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "" LCM ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + lcm ( a , b ) ) ; } }","class Main { static int NEW_LINE = (int) '\n'; //Java does not have a constant for newline character, so we can use \n as an alternative. static int gcd(int a, int b) { if (a == 0) return b; return gcd(b % a, a); } static int lcm(int a, int b) { return (a / gcd(a, b)) * b; } public static void main(String[] args) { int a = 15; int b = 20; System.out.println(""LCM of "" + a + "" and "" + b + "" is "" + lcm(a, b)); } } ",8.312879085540771,0.7769784172661871,0.7351916247174873,0.6822845814752136,0.9411764705882353,0.75995214820912
1610,Python,Java,"NA = - 1 NEW_LINE def moveToEnd ( mPlusN , size ) : NEW_LINE INDENT i = 0 NEW_LINE j = size - 1 NEW_LINE for i in range ( size - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( mPlusN [ i ] != NA ) : NEW_LINE INDENT mPlusN [ j ] = mPlusN [ i ] NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT def merge ( mPlusN , N , m , n ) : NEW_LINE INDENT i = n NEW_LINE j = 0 NEW_LINE k = 0 NEW_LINE while ( k < ( m + n ) ) : NEW_LINE INDENT if ( ( j == n ) or ( i < ( m + n ) and mPlusN [ i ] <= N [ j ] ) ) : NEW_LINE INDENT mPlusN [ k ] = mPlusN [ i ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mPlusN [ k ] = N [ j ] NEW_LINE k += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , "" ▁ "" , end = "" "" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT mPlusN = [ 2 , 8 , NA , NA , NA , 13 , NA , 15 , 20 ] NEW_LINE N = [ 5 , 7 , 9 , 25 ] NEW_LINE n = len ( N ) NEW_LINE m = len ( mPlusN ) - n NEW_LINE moveToEnd ( mPlusN , m + n ) NEW_LINE merge ( mPlusN , N , m , n ) NEW_LINE printArray ( mPlusN , m + n ) NEW_LINE","class MergeArrays { void moveToEnd ( int mPlusN [ ] , int size ) { int i , j = size - 1 ; for ( i = size - 1 ; i >= 0 ; i -- ) { if ( mPlusN [ i ] != - 1 ) { mPlusN [ j ] = mPlusN [ i ] ; j -- ; } } } void merge ( int mPlusN [ ] , int N [ ] , int m , int n ) { int i = n ; int j = 0 ; int k = 0 ; while ( k < ( m + n ) ) { if ( ( i < ( m + n ) && mPlusN [ i ] <= N [ j ] ) || ( j == n ) ) { mPlusN [ k ] = mPlusN [ i ] ; k ++ ; i ++ ; } else { mPlusN [ k ] = N [ j ] ; k ++ ; j ++ ; } } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( "" "" ) ; } public static void main ( String [ ] args ) { MergeArrays mergearray = new MergeArrays ( ) ; int mPlusN [ ] = { 2 , 8 , - 1 , - 1 , - 1 , 13 , - 1 , 15 , 20 } ; int N [ ] = { 5 , 7 , 9 , 25 } ; int n = N . length ; int m = mPlusN . length - n ; mergearray . moveToEnd ( mPlusN , m + n ) ; mergearray . merge ( mPlusN , N , m , n ) ; mergearray . printArray ( mPlusN , m + n ) ; } }","public class Main { private static final int NA = -1; private static final String NEW_LINE = System.lineSeparator(); public static void moveToEnd(int[] mPlusN, int size) { int i = 0, j = size - 1; for (i = size - 1; i >= 0; i--) { if (mPlusN[i] != NA) { mPlusN[j] = mPlusN[i]; j--; } } } public static void merge(int[] mPlusN, int[] N, int m, int n) { int i = n, j = 0, k = 0; while (k < (m + n)) { if ((j == n) || (i < (m + n) && mPlusN[i] <= N[j])) { mPlusN[k] = mPlusN[i]; k++; i++; } else { mPlusN[k] = N[j]; k++; j++; } } } public static void printArray(int[] arr, int size) { for (int i = 0; i < size; i++) { System.out.print(arr[i] + "" ""); } System.out.println(); } public static void main(String args[]){ int mPlusN[] = {2, 8, NA, NA, NA, 13, NA, 15, 20}; int N[] = {5, 7, 9, 25}; int n = N.length; int m = mPlusN.length - n; moveToEnd(mPlusN, m + n); merge(mPlusN, N, m, n); printArray(mPlusN, m + n); } } ",15.532042264938354,0.8471919971199223,0.7793870511865956,0.6664325439665956,0.8695652173913043,0.7273723459940082
11743,Python,Java,"from math import pow NEW_LINE def nthTermOfTheSeries ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT nthTerm = pow ( n - 1 , 2 ) + n NEW_LINE DEDENT else : NEW_LINE INDENT nthTerm = pow ( n + 1 , 2 ) + n NEW_LINE DEDENT return nthTerm NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 8 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 12 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 102 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE n = 9999 NEW_LINE print ( int ( nthTermOfTheSeries ( n ) ) ) NEW_LINE DEDENT","import java . lang . Math ; class GFG { static long nthTermOfTheSeries ( int n ) { long nthTerm ; if ( n % 2 == 0 ) nthTerm = ( long ) Math . pow ( n - 1 , 2 ) + n ; else nthTerm = ( long ) Math . pow ( n + 1 , 2 ) + n ; return nthTerm ; } public static void main ( String [ ] args ) { int n ; n = 8 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 12 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 102 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; n = 9999 ; System . out . println ( nthTermOfTheSeries ( n ) ) ; } }","import java.lang.Math; public class Main { public static void main(String[] args){ System.out.println(nthTermOfTheSeries(8)); System.out.println(nthTermOfTheSeries(12)); System.out.println(nthTermOfTheSeries(102)); System.out.println(nthTermOfTheSeries(999)); System.out.println(nthTermOfTheSeries(9999)); } public static int nthTermOfTheSeries (int n){ if ((n % 2) == 0 ){ return (int)(Math.pow((n - 1), 2)) + n; } else { return (int)(Math.pow((n + 1), 2)) + n; } } } ",5.596096038818359,0.544492582273821,0.4380944212970249,0.2622479297006296,1.0,0.48357355079044073
13474,Python,Java,"def countSquares ( m , n ) : NEW_LINE INDENT if ( n < m ) : NEW_LINE INDENT temp = m NEW_LINE m = n NEW_LINE n = temp NEW_LINE DEDENT return ( ( m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = 4 NEW_LINE n = 3 NEW_LINE print ( "" Count ▁ of ▁ squares ▁ is ▁ "" , countSquares ( m , n ) ) NEW_LINE DEDENT","class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } public static void main ( String [ ] args ) { int m = 4 , n = 3 ; System . out . println ( "" Count ▁ of ▁ squares ▁ is ▁ "" + countSquares ( m , n ) ) ; } }","public class Main { public static void main(String[] args) { int m = 4; int n = 3; System.out.println(""Count of squares is "" + countSquares(m, n)); } private static double countSquares (int m, int n ){ if(n < m){ int temp = m; m = n; n = temp; } return ((m * (m + 1) * (2 * m + 1)) / 6 + (n - m) * m * (m + 1) / 2); } } ",4.732726097106934,0.906746728394112,0.8489840261977014,0.7736980625903298,0.9411764705882353,0.8239415849897014
13562,Python,Java,"def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , end = "" ▁ "" ) ; NEW_LINE DEDENT print ( "" "" ) ; NEW_LINE return ; NEW_LINE DEDENT def printSequencesRecur ( arr , n , k , index ) : NEW_LINE INDENT if ( k == 0 ) : NEW_LINE INDENT printArray ( arr , index ) ; NEW_LINE DEDENT if ( k > 0 ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ index ] = i ; NEW_LINE printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; NEW_LINE DEDENT DEDENT DEDENT def printSequences ( n , k ) : NEW_LINE INDENT arr = [ 0 ] * n ; NEW_LINE printSequencesRecur ( arr , n , k , 0 ) ; NEW_LINE return ; NEW_LINE DEDENT n = 3 ; NEW_LINE k = 2 ; NEW_LINE printSequences ( n , k ) ; NEW_LINE","class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + "" ▁ "" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }","public class Main { static void printArray(int arr[], int size) { for (int i = 0; i < size; i++) { System.out.print(arr[i] + "" ""); } System.out.println(); } static void printSequencesRecur(int arr[], int n, int k, int index) { if (k == 0) { printArray(arr,index); } if (k > 0) { for (int i = 1; i <= n; i++) { arr[index] = i; printSequencesRecur(arr,n, k - 1, index + 1); } } } static void printSequences(int n, int k){ int[] arr = new int[n]; printSequencesRecur(arr, n ,k,0 ); } public static void main (String[] args) { int n = 3; int k = 2; printSequences(n, k); } } ",6.718613147735596,0.8714942339427363,0.8393118393527338,0.7768932718131641,0.9473684210526316,0.8280358165850044
1955,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; if ( j == M ) { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","public class Main { public static void main(String[] args) { String txt = ""ABCEABCDABCEABCD""; String pat = "" ABCD ""; search(pat, txt); } public static void search(String pat, String txt) { int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { for (int j = 0; j < M; j++) { if (txt.charAt(i + j) != pat.charAt(j)) { break; } } if (j == M) { System.out<｜begin▁of▁sentence｜>.println("" Pattern found at index "" + i); i = i + M; } else if (j == 0) { i = i + 1; } else { i = i + j; } } } } ",6.496950149536133,0.8444650517437753,0.781028229913912,0.6773929207841617,1.0,0.7741750445489131
2018,Python,Java,"def fact ( n ) : NEW_LINE INDENT f = 1 NEW_LINE while n >= 1 : NEW_LINE INDENT f = f * n NEW_LINE n = n - 1 NEW_LINE DEDENT return f NEW_LINE DEDENT def findSmallerInRight ( st , low , high ) : NEW_LINE INDENT countRight = 0 NEW_LINE i = low + 1 NEW_LINE while i <= high : NEW_LINE INDENT if st [ i ] < st [ low ] : NEW_LINE INDENT countRight = countRight + 1 NEW_LINE DEDENT i = i + 1 NEW_LINE DEDENT return countRight NEW_LINE DEDENT def findRank ( st ) : NEW_LINE INDENT ln = len ( st ) NEW_LINE mul = fact ( ln ) NEW_LINE rank = 1 NEW_LINE i = 0 NEW_LINE while i < ln : NEW_LINE INDENT mul = mul / ( ln - i ) NEW_LINE countRight = findSmallerInRight ( st , i , ln - 1 ) NEW_LINE rank = rank + countRight * mul NEW_LINE i = i + 1 NEW_LINE DEDENT return rank NEW_LINE DEDENT st = "" string "" NEW_LINE print ( findRank ( st ) ) NEW_LINE","import java . io . * ; import java . util . * ; class GFG { static int fact ( int n ) { return ( n <= 1 ) ? 1 : n * fact ( n - 1 ) ; } static int findSmallerInRight ( String str , int low , int high ) { int countRight = 0 , i ; for ( i = low + 1 ; i <= high ; ++ i ) if ( str . charAt ( i ) < str . charAt ( low ) ) ++ countRight ; return countRight ; } static int findRank ( String str ) { int len = str . length ( ) ; int mul = fact ( len ) ; int rank = 1 ; int countRight ; for ( int i = 0 ; i < len ; ++ i ) { mul /= len - i ; countRight = findSmallerInRight ( str , i , len - 1 ) ; rank += countRight * mul ; } return rank ; } public static void main ( String [ ] args ) { String str = "" string "" ; System . out . println ( findRank ( str ) ) ; } }","public class Main { public static void main(String[] args) { System.out.println(findRank("" string "")); } public static int fact(int n) { int f = 1; while (n >= 1) { f = f * n; n = n - 1; } return f; } public static int findSmallerInRight(String st, int low, int high) { int countRight = 0; for (int i = low + 1; i <= high; i++){ if (st.charAt(i) < st.charAt(low)){ countRight += 1; } } return countRight; } public static int findRank(String st) { int ln = st.length(); int mul = fact(ln); int rank = 1; for (int i = 0; i < ln; i++){ mul /= (ln - i); int countRight = findSmallerInRight(st, i, ln-1 ); rank += countRight * mul; <｜begin▁of▁sentence｜>. } ",7.147597074508667,0.7511796063579773,0.6481430189329043,0.4754897931679972,0.9473684210526316,0.6170533815333875
1656,Python,Java,"def findElement ( arr , n , key ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == key ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 12 , 34 , 10 , 6 , 40 ] NEW_LINE n = len ( arr ) NEW_LINE key = 40 NEW_LINE index = findElement ( arr , n , key ) NEW_LINE if index != - 1 : NEW_LINE INDENT print ( "" element ▁ found ▁ at ▁ position : ▁ "" + str ( index + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" element ▁ not ▁ found "" ) NEW_LINE DEDENT","class Main { static int findElement ( int arr [ ] , int n , int key ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == key ) return i ; return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 34 , 10 , 6 , 40 } ; int n = arr . length ; int key = 40 ; int position = findElement ( arr , n , key ) ; if ( position == - 1 ) System . out . println ( "" Element ▁ not ▁ found "" ) ; else System . out . println ( "" Element ▁ Found ▁ at ▁ Position : ▁ "" + ( position + 1 ) ) ; } }","public class Main { public static void main(String[] args){ int arr [] = {12,34,10,6,40}; int n = arr.length; int key = 40; int index = findElement (arr , n ,key ); if (index!=-1) System.out.println(""element found at position: ""+(++index)); else System.out<｜begin▁of▁sentence｜>.println(""element not found""); } public static int findElement(int arr[], int n, int key){ for (int i=0;i<n;i++) { if (arr[i] == key) return i; } return -1; } } ",5.7190022468566895,0.6810315616661861,0.60048888009982,0.4800331959842175,1.0,0.6360232371889523
12321,Python,Java,"import math NEW_LINE def distance ( x1 , y1 , z1 , x2 , y2 , z2 ) : NEW_LINE INDENT d = math . sqrt ( math . pow ( x2 - x1 , 2 ) + math . pow ( y2 - y1 , 2 ) + math . pow ( z2 - z1 , 2 ) * 1.0 ) NEW_LINE print ( "" Distance ▁ is ▁ "" ) NEW_LINE print ( d ) NEW_LINE DEDENT x1 = 2 NEW_LINE y1 = - 5 NEW_LINE z1 = 7 NEW_LINE x2 = 3 NEW_LINE y2 = 4 NEW_LINE z2 = 5 NEW_LINE distance ( x1 , y1 , z1 , x2 , y2 , z2 ) NEW_LINE","import java . io . * ; import java . lang . Math ; class GFG { static void distance ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 ) { double d = Math . pow ( ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) + Math . pow ( z2 - z1 , 2 ) * 1.0 ) , 0.5 ) ; System . out . println ( "" Distance ▁ is ▁ "" + d ) ; return ; } public static void main ( String [ ] args ) { float x1 = 2 ; float y1 = - 5 ; float z1 = 7 ; float x2 = 3 ; float y2 = 4 ; float z2 = 5 ; distance ( x1 , y1 , z1 , x2 , y2 , z2 ) ; } }","import java.lang.Math; public class Main { public static void main(String[] args) { distance(2, -5, 7, 3, 4, 5); } public static void distance(double x1, double y1, double z1, double x2, double y2, double z2) { double d = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2) + Math.pow((z2 - z1), 2)) * 1.0; System.out<｜begin▁of▁sentence｜>.println(""Distance is "" + d); } } ",5.739208936691284,0.5122947015620514,0.40363579770052055,0.2538817942224688,0.9090909090909091,0.4504445286830009
2133,Python,Java,import math NEW_LINE def getFirstSetBitPos ( n ) : NEW_LINE INDENT return math . log2 ( n & - n ) + 1 NEW_LINE DEDENT n = 12 NEW_LINE print ( int ( getFirstSetBitPos ( n ) ) ) NEW_LINE,class GFG { public static int getFirstSetBitPos ( int n ) { return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log10 ( 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( getFirstSetBitPos ( n ) ) ; } },import java.lang.Math; public class Main { public static void main(String[] args) { int n = 12; System.out.println((int)(getFirstSetBitPos(n))); } public static double getFirstSetBitPos(int n) { return Math.log(n & -n) / Math.log(2) + 1; } } ,2.4371941089630127,0.752801330018438,0.7069615411487274,0.5600938179519938,1.0,0.6920656725663956
2190,Python,Java,"def maxDiff ( arr , arr_size ) : NEW_LINE INDENT max_diff = arr [ 1 ] - arr [ 0 ] NEW_LINE for i in range ( 0 , arr_size ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size ) : NEW_LINE INDENT if ( arr [ j ] - arr [ i ] > max_diff ) : NEW_LINE INDENT max_diff = arr [ j ] - arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return max_diff NEW_LINE DEDENT arr = [ 1 , 2 , 90 , 10 , 110 ] NEW_LINE size = len ( arr ) NEW_LINE print ( "" Maximum ▁ difference ▁ is "" , maxDiff ( arr , size ) ) NEW_LINE","class MaximumDiffrence { int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int i , j ; for ( i = 0 ; i < arr_size ; i ++ ) { for ( j = i + 1 ; j < arr_size ; j ++ ) { if ( arr [ j ] - arr [ i ] > max_diff ) max_diff = arr [ j ] - arr [ i ] ; } } return max_diff ; } public static void main ( String [ ] args ) { MaximumDifference maxdif = new MaximumDifference ( ) ; int arr [ ] = { 1 , 2 , 90 , 10 , 110 } ; System . out . println ( "" Maximum ▁ difference ▁ is ▁ "" + maxdif . maxDiff ( arr , 5 ) ) ; } }","public class Main { public static void main(String[] args) { int[] arr = {1, 2, 90, 10, 110}; System.out.println(""Maximum difference is "" + maxDiff(arr)); } private static int maxDiff(int[] arr){ int max_diff = arr[1] - arr[0]; for(int i=0; i<arr.length; i++) { for (int j = i+1; j < arr.length; j++) { if ((arr[j]-arr[i]) > max_diff){ max_diff = arr[j] - arr[i]; } } } return max_diff; } } ",4.973182916641235,0.7414144043136116,0.6436079453358702,0.4881571054382398,0.9,0.611709973806768
1715,Python,Java,"def find3Numbers ( A , arr_size , sum ) : NEW_LINE INDENT for i in range ( 0 , arr_size - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , arr_size - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , arr_size ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] == sum : NEW_LINE INDENT print ( "" Triplet ▁ is "" , A [ i ] , "" , ▁ "" , A [ j ] , "" , ▁ "" , A [ k ] ) NEW_LINE return True NEW_LINE DEDENT DEDENT DEDENT DEDENT return False NEW_LINE DEDENT A = [ 1 , 4 , 45 , 6 , 10 , 8 ] NEW_LINE sum = 22 NEW_LINE arr_size = len ( A ) NEW_LINE find3Numbers ( A , arr_size , sum ) NEW_LINE","class FindTriplet { boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { int l , r ; for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { System . out . print ( "" Triplet ▁ is ▁ "" + A [ i ] + "" , ▁ "" + A [ j ] + "" , ▁ "" + A [ k ] ) ; return true ; } } } } return false ; } public static void main ( String [ ] args ) { FindTriplet triplet = new FindTriplet ( ) ; int A [ ] = { 1 , 4 , 45 , 6 , 10 , 8 } ; int sum = 22 ; int arr_size = A . length ; triplet . find3Numbers ( A , arr_size , sum ) ; } }","import java.util.*; public class Main { static boolean find3Numbers(int A[], int arr_size, int sum) { for (int i = 0; i < arr_size - 2; i++) { for (int j = i + 1; j < arr_size - 1; j++) { for (int k = j + 1; k < arr_size; k++) { if (A[i] + A[j] + A[k] == sum) { System.out.println(""Triplet is "" + A[i] + "", "" + A[j] + "", "" + A[k]); return true; } } } } return false; } public static void main(String[] args) { int A[] = {1, 4, 45, 6, 10, 8}; int sum = 22; int arr_size = A.length; find3Numbers(A, arr_size, sum); } } ",6.457695007324219,0.8419839236993798,0.805171187636318,0.7473253637701813,0.9600000000000001,0.8111277546391269
12963,Python,Java,"def countDigit ( n ) : NEW_LINE INDENT if n / 10 == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 1 + countDigit ( n // 10 ) NEW_LINE DEDENT n = 345289467 NEW_LINE print ( "" Number ▁ of ▁ digits ▁ : ▁ % ▁ d "" % ( countDigit ( n ) ) ) NEW_LINE","import java . util . * ; class GFG { static int countDigit ( long n ) { if ( n / 10 == 0 ) return 1 ; return 1 + countDigit ( n / 10 ) ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "" Number ▁ of ▁ digits ▁ : ▁ "" + countDigit ( n ) ) ; } }","public class Main { public static void main(String[] args) { int n = 345289467; System.out.println(""Number of digits : "" + countDigit(n)); } private static int countDigit(int n) { if (n / 10 == 0) { return 1; } else { return 1 + countDigit(n / 10); } } } ",3.1391170024871826,0.7611581704393109,0.6813531854454633,0.5644487809002517,0.888888888888889,0.6617808132968428
1788,Python,Java,"def binarySearch ( arr , l , r , x ) : NEW_LINE INDENT if r >= l : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE if arr [ mid ] == x : NEW_LINE INDENT return mid NEW_LINE DEDENT elif arr [ mid ] > x : NEW_LINE INDENT return binarySearch ( arr , l , mid - 1 , x ) NEW_LINE DEDENT else : NEW_LINE INDENT return binarySearch ( arr , mid + 1 , r , x ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT arr = [ 2 , 3 , 4 , 10 , 40 ] NEW_LINE x = 10 NEW_LINE result = binarySearch ( arr , 0 , len ( arr ) - 1 , x ) NEW_LINE if result != - 1 : NEW_LINE INDENT print ( "" Element ▁ is ▁ present ▁ at ▁ index ▁ % ▁ d "" % result ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" Element ▁ is ▁ not ▁ present ▁ in ▁ array "" ) NEW_LINE DEDENT","class BinarySearch { int binarySearch ( int arr [ ] , int l , int r , int x ) { if ( r >= l ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; return binarySearch ( arr , mid + 1 , r , x ) ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , 0 , n - 1 , x ) ; if ( result == - 1 ) System . out . println ( "" Element ▁ not ▁ present "" ) ; else System . out . println ( "" Element ▁ found ▁ at ▁ index ▁ "" + result ) ; } }","class Main { static int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; else if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); else return binarySearch(arr, mid + 1, r, x); } else return -1; } public static void main (String[] args) { int arr[] = {2, 3, 4, 10, 40}; int x = 10; int result = binarySearch(arr, 0, arr.length - 1, x); if (result != -1) System.out.println(""Element is present at index "" + result); else System.out.println(""Element is not present in array""); } } ",7.798536062240601,0.7966206166202416,0.7443216886233256,0.6689715043331275,0.9473684210526316,0.7524905793489787
9263,Python,Java,PI = 3.14159265 NEW_LINE def area_cicumscribed ( c ) : NEW_LINE INDENT return ( c * c * ( PI / 4 ) ) NEW_LINE DEDENT c = 8.0 NEW_LINE print ( area_cicumscribed ( c ) ) NEW_LINE,import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double c = 8.0 ; System . out . println ( area_cicumscribed ( c ) ) ; } },public class Main { public static void main(String[] args) { double pi = 3.14159265; String newLine = System.lineSeparator(); double c = 8.0; System.out.println(areaInscribedCircle(c)); } public static double areaInscribedCircle(double c) { return (c * c * (Math.PI / 4)); } } ,3.9437758922576904,0.7522534232111657,0.6813242352727306,0.5755142434764459,1.0,0.7028599704335121
12672,Python,Java,"def AvgofSquareN ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum / n NEW_LINE DEDENT n = 2 NEW_LINE print ( AvgofSquareN ( n ) ) NEW_LINE",import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } },"public class Main { public static void main(String[] args) { int n = 2; System.out.println(avgOfSquareN(n)); } private static double avgOfSquareN(int n) { double sum = 0; for (int i = 1; i <= n; i++) { sum += Math.pow(i, 2); } return sum / n; } } ",2.4267539978027344,0.74302885801653,0.6512886914267707,0.5306326282370231,0.9411764705882353,0.6537957809423867
2304,Python,Java,"def printTwoElements ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT if arr [ abs ( arr [ i ] ) - 1 ] > 0 : NEW_LINE INDENT arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" The ▁ repeating ▁ element ▁ is "" , abs ( arr [ i ] ) ) NEW_LINE DEDENT DEDENT for i in range ( size ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT print ( "" and ▁ the ▁ missing ▁ element ▁ is "" , i + 1 ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 7 , 3 , 4 , 5 , 5 , 6 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE printTwoElements ( arr , n ) NEW_LINE","import java . io . * ; class GFG { static void printTwoElements ( int arr [ ] , int size ) { int i ; System . out . print ( "" The ▁ repeating ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { int abs_val = Math . abs ( arr [ i ] ) ; if ( arr [ abs_val - 1 ] > 0 ) arr [ abs_val - 1 ] = - arr [ abs_val - 1 ] ; else System . out . println ( abs_val ) ; } System . out . print ( "" And ▁ the ▁ missing ▁ element ▁ is ▁ "" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) System . out . println ( i + 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 3 , 4 , 5 , 5 , 6 , 2 } ; int n = arr . length ; printTwoElements ( arr , n ) ; } }","import java.util.*; public class Main { public static void printTwoElements(int arr[], int size) { for (int i = 0; i < size; i++) { if (arr[Math.abs(arr[i]) - 1] > 0) arr[Math.abs(arr[i]) - 1] = -arr[Math.abs(arr[i]) - 1]; else System.out.println(""The repeating element is "" + Math.abs(arr[i])); } for (int i = 0; i < size; i++) { if (arr[i] > 0) System.out.println(""and the missing element is "" + (i + 1)); } } public static void main(String[] args) { int arr[] = {7, 3, 4, 5, 5, 6, 2}; int n = arr.length; printTwoElements(arr, n); } } ",8.976538896560669,0.7490663444152638,0.653147245773166,0.5345252050792343,1.0,0.674167643555464
2148,Python,Java,"x = 10 NEW_LINE y = 5 NEW_LINE x = x ^ y ; NEW_LINE y = x ^ y ; NEW_LINE x = x ^ y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = ▁ "" , x , "" ▁ y ▁ = "" , y ) NEW_LINE","import java . io . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( "" After ▁ swap : ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","public class Main { public static void main(String[] args) { int x = 10; int y = 5; x = x ^ y; y = x ^ y; x = x ^ y; System.out.println(""After Swapping: x = "" + x + "", y = "" + y); } } ",4.27787184715271,0.7151609693213057,0.6471549110083072,0.5600348238878892,1.0,0.6920243767215224
9291,Python,Java,"def area ( r ) : NEW_LINE INDENT return ( 0.5 ) * ( 3.14 ) * ( r * r ) NEW_LINE DEDENT def perimeter ( r ) : NEW_LINE INDENT return ( 3.14 ) * ( r ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT r = 10 NEW_LINE print ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" , area ( r ) ) NEW_LINE print ( "" The ▁ Perimeter ▁ of ▁ Semicircle : ▁ "" , perimeter ( r ) ) NEW_LINE DEDENT","import java . io . * ; class GFG { static float area ( float r ) { return ( float ) ( ( 0.5 ) * ( 3.14 ) * ( r * r ) ) ; } static float perimeter ( float r ) { return ( float ) ( ( 3.14 ) * ( r ) ) ; } public static void main ( String [ ] args ) { float r = 10 ; System . out . println ( "" The ▁ Area ▁ of ▁ Semicircle : ▁ "" + area ( r ) ) ; System . out . println ( "" The ▁ Perimeter ▁ of ▁ Semicircle : "" + + perimeter ( r ) ) ; } }","public class Main { static double area(double r) { return (0.5) * (3.14) * (r * r); } static double perimeter(double r) { return (3.14) * (r + r); } public static void main(String[] args) { double r = 10; System.out.println(""The Area of Semicircle: "" + area(r)); System.out.println(""The Perimeter of Semicircle: "" + perimeter(r)); } } ",5.326221942901611,0.6611641638407922,0.5969312497272183,0.4681667491377739,1.0,0.6277167243964417
2076,Python,Java,"def swapBits ( x , p1 , p2 , n ) : NEW_LINE INDENT set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) NEW_LINE set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) NEW_LINE xor = ( set1 ^ set2 ) NEW_LINE xor = ( xor << p1 ) | ( xor << p2 ) NEW_LINE result = x ^ xor NEW_LINE return result NEW_LINE DEDENT res = swapBits ( 28 , 0 , 3 , 2 ) NEW_LINE print ( "" Result ▁ = "" , res ) NEW_LINE","class GFG { static int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; int result = x ^ xor ; return result ; } public static void main ( String [ ] args ) { int res = swapBits ( 28 , 0 , 3 , 2 ) ; System . out . println ( "" Result ▁ = ▁ "" + res ) ; } }","public class Main { public static void main(String[] args) { int res = swapBits(28, 0, 3, 2); System.out.println(""Result = "" + res); } public static int swapBits(int x, int p1, int p2, int n) { int set1 = (x >> p1) & ((1 << n) - 1); int set2 = (x >> p2) & ((1 << n) - 1); int xor = (set1 ^ set2); xor = (xor << p1) | (xor << p2); int result = x ^ xor; return result; } } ",6.966545104980469,0.9428681009240071,0.9247361006825834,0.8987421749362351,1.0,0.9291195224553646
12300,Python,Java,"def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 and b == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a == b ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( a > b ) : NEW_LINE INDENT return gcd ( a - b , b ) NEW_LINE DEDENT return gcd ( a , b - a ) NEW_LINE DEDENT a = 98 NEW_LINE b = 56 NEW_LINE if ( gcd ( a , b ) ) : NEW_LINE INDENT print ( ' GCD ▁ of ' , a , ' and ' , b , ' is ' , gcd ( a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' not ▁ found ' ) NEW_LINE DEDENT","class Test { static int gcd ( int a , int b ) { if ( a == 0 && b == 0 ) return 0 ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "" GCD ▁ of ▁ "" + a + "" ▁ and ▁ "" + b + "" ▁ is ▁ "" + gcd ( a , b ) ) ; } }","public class Main { public static void main(String[] args) { int a = 98; int b = 56; if (gcd(a, b)!=0) System.out.println(""GCD of "" + a + "" and "" + b + "" is "" + gcd(a, b)); else System.out.println(""not found""); } public static int gcd (int a , int b) { if ((a == 0) && (b == 0)) return 0; if (a == 0) return b; if (b == 0) return a; if (a == b) return a; if (a > b) return gcd(a - b, b); return gcd(a, b - a); } } ",7.87956690788269,0.8164556962025317,0.7766860056254101,0.704430179747346,0.9411764705882353,0.7754540669996128
2311,Python,Java,"def findFourElements ( A , n , X ) : NEW_LINE INDENT for i in range ( 0 , n - 3 ) : NEW_LINE INDENT for j in range ( i + 1 , n - 2 ) : NEW_LINE INDENT for k in range ( j + 1 , n - 1 ) : NEW_LINE INDENT for l in range ( k + 1 , n ) : NEW_LINE INDENT if A [ i ] + A [ j ] + A [ k ] + A [ l ] == X : NEW_LINE INDENT print ( "" % d , ▁ % d , ▁ % d , ▁ % d "" % ( A [ i ] , A [ j ] , A [ k ] , A [ l ] ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT A = [ 10 , 2 , 3 , 4 , 5 , 9 , 7 , 8 ] NEW_LINE n = len ( A ) NEW_LINE X = 23 NEW_LINE findFourElements ( A , n , X ) NEW_LINE","class FindFourElements { void findFourElements ( int A [ ] , int n , int X ) { for ( int i = 0 ; i < n - 3 ; i ++ ) { for ( int j = i + 1 ; j < n - 2 ; j ++ ) { for ( int k = j + 1 ; k < n - 1 ; k ++ ) { for ( int l = k + 1 ; l < n ; l ++ ) { if ( A [ i ] + A [ j ] + A [ k ] + A [ l ] == X ) System . out . print ( A [ i ] + "" ▁ "" + A [ j ] + "" ▁ "" + A [ k ] + "" ▁ "" + A [ l ] ) ; } } } } } public static void main ( String [ ] args ) { FindFourElements findfour = new FindFourElements ( ) ; int A [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = A . length ; int X = 91 ; findfour . findFourElements ( A , n , X ) ; } }","public static void findFourElements(int[] A, int n, int X){ for (int i = 0; i < n - 3; ++i) { for (int j = i + 1; j < n - 2; ++j) { for (int k = j + 1; k < n - 1; ++k) { for (int l = k + 1; l < n; ++l) { if(A[i] + A[j] + A[k] + A[l] == X){ System.out<｜begin▁of▁sentence｜>("" %d, %d, %d, %d"", A[i], A[j], A[k], A[l]); } } } } } } public static void main(String[] args) { int[] A = new int[]{10, 2, 3, 4, 5, 9, 7, 8}; int n = A.length; int X = 23; findFourElements(A, n, X); } ",8.37712836265564,0.7914407016079145,0.7295369604144719,0.6350308569847964,0.9411764705882353,0.726874541065828
836,Python,Java,"def Identity ( size ) : NEW_LINE INDENT for row in range ( 0 , size ) : NEW_LINE INDENT for col in range ( 0 , size ) : NEW_LINE INDENT if ( row == col ) : NEW_LINE INDENT print ( ""1 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ""0 ▁ "" , end = "" ▁ "" ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT size = 5 NEW_LINE Identity ( size ) NEW_LINE","class GFG { static int identity ( int num ) { int row , col ; for ( row = 0 ; row < num ; row ++ ) { for ( col = 0 ; col < num ; col ++ ) { if ( row == col ) System . out . print ( 1 + "" ▁ "" ) ; else System . out . print ( 0 + "" ▁ "" ) ; } System . out . println ( ) ; } return 0 ; } public static void main ( String args [ ] ) { int size = 5 ; identity ( size ) ; } }","public class Main { public static void main(String[] args) { int size = 5; identity(size); } private static void identity(int size) { for (int row = 0; row < size; row++) { System.out.println(); // Print new line for (int col = 0; col < size; col++) { if (row == col) { System.out.print(""1 ""); // Prints 1 followed by a space } else { System.out.print(""0 ""); // Prints 0 followed by a space } } } System.out.println(); // To print new line after the matrix is printed } } ",6.146328926086426,0.6484375,0.5052626587535524,0.3450964369008473,0.8571428571428572,0.4987103629734503
7322,Python,Java,"def search ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE i = 0 NEW_LINE while i <= N - M : NEW_LINE INDENT for j in xrange ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE print "" Pattern ▁ found ▁ at ▁ index ▁ "" + str ( i ) NEW_LINE i = i + M NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = i + j NEW_LINE DEDENT DEDENT DEDENT txt = "" ABCEABCDABCEABCD "" NEW_LINE pat = "" ABCD "" NEW_LINE search ( pat , txt ) NEW_LINE","class GFG { static void search ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int i = 0 ; while ( i <= N - M ) { int j ; for ( j = 0 ; j < M ; j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ; { System . out . println ( "" Pattern ▁ found ▁ at ▁ index ▁ "" + i ) ; i = i + M ; } else if ( j == 0 ) i = i + 1 ; else i = i + j ; } } public static void main ( String [ ] args ) { String txt = "" ABCEABCDABCEABCD "" ; String pat = "" ABCD "" ; search ( pat , txt ) ; } }","public class Main { public static void main(String[] args) { String txt = ""ABCEABCDABCEABCD""; String pat = ""ABCD""; search(pat, txt); } public static void search(String pat, String txt) { int M = pat.length(); int N = txt.length(); int i = 0; while (i <= N - M) { for (int j = 0; j < M; j++) { if (txt.charAt(i + j) != pat.charAt(j)) { break; } } System.out.println(""Pattern found at index "" + i); i = i + M; } } } ",6.010610818862915,0.6934922044454759,0.6354623366813762,0.5376277086631155,0.9473684210526316,0.6605499223799702
747,Python,Java,"def printSorted ( arr , start , end ) : NEW_LINE INDENT if start > end : NEW_LINE INDENT return NEW_LINE DEDENT printSorted ( arr , start * 2 + 1 , end ) NEW_LINE print ( arr [ start ] , end = "" ▁ "" ) NEW_LINE printSorted ( arr , start * 2 + 2 , end ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 2 , 5 , 1 , 3 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printSorted ( arr , 0 , arr_size - 1 ) NEW_LINE DEDENT","class GFG { private static void printSorted ( int [ ] arr , int start , int end ) { if ( start > end ) return ; printSorted ( arr , start * 2 + 1 , end ) ; System . out . print ( arr [ start ] + "" ▁ "" ) ; printSorted ( arr , start * 2 + 2 , end ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 } ; printSorted ( arr , 0 , arr . length - 1 ) ; } }","public class Main { public static void main(String[] args){ int[] arr = {4,2,5,1,3}; printSorted(arr, 0, arr.length-1); } private static void printSorted(int[] arr, int start, int end) { if (start > end) return; printSorted(arr, start*2+1, end); System.out<｜begin▁of▁sentence｜>.print(arr[start] + "" ""); printSorted(arr, start*2+2, end); } } ",5.547780275344849,0.7540288371575835,0.698990639032507,0.6100653510436586,1.0,0.727045745730561
13565,Python,Java,"MAX = 11 ; NEW_LINE def isMultipleof5 ( n ) : NEW_LINE INDENT s = str ( n ) ; NEW_LINE l = len ( s ) ; NEW_LINE if ( s [ l - 1 ] == '5' or s [ l - 1 ] == '0' ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT return False ; NEW_LINE DEDENT n = 19 ; NEW_LINE if ( isMultipleof5 ( n ) == True ) : NEW_LINE INDENT print ( n , "" is ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( n , "" is ▁ not ▁ a ▁ multiple ▁ of ▁ 5"" ) ; NEW_LINE DEDENT","class GFG { static int MAX = 11 ; static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' str [ len - 1 ] == '0' ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . println ( n + "" ▁ is ▁ multiple ▁ "" + "" of ▁ 5"" ) ; else System . out . println ( n + "" ▁ is ▁ not ▁ a ▁ "" + "" multiple ▁ of ▁ 5"" ) ; } }","public class Main { public static void main(String[] args) { int n = 19; if (isMultipleof5(n)) { System.out.println(n + "" is multiple of 5""); } else { System.out<｜begin▁of▁sentence｜> not a multiple of 5""; } } public static boolean isMultipleof5(int n) { String s = Integer.toString(n); int l = s.length(); if (s.charAt(l - 1) == '5' || s.charAt(l - 1) == '0') { return true; } return false; } } ",4.386916160583496,0.5713418199982996,0.47685195946955283,0.34591553860513463,0.9600000000000001,0.5301408770235942
1701,Python,Java,"def findPeakUtil ( arr , low , high , n ) : NEW_LINE INDENT mid = low + ( high - low ) / 2 NEW_LINE mid = int ( mid ) NEW_LINE if ( ( mid == 0 or arr [ mid - 1 ] <= arr [ mid ] ) and ( mid == n - 1 or arr [ mid + 1 ] <= arr [ mid ] ) ) : NEW_LINE INDENT return mid NEW_LINE DEDENT elif ( mid > 0 and arr [ mid - 1 ] > arr [ mid ] ) : NEW_LINE INDENT return findPeakUtil ( arr , low , ( mid - 1 ) , n ) NEW_LINE DEDENT else : NEW_LINE INDENT return findPeakUtil ( arr , ( mid + 1 ) , high , n ) NEW_LINE DEDENT DEDENT def findPeak ( arr , n ) : NEW_LINE INDENT return findPeakUtil ( arr , 0 , n - 1 , n ) NEW_LINE DEDENT arr = [ 1 , 3 , 20 , 4 , 1 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE print ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is "" , findPeak ( arr , n ) ) NEW_LINE","import java . util . * ; import java . lang . * ; import java . io . * ; class PeakElement { static int findPeakUtil ( int arr [ ] , int low , int high , int n ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 arr [ mid - 1 ] <= arr [ mid ] ) && ( mid == n - 1 arr [ mid + 1 ] <= arr [ mid ] ) ) return mid ; else if ( mid > 0 && arr [ mid - 1 ] > arr [ mid ] ) return findPeakUtil ( arr , low , ( mid - 1 ) , n ) ; else return findPeakUtil ( arr , ( mid + 1 ) , high , n ) ; } static int findPeak ( int arr [ ] , int n ) { return findPeakUtil ( arr , 0 , n - 1 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 20 , 4 , 1 , 0 } ; int n = arr . length ; System . out . println ( "" Index ▁ of ▁ a ▁ peak ▁ point ▁ is ▁ "" + findPeak ( arr , n ) ) ; } }","public class Main { static int findPeakUtil(int arr[], int low, int high, int n) { int mid = low + (high - low) / 2; // integer division by 2 if ((mid == 0 || arr[mid-1] <= arr[mid]) && (mid == n-1 || arr[mid+1] <= arr[mid])){ return mid; } else if (mid > 0 && arr[mid-1] > arr[mid]) { return findPeakUtil(arr, low, mid - 1, n); } else { return findPeakUtil(arr, mid + 1, high, n); } } static int findPeak(int arr[], int n) { return findPeakUtil(arr, 0, n-1, n); } public static void main (String[] args) { int arr[] = {1, 3, 20, 4, 1, 0}; int n = arr.length; System.out.println(""Index of a peak point is "" + findPeak(arr, n)); } } ",10.101139783859253,0.7718449989366041,0.7223376316554051,0.6436933311968603,1.0,0.7505853318378022
2147,Python,Java,"x = 10 NEW_LINE y = 5 NEW_LINE x = x * y NEW_LINE y = x // y ; NEW_LINE x = x // y ; NEW_LINE print ( "" After ▁ Swapping : ▁ x ▁ = "" , x , "" ▁ y ▁ = "" , y ) ; NEW_LINE","import java . io . * ; class GFG { public static void main ( String [ ] args ) { int x = 10 ; int y = 5 ; x = x * y ; y = x / y ; x = x / y ; System . out . println ( "" After ▁ swaping : "" + "" ▁ x ▁ = ▁ "" + x + "" , ▁ y ▁ = ▁ "" + y ) ; } }","int x = 10; System.out.println(); int y = 5; System.out.println(); x = x * y; y = x / y; x = x / y; System.out.print(""After Swapping: x = "" + x + "", y = "" + y); ",3.2896037101745605,0.5273977916922122,0.4638617023180919,0.3842001739371547,0.2857142857142857,0.354654407470294
3997,Python,Java,"def printNSE ( arr ) : NEW_LINE INDENT for i in range ( 0 , len ( arr ) , 1 ) : NEW_LINE INDENT next = - 1 NEW_LINE for j in range ( i + 1 , len ( arr ) , 1 ) : NEW_LINE INDENT if arr [ i ] > arr [ j ] : NEW_LINE INDENT next = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( str ( arr [ i ] ) + "" ▁ - - ▁ "" + str ( next ) ) NEW_LINE DEDENT DEDENT arr = [ 11 , 13 , 21 , 3 ] NEW_LINE printNSE ( arr ) NEW_LINE","class Main { static void printNSE ( int arr [ ] , int n ) { int next , i , j ; for ( i = 0 ; i < n ; i ++ ) { next = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { next = arr [ j ] ; break ; } } System . out . println ( arr [ i ] + "" ▁ - - ▁ "" + next ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 11 , 13 , 21 , 3 } ; int n = arr . length ; printNSE ( arr , n ) ; } }","public class Main { public static void main(String[] args) { int[] arr = {11, 13, 21, 3}; printNSE(arr); } private static void printNSE(int[] arr) { for (int i = 0; i < arr.length; i++) { int next = -1; for (int j = i + 1; j < arr.length; j++) { if (arr[i] > arr[j]) { next = arr[j]; break; } } System.out<｜begin▁of▁sentence｜>.println(arr[i] + "" --> "" + next); } } } ",4.63531494140625,0.7677667403079815,0.6810437261710984,0.5324271990248572,0.9411764705882353,0.6550519804938706
2144,Python,Java,"def isPowerOfTwo ( n ) : NEW_LINE INDENT return ( n and ( not ( n & ( n - 1 ) ) ) ) NEW_LINE DEDENT def findPosition ( n ) : NEW_LINE INDENT if not isPowerOfTwo ( n ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT n = n >> 1 NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == "" _ _ main _ _ "" : NEW_LINE INDENT n = 0 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 12 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT n = 128 NEW_LINE pos = findPosition ( n ) NEW_LINE if pos == - 1 : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Invalid ▁ number "" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "" n ▁ = "" , n , "" Position "" , pos ) NEW_LINE DEDENT DEDENT","class GFG { static boolean isPowerOfTwo ( int n ) { return n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int count = 0 ; while ( n > 0 ) { n = n >> 1 ; ++ count ; } return count ; } public static void main ( String [ ] args ) { int n = 0 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Invalid ▁ number "" ) ; else System . out . println ( "" n ▁ = ▁ "" + n + "" , ▁ Position ▁ "" + pos ) ; } }","public class Main { public static void main(String[] args) { int n = 0; int pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "" Invalid number""); } else { System.out.println(""n = "" + n + "" Position "" + pos); } n = 12; pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "" Invalid number""); } else { System.out.println(""n = "" + n + "" Position "" + pos); } n = 128; pos = findPosition(n); if (pos == -1) { System.out.println(""n = "" + n + "" Invalid number""); } else { System.out.println(""n = "" + n + "" Position "" + pos); } } public static int findPosition(int n) { if (!isPowerOfTwo(n)) { return -1; } int count = 0; while (n > 0) { n = n >> 1; count++; } return count; } public static boolean isPowerOfTwo(int n) { return ((n != 0) && ((n & (n - 1)) == 0)); } } ",13.298301935195923,0.7414770356811412,0.6505443485260269,0.537853011297205,1.0,0.6764971079080435
9367,Python,Java,"def mirror_point ( a , b , c , d , x1 , y1 , z1 ) : NEW_LINE INDENT k = ( - a * x1 - b * y1 - c * z1 - d ) / float ( ( a * a + b * b + c * c ) ) NEW_LINE x2 = a * k + x1 NEW_LINE y2 = b * k + y1 NEW_LINE z2 = c * k + z1 NEW_LINE x3 = 2 * x2 - x1 NEW_LINE y3 = 2 * y2 - y1 NEW_LINE z3 = 2 * z2 - z1 NEW_LINE print "" x3 ▁ = "" , x3 , NEW_LINE print "" y3 ▁ = "" , y3 , NEW_LINE print "" z3 ▁ = "" , z3 , NEW_LINE DEDENT a = 1 NEW_LINE b = - 2 NEW_LINE c = 0 NEW_LINE d = 0 NEW_LINE x1 = - 1 NEW_LINE y1 = 3 NEW_LINE z1 = 4 NEW_LINE mirror_point ( a , b , c , d , x1 , y1 , z1 ) NEW_LINE","import java . io . * ; class GFG { static void mirror_point ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { float k = ( - a * x1 - b * y1 - c * z1 - d ) / ( float ) ( a * a + b * b + c * c ) ; float x2 = a * k + x1 ; float y2 = b * k + y1 ; float z2 = c * k + z1 ; float x3 = 2 * x2 - x1 ; float y3 = 2 * y2 - y1 ; float z3 = 2 * z2 - z1 ; System . out . print ( "" x3 ▁ = ▁ "" + x3 + "" ▁ "" ) ; System . out . print ( "" y3 ▁ = ▁ "" + y3 + "" ▁ "" ) ; System . out . print ( "" z3 ▁ = ▁ "" + z3 + "" ▁ "" ) ; } public static void main ( String [ ] args ) { int a = 1 ; int b = - 2 ; int c = 0 ; int d = 0 ; int x1 = - 1 ; int y1 = 3 ; int z1 = 4 ; mirror_point ( a , b , c , d , x1 , y1 , z1 ) ; } }","public class Main { public static void main(String[] args){ int a = 1; int b = -2; int c = 0; int d = 0; double x1 = -1.0; double y1 = 3.0; double z1 = 4.0; mirrorPoint(a,b,c,d,x1,y1,z1); } public static void mirrorPoint(int a, int b, int c, int d, double x1, double y1, double z1){ double k = (-a*x1 - b*y1 - c*z1 - d) / (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)); double x2 = a * k + x1; double y2 = b * k + y1; double z2 = c * k + z1; double x3 = 2*x2 - x1; double y3 = 2*y2 - y1; double z3 = 2*z2 - z1; System.out.println(""x3 = ""+ x3); System.out.println(""y3 = "" + y3); System.out.println(""z3 = "" + z3); } } ",10.27070689201355,0.7186982393872515,0.6310747926137118,0.5055080897272859,1.0,0.6538556628091001
